{"ast":null,"code":"\"use strict\";\n\nimport _assertThisInitialized from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar allowedTransactionKeys = [\"accessList\", \"ccipReadEnabled\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"];\nvar forwardErrors = [Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED];\n;\n;\nexport var Signer = /*#__PURE__*/function () {\n  ///////////////////\n  // Sub-classes MUST call super\n  function Signer() {\n    _classCallCheck(this, Signer);\n    logger.checkAbstract(this instanceof Signer ? this.constructor : void 0, Signer);\n    defineReadOnly(this, \"_isSigner\", true);\n  }\n  ///////////////////\n  // Sub-classes MAY override these\n  _createClass(Signer, [{\n    key: \"getBalance\",\n    value: function getBalance(blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this._checkProvider(\"getBalance\");\n              _context.next = 3;\n              return this.provider.getBalance(this.getAddress(), blockTag);\n            case 3:\n              return _context.abrupt(\"return\", _context.sent);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"getTransactionCount\",\n    value: function getTransactionCount(blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              this._checkProvider(\"getTransactionCount\");\n              _context2.next = 3;\n              return this.provider.getTransactionCount(this.getAddress(), blockTag);\n            case 3:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n    // Populates \"from\" if unspecified, and estimates the gas for the transaction\n  }, {\n    key: \"estimateGas\",\n    value: function estimateGas(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var tx;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              this._checkProvider(\"estimateGas\");\n              _context3.next = 3;\n              return resolveProperties(this.checkTransaction(transaction));\n            case 3:\n              tx = _context3.sent;\n              _context3.next = 6;\n              return this.provider.estimateGas(tx);\n            case 6:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n    }\n    // Populates \"from\" if unspecified, and calls with the transaction\n  }, {\n    key: \"call\",\n    value: function call(transaction, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var tx;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              this._checkProvider(\"call\");\n              _context4.next = 3;\n              return resolveProperties(this.checkTransaction(transaction));\n            case 3:\n              tx = _context4.sent;\n              _context4.next = 6;\n              return this.provider.call(tx, blockTag);\n            case 6:\n              return _context4.abrupt(\"return\", _context4.sent);\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n    }\n    // Populates all fields in a transaction, signs it and sends it to the network\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var tx, signedTx;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              this._checkProvider(\"sendTransaction\");\n              _context5.next = 3;\n              return this.populateTransaction(transaction);\n            case 3:\n              tx = _context5.sent;\n              _context5.next = 6;\n              return this.signTransaction(tx);\n            case 6:\n              signedTx = _context5.sent;\n              _context5.next = 9;\n              return this.provider.sendTransaction(signedTx);\n            case 9:\n              return _context5.abrupt(\"return\", _context5.sent);\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"getChainId\",\n    value: function getChainId() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var network;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              this._checkProvider(\"getChainId\");\n              _context6.next = 3;\n              return this.provider.getNetwork();\n            case 3:\n              network = _context6.sent;\n              return _context6.abrupt(\"return\", network.chainId);\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              this._checkProvider(\"getGasPrice\");\n              _context7.next = 3;\n              return this.provider.getGasPrice();\n            case 3:\n              return _context7.abrupt(\"return\", _context7.sent);\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n    }\n  }, {\n    key: \"getFeeData\",\n    value: function getFeeData() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              this._checkProvider(\"getFeeData\");\n              _context8.next = 3;\n              return this.provider.getFeeData();\n            case 3:\n              return _context8.abrupt(\"return\", _context8.sent);\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n    }\n  }, {\n    key: \"resolveName\",\n    value: function resolveName(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              this._checkProvider(\"resolveName\");\n              _context9.next = 3;\n              return this.provider.resolveName(name);\n            case 3:\n              return _context9.abrupt(\"return\", _context9.sent);\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n    }\n    // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n  }, {\n    key: \"checkTransaction\",\n    value: function checkTransaction(transaction) {\n      for (var key in transaction) {\n        if (allowedTransactionKeys.indexOf(key) === -1) {\n          logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n        }\n      }\n      var tx = shallowCopy(transaction);\n      if (tx.from == null) {\n        tx.from = this.getAddress();\n      } else {\n        // Make sure any provided address matches this signer\n        tx.from = Promise.all([Promise.resolve(tx.from), this.getAddress()]).then(function (result) {\n          if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n            logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n          }\n          return result[0];\n        });\n      }\n      return tx;\n    }\n    // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n    //\n    // Notes:\n    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n  }, {\n    key: \"populateTransaction\",\n    value: function populateTransaction(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var _this = this;\n        var tx, hasEip1559, feeData, gasPrice;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return resolveProperties(this.checkTransaction(transaction));\n            case 2:\n              tx = _context11.sent;\n              if (tx.to != null) {\n                tx.to = Promise.resolve(tx.to).then(function (to) {\n                  return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n                    var address;\n                    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n                      while (1) switch (_context10.prev = _context10.next) {\n                        case 0:\n                          if (!(to == null)) {\n                            _context10.next = 2;\n                            break;\n                          }\n                          return _context10.abrupt(\"return\", null);\n                        case 2:\n                          _context10.next = 4;\n                          return this.resolveName(to);\n                        case 4:\n                          address = _context10.sent;\n                          if (address == null) {\n                            logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                          }\n                          return _context10.abrupt(\"return\", address);\n                        case 7:\n                        case \"end\":\n                          return _context10.stop();\n                      }\n                    }, _callee10, this);\n                  }));\n                });\n                // Prevent this error from causing an UnhandledPromiseException\n                tx.to.catch(function (error) {});\n              }\n              // Do not allow mixing pre-eip-1559 and eip-1559 properties\n              hasEip1559 = tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null;\n              if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n                logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n              } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n                logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n              }\n              if (!((tx.type === 2 || tx.type == null) && tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {\n                _context11.next = 10;\n                break;\n              }\n              // Fully-formed EIP-1559 transaction (skip getFeeData)\n              tx.type = 2;\n              _context11.next = 18;\n              break;\n            case 10:\n              if (!(tx.type === 0 || tx.type === 1)) {\n                _context11.next = 14;\n                break;\n              }\n              // Explicit Legacy or EIP-2930 transaction\n              // Populate missing gasPrice\n              if (tx.gasPrice == null) {\n                tx.gasPrice = this.getGasPrice();\n              }\n              _context11.next = 18;\n              break;\n            case 14:\n              _context11.next = 16;\n              return this.getFeeData();\n            case 16:\n              feeData = _context11.sent;\n              if (tx.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                  // The network supports EIP-1559!\n                  // Upgrade transaction from null to eip-1559\n                  tx.type = 2;\n                  if (tx.gasPrice != null) {\n                    // Using legacy gasPrice property on an eip-1559 network,\n                    // so use gasPrice as both fee properties\n                    gasPrice = tx.gasPrice;\n                    delete tx.gasPrice;\n                    tx.maxFeePerGas = gasPrice;\n                    tx.maxPriorityFeePerGas = gasPrice;\n                  } else {\n                    // Populate missing fee data\n                    if (tx.maxFeePerGas == null) {\n                      tx.maxFeePerGas = feeData.maxFeePerGas;\n                    }\n                    if (tx.maxPriorityFeePerGas == null) {\n                      tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                    }\n                  }\n                } else if (feeData.gasPrice != null) {\n                  // Network doesn't support EIP-1559...\n                  // ...but they are trying to use EIP-1559 properties\n                  if (hasEip1559) {\n                    logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                      operation: \"populateTransaction\"\n                    });\n                  }\n                  // Populate missing fee data\n                  if (tx.gasPrice == null) {\n                    tx.gasPrice = feeData.gasPrice;\n                  }\n                  // Explicitly set untyped transaction to legacy\n                  tx.type = 0;\n                } else {\n                  // getFeeData has failed us.\n                  logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"signer.getFeeData\"\n                  });\n                }\n              } else if (tx.type === 2) {\n                // Explicitly using EIP-1559\n                // Populate missing fee data\n                if (tx.maxFeePerGas == null) {\n                  tx.maxFeePerGas = feeData.maxFeePerGas;\n                }\n                if (tx.maxPriorityFeePerGas == null) {\n                  tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n                }\n              }\n            case 18:\n              if (tx.nonce == null) {\n                tx.nonce = this.getTransactionCount(\"pending\");\n              }\n              if (tx.gasLimit == null) {\n                tx.gasLimit = this.estimateGas(tx).catch(function (error) {\n                  if (forwardErrors.indexOf(error.code) >= 0) {\n                    throw error;\n                  }\n                  return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                    error: error,\n                    tx: tx\n                  });\n                });\n              }\n              if (tx.chainId == null) {\n                tx.chainId = this.getChainId();\n              } else {\n                tx.chainId = Promise.all([Promise.resolve(tx.chainId), this.getChainId()]).then(function (results) {\n                  if (results[1] !== 0 && results[0] !== results[1]) {\n                    logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                  }\n                  return results[0];\n                });\n              }\n              _context11.next = 23;\n              return resolveProperties(tx);\n            case 23:\n              return _context11.abrupt(\"return\", _context11.sent);\n            case 24:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n    }\n    ///////////////////\n    // Sub-classes SHOULD leave these alone\n  }, {\n    key: \"_checkProvider\",\n    value: function _checkProvider(operation) {\n      if (!this.provider) {\n        logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: operation || \"_checkProvider\"\n        });\n      }\n    }\n  }], [{\n    key: \"isSigner\",\n    value: function isSigner(value) {\n      return !!(value && value._isSigner);\n    }\n  }]);\n  return Signer;\n}();\nexport var VoidSigner = /*#__PURE__*/function (_Signer) {\n  _inherits(VoidSigner, _Signer);\n  var _super = _createSuper(VoidSigner);\n  function VoidSigner(address, provider) {\n    var _this2;\n    _classCallCheck(this, VoidSigner);\n    _this2 = _super.call(this);\n    defineReadOnly(_assertThisInitialized(_this2), \"address\", address);\n    defineReadOnly(_assertThisInitialized(_this2), \"provider\", provider || null);\n    return _this2;\n  }\n  _createClass(VoidSigner, [{\n    key: \"getAddress\",\n    value: function getAddress() {\n      return Promise.resolve(this.address);\n    }\n  }, {\n    key: \"_fail\",\n    value: function _fail(message, operation) {\n      return Promise.resolve().then(function () {\n        logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: operation\n        });\n      });\n    }\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(message) {\n      return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(transaction) {\n      return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n  }, {\n    key: \"_signTypedData\",\n    value: function _signTypedData(domain, types, value) {\n      return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n    }\n  }, {\n    key: \"connect\",\n    value: function connect(provider) {\n      return new VoidSigner(this.address, provider);\n    }\n  }]);\n  return VoidSigner;\n}(Signer);","map":{"version":3,"names":["_assertThisInitialized","_inherits","_createSuper","_regeneratorRuntime","_classCallCheck","_createClass","defineReadOnly","resolveProperties","shallowCopy","Logger","version","logger","allowedTransactionKeys","forwardErrors","errors","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","Signer","checkAbstract","constructor","key","value","getBalance","blockTag","_checkProvider","_context","next","provider","getAddress","abrupt","sent","stop","_callee","getTransactionCount","_context2","_callee2","estimateGas","transaction","_context3","checkTransaction","tx","_callee3","call","_context4","_callee4","sendTransaction","_context5","populateTransaction","signTransaction","signedTx","_callee5","getChainId","_context6","getNetwork","network","chainId","_callee6","getGasPrice","_context7","_callee7","getFeeData","_context8","_callee8","resolveName","name","_context9","_callee9","indexOf","throwArgumentError","from","Promise","all","resolve","then","result","toLowerCase","_context11","to","__awaiter","_this","mark","_callee10","address","wrap","_callee10$","_context10","prev","catch","error","hasEip1559","maxFeePerGas","maxPriorityFeePerGas","gasPrice","type","feeData","throwError","UNSUPPORTED_OPERATION","operation","nonce","gasLimit","code","UNPREDICTABLE_GAS_LIMIT","results","_callee11","isSigner","_isSigner","VoidSigner","_Signer","_super","_this2","_fail","message","signMessage","_signTypedData","domain","types","connect"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\abstract-signer\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\n\nimport { BlockTag, FeeData, Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { Bytes, BytesLike } from \"@ethersproject/bytes\";\nimport { Deferrable, defineReadOnly, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst allowedTransactionKeys: Array<string> = [\n    \"accessList\", \"ccipReadEnabled\", \"chainId\", \"customData\", \"data\", \"from\", \"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"to\", \"type\", \"value\"\n];\n\nconst forwardErrors = [\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n];\n\n// EIP-712 Typed Data\n// See: https://eips.ethereum.org/EIPS/eip-712\n\nexport interface TypedDataDomain {\n    name?: string;\n    version?: string;\n    chainId?: BigNumberish;\n    verifyingContract?: string;\n    salt?: BytesLike;\n};\n\nexport interface TypedDataField {\n    name: string;\n    type: string;\n};\n\n// Sub-classes of Signer may optionally extend this interface to indicate\n// they have a private key available synchronously\nexport interface ExternallyOwnedAccount {\n    readonly address: string;\n    readonly privateKey: string;\n}\n\n// Sub-Class Notes:\n//  - A Signer MUST always make sure, that if present, the \"from\" field\n//    matches the Signer, before sending or signing a transaction\n//  - A Signer SHOULD always wrap private information (such as a private\n//    key or mnemonic) in a function, so that console.log does not leak\n//    the data\n\n// @TODO: This is a temporary measure to preserve backwards compatibility\n//        In v6, the method on TypedDataSigner will be added to Signer\nexport interface TypedDataSigner {\n    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string>;\n}\n\nexport abstract class Signer {\n    readonly provider?: Provider;\n\n    ///////////////////\n    // Sub-classes MUST implement these\n\n    // Returns the checksum address\n    abstract getAddress(): Promise<string>\n\n    // Returns the signed prefixed-message. This MUST treat:\n    // - Bytes as a binary message\n    // - string as a UTF8-message\n    // i.e. \"0x1234\" is a SIX (6) byte string, NOT 2 bytes of data\n    abstract signMessage(message: Bytes | string): Promise<string>;\n\n    // Signs a transaction and returns the fully serialized, signed transaction.\n    // The EXACT transaction MUST be signed, and NO additional properties to be added.\n    // - This MAY throw if signing transactions is not supports, but if\n    //   it does, sentTransaction MUST be overridden.\n    abstract signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string>;\n\n    // Returns a new instance of the Signer, connected to provider.\n    // This MAY throw if changing providers is not supported.\n    abstract connect(provider: Provider): Signer;\n\n    readonly _isSigner: boolean;\n\n\n    ///////////////////\n    // Sub-classes MUST call super\n    constructor() {\n        logger.checkAbstract(new.target, Signer);\n        defineReadOnly(this, \"_isSigner\", true);\n    }\n\n\n    ///////////////////\n    // Sub-classes MAY override these\n\n    async getBalance(blockTag?: BlockTag): Promise<BigNumber> {\n        this._checkProvider(\"getBalance\");\n        return await this.provider.getBalance(this.getAddress(), blockTag);\n    }\n\n    async getTransactionCount(blockTag?: BlockTag): Promise<number> {\n        this._checkProvider(\"getTransactionCount\");\n        return await this.provider.getTransactionCount(this.getAddress(), blockTag);\n    }\n\n    // Populates \"from\" if unspecified, and estimates the gas for the transaction\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        this._checkProvider(\"estimateGas\");\n        const tx = await resolveProperties(this.checkTransaction(transaction));\n        return await this.provider.estimateGas(tx);\n    }\n\n    // Populates \"from\" if unspecified, and calls with the transaction\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag): Promise<string> {\n        this._checkProvider(\"call\");\n        const tx = await resolveProperties(this.checkTransaction(transaction));\n        return await this.provider.call(tx, blockTag);\n    }\n\n    // Populates all fields in a transaction, signs it and sends it to the network\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        this._checkProvider(\"sendTransaction\");\n        const tx = await this.populateTransaction(transaction);\n        const signedTx = await this.signTransaction(tx);\n        return await this.provider.sendTransaction(signedTx);\n    }\n\n    async getChainId(): Promise<number> {\n        this._checkProvider(\"getChainId\");\n        const network = await this.provider.getNetwork();\n        return network.chainId;\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        this._checkProvider(\"getGasPrice\");\n        return await this.provider.getGasPrice();\n    }\n\n    async getFeeData(): Promise<FeeData> {\n        this._checkProvider(\"getFeeData\");\n        return await this.provider.getFeeData();\n    }\n\n\n    async resolveName(name: string): Promise<string> {\n        this._checkProvider(\"resolveName\");\n        return await this.provider.resolveName(name);\n    }\n\n\n\n    // Checks a transaction does not contain invalid keys and if\n    // no \"from\" is provided, populates it.\n    // - does NOT require a provider\n    // - adds \"from\" is not present\n    // - returns a COPY (safe to mutate the result)\n    // By default called from: (overriding these prevents it)\n    //   - call\n    //   - estimateGas\n    //   - populateTransaction (and therefor sendTransaction)\n    checkTransaction(transaction: Deferrable<TransactionRequest>): Deferrable<TransactionRequest> {\n        for (const key in transaction) {\n            if (allowedTransactionKeys.indexOf(key) === -1) {\n                logger.throwArgumentError(\"invalid transaction key: \" + key, \"transaction\", transaction);\n            }\n        }\n\n        const tx = shallowCopy(transaction);\n\n        if (tx.from == null) {\n            tx.from = this.getAddress();\n\n        } else {\n            // Make sure any provided address matches this signer\n            tx.from = Promise.all([\n                Promise.resolve(tx.from),\n                this.getAddress()\n            ]).then((result) => {\n                if (result[0].toLowerCase() !== result[1].toLowerCase()) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n                return result[0];\n            });\n        }\n\n        return tx;\n    }\n\n    // Populates ALL keys for a transaction and checks that \"from\" matches\n    // this Signer. Should be used by sendTransaction but NOT by signTransaction.\n    // By default called from: (overriding these prevents it)\n    //   - sendTransaction\n    //\n    // Notes:\n    //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas\n    async populateTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionRequest> {\n\n        const tx: Deferrable<TransactionRequest> = await resolveProperties(this.checkTransaction(transaction))\n\n        if (tx.to != null) {\n            tx.to = Promise.resolve(tx.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n\n            // Prevent this error from causing an UnhandledPromiseException\n            tx.to.catch((error) => {  });\n        }\n\n        // Do not allow mixing pre-eip-1559 and eip-1559 properties\n        const hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);\n        if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {\n            logger.throwArgumentError(\"eip-1559 transaction do not support gasPrice\", \"transaction\", transaction);\n        } else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {\n            logger.throwArgumentError(\"pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas\", \"transaction\", transaction);\n        }\n\n        if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {\n            // Fully-formed EIP-1559 transaction (skip getFeeData)\n            tx.type = 2;\n\n        } else if (tx.type === 0 || tx.type === 1) {\n            // Explicit Legacy or EIP-2930 transaction\n\n            // Populate missing gasPrice\n            if (tx.gasPrice == null) { tx.gasPrice = this.getGasPrice(); }\n\n        } else {\n\n            // We need to get fee data to determine things\n            const feeData = await this.getFeeData();\n\n            if (tx.type == null) {\n                // We need to auto-detect the intended type of this transaction...\n\n                if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {\n                    // The network supports EIP-1559!\n\n                    // Upgrade transaction from null to eip-1559\n                    tx.type = 2;\n\n                    if (tx.gasPrice != null) {\n                        // Using legacy gasPrice property on an eip-1559 network,\n                        // so use gasPrice as both fee properties\n                        const gasPrice = tx.gasPrice;\n                        delete tx.gasPrice;\n                        tx.maxFeePerGas = gasPrice;\n                        tx.maxPriorityFeePerGas = gasPrice;\n\n                    } else {\n                        // Populate missing fee data\n                        if (tx.maxFeePerGas == null) { tx.maxFeePerGas = feeData.maxFeePerGas; }\n                        if (tx.maxPriorityFeePerGas == null) { tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas; }\n                    }\n\n                } else if (feeData.gasPrice != null) {\n                    // Network doesn't support EIP-1559...\n\n                    // ...but they are trying to use EIP-1559 properties\n                    if (hasEip1559) {\n                        logger.throwError(\"network does not support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                            operation: \"populateTransaction\"\n                        });\n                    }\n\n                    // Populate missing fee data\n                    if (tx.gasPrice == null) { tx.gasPrice = feeData.gasPrice; }\n\n                    // Explicitly set untyped transaction to legacy\n                    tx.type = 0;\n\n                } else {\n                    // getFeeData has failed us.\n                    logger.throwError(\"failed to get consistent fee data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        operation: \"signer.getFeeData\"\n                    });\n                }\n\n            } else if (tx.type === 2) {\n                // Explicitly using EIP-1559\n\n                // Populate missing fee data\n                if (tx.maxFeePerGas == null) { tx.maxFeePerGas = feeData.maxFeePerGas; }\n                if (tx.maxPriorityFeePerGas == null) { tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas; }\n            }\n        }\n\n        if (tx.nonce == null) { tx.nonce = this.getTransactionCount(\"pending\"); }\n\n        if (tx.gasLimit == null) {\n            tx.gasLimit = this.estimateGas(tx).catch((error) => {\n                if (forwardErrors.indexOf(error.code) >= 0) {\n                    throw error;\n                }\n\n                return logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                    error: error,\n                    tx: tx\n                });\n            });\n        }\n\n        if (tx.chainId == null) {\n            tx.chainId = this.getChainId();\n        } else {\n            tx.chainId = Promise.all([\n                Promise.resolve(tx.chainId),\n                this.getChainId()\n            ]).then((results) => {\n                if (results[1] !== 0 && results[0] !== results[1]) {\n                    logger.throwArgumentError(\"chainId address mismatch\", \"transaction\", transaction);\n                }\n                return results[0];\n            });\n        }\n\n        return await resolveProperties(tx);\n    }\n\n\n    ///////////////////\n    // Sub-classes SHOULD leave these alone\n\n    _checkProvider(operation?: string): void {\n        if (!this.provider) { logger.throwError(\"missing provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: (operation || \"_checkProvider\") });\n        }\n    }\n\n    static isSigner(value: any): value is Signer {\n        return !!(value && value._isSigner);\n    }\n}\n\nexport class VoidSigner extends Signer implements TypedDataSigner {\n    readonly address: string;\n\n    constructor(address: string, provider?: Provider) {\n        super();\n        defineReadOnly(this, \"address\", address);\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n\n    getAddress(): Promise<string> {\n        return Promise.resolve(this.address);\n    }\n\n    _fail(message: string, operation: string): Promise<any> {\n        return Promise.resolve().then(() => {\n            logger.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });\n        });\n    }\n\n    signMessage(message: Bytes | string): Promise<string> {\n        return this._fail(\"VoidSigner cannot sign messages\", \"signMessage\");\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return this._fail(\"VoidSigner cannot sign transactions\", \"signTransaction\");\n    }\n\n    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        return this._fail(\"VoidSigner cannot sign typed data\", \"signTypedData\");\n    }\n\n    connect(provider: Provider): VoidSigner {\n        return new VoidSigner(this.address, provider);\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}