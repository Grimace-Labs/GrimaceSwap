{"ast":null,"code":"\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\nimport { Coder } from \"./abstract-coder\";\nexport class NumberCoder extends Coder {\n  constructor(size, signed, localName) {\n    const name = (signed ? \"int\" : \"uint\") + size * 8;\n    super(name, name, localName, false);\n    this.size = size;\n    this.signed = signed;\n  }\n  defaultValue() {\n    return 0;\n  }\n  encode(writer, value) {\n    let v = BigNumber.from(value);\n    // Check bounds are safe for encoding\n    let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n    if (this.signed) {\n      let bounds = maxUintValue.mask(this.size * 8 - 1);\n      if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n        this._throwError(\"value out-of-bounds\", value);\n      }\n    } else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n      this._throwError(\"value out-of-bounds\", value);\n    }\n    v = v.toTwos(this.size * 8).mask(this.size * 8);\n    if (this.signed) {\n      v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n    }\n    return writer.writeValue(v);\n  }\n  decode(reader) {\n    let value = reader.readValue().mask(this.size * 8);\n    if (this.signed) {\n      value = value.fromTwos(this.size * 8);\n    }\n    return reader.coerce(this.name, value);\n  }\n}","map":{"version":3,"names":["BigNumber","MaxUint256","NegativeOne","One","Zero","Coder","NumberCoder","constructor","size","signed","localName","name","defaultValue","encode","writer","value","v","from","maxUintValue","mask","wordSize","bounds","gt","lt","add","mul","_throwError","toTwos","fromTwos","writeValue","decode","reader","readValue","coerce"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\ethers\\node_modules\\@ethersproject\\abi\\src.ts\\coders\\number.ts"],"sourcesContent":["\"use strict\";\n\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { MaxUint256, NegativeOne, One, Zero } from \"@ethersproject/constants\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class NumberCoder extends Coder {\n    readonly size: number;\n    readonly signed: boolean;\n\n    constructor(size: number, signed: boolean, localName: string) {\n        const name = ((signed ? \"int\": \"uint\") + (size * 8));\n        super(name, name, localName, false);\n\n        this.size = size;\n        this.signed = signed;\n    }\n\n    defaultValue(): number {\n        return 0;\n    }\n\n    encode(writer: Writer, value: BigNumberish): number {\n        let v = BigNumber.from(value);\n\n        // Check bounds are safe for encoding\n        let maxUintValue = MaxUint256.mask(writer.wordSize * 8);\n        if (this.signed) {\n            let bounds = maxUintValue.mask(this.size * 8 - 1);\n            if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne))) {\n                this._throwError(\"value out-of-bounds\", value);\n            }\n        } else if (v.lt(Zero) || v.gt(maxUintValue.mask(this.size * 8))) {\n            this._throwError(\"value out-of-bounds\", value);\n        }\n\n        v = v.toTwos(this.size * 8).mask(this.size * 8);\n\n        if (this.signed) {\n            v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);\n        }\n\n        return writer.writeValue(v);\n    }\n\n    decode(reader: Reader): any {\n        let value = reader.readValue().mask(this.size * 8);\n\n        if (this.signed) {\n            value = value.fromTwos(this.size * 8);\n        }\n\n        return reader.coerce(this.name, value);\n    }\n}\n\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,SAAS,QAAsB,0BAA0B;AAClE,SAASC,UAAU,EAAEC,WAAW,EAAEC,GAAG,EAAEC,IAAI,QAAQ,0BAA0B;AAE7E,SAASC,KAAK,QAAwB,kBAAkB;AAExD,OAAM,MAAOC,WAAY,SAAQD,KAAK;EAIlCE,YAAYC,IAAY,EAAEC,MAAe,EAAEC,SAAiB;IACxD,MAAMC,IAAI,GAAI,CAACF,MAAM,GAAG,KAAK,GAAE,MAAM,IAAKD,IAAI,GAAG,CAAG;IACpD,KAAK,CAACG,IAAI,EAAEA,IAAI,EAAED,SAAS,EAAE,KAAK,CAAC;IAEnC,IAAI,CAACF,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACxB;EAEAG,YAAYA,CAAA;IACR,OAAO,CAAC;EACZ;EAEAC,MAAMA,CAACC,MAAc,EAAEC,KAAmB;IACtC,IAAIC,CAAC,GAAGhB,SAAS,CAACiB,IAAI,CAACF,KAAK,CAAC;IAE7B;IACA,IAAIG,YAAY,GAAGjB,UAAU,CAACkB,IAAI,CAACL,MAAM,CAACM,QAAQ,GAAG,CAAC,CAAC;IACvD,IAAI,IAAI,CAACX,MAAM,EAAE;MACb,IAAIY,MAAM,GAAGH,YAAY,CAACC,IAAI,CAAC,IAAI,CAACX,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;MACjD,IAAIQ,CAAC,CAACM,EAAE,CAACD,MAAM,CAAC,IAAIL,CAAC,CAACO,EAAE,CAACF,MAAM,CAACG,GAAG,CAACrB,GAAG,CAAC,CAACsB,GAAG,CAACvB,WAAW,CAAC,CAAC,EAAE;QACxD,IAAI,CAACwB,WAAW,CAAC,qBAAqB,EAAEX,KAAK,CAAC;;KAErD,MAAM,IAAIC,CAAC,CAACO,EAAE,CAACnB,IAAI,CAAC,IAAIY,CAAC,CAACM,EAAE,CAACJ,YAAY,CAACC,IAAI,CAAC,IAAI,CAACX,IAAI,GAAG,CAAC,CAAC,CAAC,EAAE;MAC7D,IAAI,CAACkB,WAAW,CAAC,qBAAqB,EAAEX,KAAK,CAAC;;IAGlDC,CAAC,GAAGA,CAAC,CAACW,MAAM,CAAC,IAAI,CAACnB,IAAI,GAAG,CAAC,CAAC,CAACW,IAAI,CAAC,IAAI,CAACX,IAAI,GAAG,CAAC,CAAC;IAE/C,IAAI,IAAI,CAACC,MAAM,EAAE;MACbO,CAAC,GAAGA,CAAC,CAACY,QAAQ,CAAC,IAAI,CAACpB,IAAI,GAAG,CAAC,CAAC,CAACmB,MAAM,CAAC,CAAC,GAAGb,MAAM,CAACM,QAAQ,CAAC;;IAG7D,OAAON,MAAM,CAACe,UAAU,CAACb,CAAC,CAAC;EAC/B;EAEAc,MAAMA,CAACC,MAAc;IACjB,IAAIhB,KAAK,GAAGgB,MAAM,CAACC,SAAS,EAAE,CAACb,IAAI,CAAC,IAAI,CAACX,IAAI,GAAG,CAAC,CAAC;IAElD,IAAI,IAAI,CAACC,MAAM,EAAE;MACbM,KAAK,GAAGA,KAAK,CAACa,QAAQ,CAAC,IAAI,CAACpB,IAAI,GAAG,CAAC,CAAC;;IAGzC,OAAOuB,MAAM,CAACE,MAAM,CAAC,IAAI,CAACtB,IAAI,EAAEI,KAAK,CAAC;EAC1C"},"metadata":{},"sourceType":"module","externalDependencies":[]}