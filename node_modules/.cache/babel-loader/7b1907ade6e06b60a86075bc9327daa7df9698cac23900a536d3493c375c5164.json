{"ast":null,"code":"\"use strict\";\n\nimport _createClass from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getAddress as _getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport { checkResultErrors };\nexport var LogDescription = /*#__PURE__*/function (_Description) {\n  _inherits(LogDescription, _Description);\n  var _super = _createSuper(LogDescription);\n  function LogDescription() {\n    _classCallCheck(this, LogDescription);\n    return _super.apply(this, arguments);\n  }\n  return _createClass(LogDescription);\n}(Description);\nexport var TransactionDescription = /*#__PURE__*/function (_Description2) {\n  _inherits(TransactionDescription, _Description2);\n  var _super2 = _createSuper(TransactionDescription);\n  function TransactionDescription() {\n    _classCallCheck(this, TransactionDescription);\n    return _super2.apply(this, arguments);\n  }\n  return _createClass(TransactionDescription);\n}(Description);\nexport var ErrorDescription = /*#__PURE__*/function (_Description3) {\n  _inherits(ErrorDescription, _Description3);\n  var _super3 = _createSuper(ErrorDescription);\n  function ErrorDescription() {\n    _classCallCheck(this, ErrorDescription);\n    return _super3.apply(this, arguments);\n  }\n  return _createClass(ErrorDescription);\n}(Description);\nexport var Indexed = /*#__PURE__*/function (_Description4) {\n  _inherits(Indexed, _Description4);\n  var _super4 = _createSuper(Indexed);\n  function Indexed() {\n    _classCallCheck(this, Indexed);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(Indexed, null, [{\n    key: \"isIndexed\",\n    value: function isIndexed(value) {\n      return !!(value && value._isIndexed);\n    }\n  }]);\n  return Indexed;\n}(Description);\nvar BuiltinErrors = {\n  \"0x08c379a0\": {\n    signature: \"Error(string)\",\n    name: \"Error\",\n    inputs: [\"string\"],\n    reason: true\n  },\n  \"0x4e487b71\": {\n    signature: \"Panic(uint256)\",\n    name: \"Panic\",\n    inputs: [\"uint256\"]\n  }\n};\nfunction wrapAccessError(property, error) {\n  var wrap = new Error(\"deferred error during ABI decoding triggered accessing \".concat(property));\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport var Interface = /*#__PURE__*/function () {\n  function Interface(fragments) {\n    var _this = this;\n    _classCallCheck(this, Interface);\n    var abi = [];\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n    defineReadOnly(this, \"fragments\", abi.map(function (fragment) {\n      return Fragment.from(fragment);\n    }).filter(function (fragment) {\n      return fragment != null;\n    }));\n    defineReadOnly(this, \"_abiCoder\", getStatic(this instanceof Interface ? this.constructor : void 0, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {});\n    // Add all fragments by their signature\n    this.fragments.forEach(function (fragment) {\n      var bucket = null;\n      switch (fragment.type) {\n        case \"constructor\":\n          if (_this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          }\n          //checkNames(fragment, \"input\", fragment.inputs);\n          defineReadOnly(_this, \"deploy\", fragment);\n          return;\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = _this.functions;\n          break;\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = _this.events;\n          break;\n        case \"error\":\n          bucket = _this.errors;\n          break;\n        default:\n          return;\n      }\n      var signature = fragment.format();\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n      bucket[signature] = fragment;\n    });\n    // If we do not have a constructor add a default\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n  _createClass(Interface, [{\n    key: \"format\",\n    value: function format(_format) {\n      if (!_format) {\n        _format = FormatTypes.full;\n      }\n      if (_format === FormatTypes.sighash) {\n        logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", _format);\n      }\n      var abi = this.fragments.map(function (fragment) {\n        return fragment.format(_format);\n      });\n      // We need to re-bundle the JSON fragments a bit\n      if (_format === FormatTypes.json) {\n        return JSON.stringify(abi.map(function (j) {\n          return JSON.parse(j);\n        }));\n      }\n      return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n  }, {\n    key: \"getFunction\",\n    value:\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    function getFunction(nameOrSignatureOrSighash) {\n      if (isHexString(nameOrSignatureOrSighash)) {\n        for (var name in this.functions) {\n          if (nameOrSignatureOrSighash === this.getSighash(name)) {\n            return this.functions[name];\n          }\n        }\n        logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n      }\n      // It is a bare name, look up the function (will return null if ambiguous)\n      if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n        var _name = nameOrSignatureOrSighash.trim();\n        var matching = Object.keys(this.functions).filter(function (f) {\n          return f.split(\"(\" /* fix:) */)[0] === _name;\n        });\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching function\", \"name\", _name);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching functions\", \"name\", _name);\n        }\n        return this.functions[matching[0]];\n      }\n      // Normalize the signature and lookup the function\n      var result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n      if (!result) {\n        logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n      }\n      return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n  }, {\n    key: \"getEvent\",\n    value: function getEvent(nameOrSignatureOrTopic) {\n      if (isHexString(nameOrSignatureOrTopic)) {\n        var topichash = nameOrSignatureOrTopic.toLowerCase();\n        for (var name in this.events) {\n          if (topichash === this.getEventTopic(name)) {\n            return this.events[name];\n          }\n        }\n        logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n      }\n      // It is a bare name, look up the function (will return null if ambiguous)\n      if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n        var _name2 = nameOrSignatureOrTopic.trim();\n        var matching = Object.keys(this.events).filter(function (f) {\n          return f.split(\"(\" /* fix:) */)[0] === _name2;\n        });\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching event\", \"name\", _name2);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching events\", \"name\", _name2);\n        }\n        return this.events[matching[0]];\n      }\n      // Normalize the signature and lookup the function\n      var result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n      if (!result) {\n        logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n      }\n      return result;\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n  }, {\n    key: \"getError\",\n    value: function getError(nameOrSignatureOrSighash) {\n      if (isHexString(nameOrSignatureOrSighash)) {\n        var getSighash = getStatic(this.constructor, \"getSighash\");\n        for (var name in this.errors) {\n          var error = this.errors[name];\n          if (nameOrSignatureOrSighash === getSighash(error)) {\n            return this.errors[name];\n          }\n        }\n        logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n      }\n      // It is a bare name, look up the function (will return null if ambiguous)\n      if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n        var _name3 = nameOrSignatureOrSighash.trim();\n        var matching = Object.keys(this.errors).filter(function (f) {\n          return f.split(\"(\" /* fix:) */)[0] === _name3;\n        });\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching error\", \"name\", _name3);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching errors\", \"name\", _name3);\n        }\n        return this.errors[matching[0]];\n      }\n      // Normalize the signature and lookup the function\n      var result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n      if (!result) {\n        logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n      }\n      return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n  }, {\n    key: \"getSighash\",\n    value: function getSighash(fragment) {\n      if (typeof fragment === \"string\") {\n        try {\n          fragment = this.getFunction(fragment);\n        } catch (error) {\n          try {\n            fragment = this.getError(fragment);\n          } catch (_) {\n            throw error;\n          }\n        }\n      }\n      return getStatic(this.constructor, \"getSighash\")(fragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n  }, {\n    key: \"getEventTopic\",\n    value: function getEventTopic(eventFragment) {\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n      return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n  }, {\n    key: \"_decodeParams\",\n    value: function _decodeParams(params, data) {\n      return this._abiCoder.decode(params, data);\n    }\n  }, {\n    key: \"_encodeParams\",\n    value: function _encodeParams(params, values) {\n      return this._abiCoder.encode(params, values);\n    }\n  }, {\n    key: \"encodeDeploy\",\n    value: function encodeDeploy(values) {\n      return this._encodeParams(this.deploy.inputs, values || []);\n    }\n  }, {\n    key: \"decodeErrorResult\",\n    value: function decodeErrorResult(fragment, data) {\n      if (typeof fragment === \"string\") {\n        fragment = this.getError(fragment);\n      }\n      var bytes = arrayify(data);\n      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n        logger.throwArgumentError(\"data signature does not match error \".concat(fragment.name, \".\"), \"data\", hexlify(bytes));\n      }\n      return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n  }, {\n    key: \"encodeErrorResult\",\n    value: function encodeErrorResult(fragment, values) {\n      if (typeof fragment === \"string\") {\n        fragment = this.getError(fragment);\n      }\n      return hexlify(concat([this.getSighash(fragment), this._encodeParams(fragment.inputs, values || [])]));\n    }\n    // Decode the data for a function call (e.g. tx.data)\n  }, {\n    key: \"decodeFunctionData\",\n    value: function decodeFunctionData(functionFragment, data) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      var bytes = arrayify(data);\n      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n        logger.throwArgumentError(\"data signature does not match function \".concat(functionFragment.name, \".\"), \"data\", hexlify(bytes));\n      }\n      return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n  }, {\n    key: \"encodeFunctionData\",\n    value: function encodeFunctionData(functionFragment, values) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n  }, {\n    key: \"decodeFunctionResult\",\n    value: function decodeFunctionResult(functionFragment, data) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      var bytes = arrayify(data);\n      var reason = null;\n      var message = \"\";\n      var errorArgs = null;\n      var errorName = null;\n      var errorSignature = null;\n      switch (bytes.length % this._abiCoder._getWordSize()) {\n        case 0:\n          try {\n            return this._abiCoder.decode(functionFragment.outputs, bytes);\n          } catch (error) {}\n          break;\n        case 4:\n          {\n            var selector = hexlify(bytes.slice(0, 4));\n            var builtin = BuiltinErrors[selector];\n            if (builtin) {\n              errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n              errorName = builtin.name;\n              errorSignature = builtin.signature;\n              if (builtin.reason) {\n                reason = errorArgs[0];\n              }\n              if (errorName === \"Error\") {\n                message = \"; VM Exception while processing transaction: reverted with reason string \".concat(JSON.stringify(errorArgs[0]));\n              } else if (errorName === \"Panic\") {\n                message = \"; VM Exception while processing transaction: reverted with panic code \".concat(errorArgs[0]);\n              }\n            } else {\n              try {\n                var error = this.getError(selector);\n                errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                errorName = error.name;\n                errorSignature = error.format();\n              } catch (error) {}\n            }\n            break;\n          }\n      }\n      return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n        method: functionFragment.format(),\n        data: hexlify(data),\n        errorArgs: errorArgs,\n        errorName: errorName,\n        errorSignature: errorSignature,\n        reason: reason\n      });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n  }, {\n    key: \"encodeFunctionResult\",\n    value: function encodeFunctionResult(functionFragment, values) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n      return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n  }, {\n    key: \"encodeFilterTopics\",\n    value: function encodeFilterTopics(eventFragment, values) {\n      var _this2 = this;\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n      if (values.length > eventFragment.inputs.length) {\n        logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n          argument: \"values\",\n          value: values\n        });\n      }\n      var topics = [];\n      if (!eventFragment.anonymous) {\n        topics.push(this.getEventTopic(eventFragment));\n      }\n      var encodeTopic = function encodeTopic(param, value) {\n        if (param.type === \"string\") {\n          return id(value);\n        } else if (param.type === \"bytes\") {\n          return keccak256(hexlify(value));\n        }\n        if (param.type === \"bool\" && typeof value === \"boolean\") {\n          value = value ? \"0x01\" : \"0x00\";\n        }\n        if (param.type.match(/^u?int/)) {\n          value = BigNumber.from(value).toHexString();\n        }\n        // Check addresses are valid\n        if (param.type === \"address\") {\n          _this2._abiCoder.encode([\"address\"], [value]);\n        }\n        return hexZeroPad(hexlify(value), 32);\n      };\n      values.forEach(function (value, index) {\n        var param = eventFragment.inputs[index];\n        if (!param.indexed) {\n          if (value != null) {\n            logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n          }\n          return;\n        }\n        if (value == null) {\n          topics.push(null);\n        } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n          logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n        } else if (Array.isArray(value)) {\n          topics.push(value.map(function (value) {\n            return encodeTopic(param, value);\n          }));\n        } else {\n          topics.push(encodeTopic(param, value));\n        }\n      });\n      // Trim off trailing nulls\n      while (topics.length && topics[topics.length - 1] === null) {\n        topics.pop();\n      }\n      return topics;\n    }\n  }, {\n    key: \"encodeEventLog\",\n    value: function encodeEventLog(eventFragment, values) {\n      var _this3 = this;\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n      var topics = [];\n      var dataTypes = [];\n      var dataValues = [];\n      if (!eventFragment.anonymous) {\n        topics.push(this.getEventTopic(eventFragment));\n      }\n      if (values.length !== eventFragment.inputs.length) {\n        logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n      }\n      eventFragment.inputs.forEach(function (param, index) {\n        var value = values[index];\n        if (param.indexed) {\n          if (param.type === \"string\") {\n            topics.push(id(value));\n          } else if (param.type === \"bytes\") {\n            topics.push(keccak256(value));\n          } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n            // @TODO\n            throw new Error(\"not implemented\");\n          } else {\n            topics.push(_this3._abiCoder.encode([param.type], [value]));\n          }\n        } else {\n          dataTypes.push(param);\n          dataValues.push(value);\n        }\n      });\n      return {\n        data: this._abiCoder.encode(dataTypes, dataValues),\n        topics: topics\n      };\n    }\n    // Decode a filter for the event and the search criteria\n  }, {\n    key: \"decodeEventLog\",\n    value: function decodeEventLog(eventFragment, data, topics) {\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n      if (topics != null && !eventFragment.anonymous) {\n        var topicHash = this.getEventTopic(eventFragment);\n        if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n          logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"topics[0]\",\n            expected: topicHash,\n            value: topics[0]\n          });\n        }\n        topics = topics.slice(1);\n      }\n      var indexed = [];\n      var nonIndexed = [];\n      var dynamic = [];\n      eventFragment.inputs.forEach(function (param, index) {\n        if (param.indexed) {\n          if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n            indexed.push(ParamType.fromObject({\n              type: \"bytes32\",\n              name: param.name\n            }));\n            dynamic.push(true);\n          } else {\n            indexed.push(param);\n            dynamic.push(false);\n          }\n        } else {\n          nonIndexed.push(param);\n          dynamic.push(false);\n        }\n      });\n      var resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n      var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n      var result = [];\n      var nonIndexedIndex = 0,\n        indexedIndex = 0;\n      eventFragment.inputs.forEach(function (param, index) {\n        if (param.indexed) {\n          if (resultIndexed == null) {\n            result[index] = new Indexed({\n              _isIndexed: true,\n              hash: null\n            });\n          } else if (dynamic[index]) {\n            result[index] = new Indexed({\n              _isIndexed: true,\n              hash: resultIndexed[indexedIndex++]\n            });\n          } else {\n            try {\n              result[index] = resultIndexed[indexedIndex++];\n            } catch (error) {\n              result[index] = error;\n            }\n          }\n        } else {\n          try {\n            result[index] = resultNonIndexed[nonIndexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        }\n        // Add the keyword argument if named and safe\n        if (param.name && result[param.name] == null) {\n          var value = result[index];\n          // Make error named values throw on access\n          if (value instanceof Error) {\n            Object.defineProperty(result, param.name, {\n              enumerable: true,\n              get: function get() {\n                throw wrapAccessError(\"property \".concat(JSON.stringify(param.name)), value);\n              }\n            });\n          } else {\n            result[param.name] = value;\n          }\n        }\n      });\n      // Make all error indexed values throw on access\n      var _loop = function _loop(i) {\n        var value = result[i];\n        if (value instanceof Error) {\n          Object.defineProperty(result, i, {\n            enumerable: true,\n            get: function get() {\n              throw wrapAccessError(\"index \".concat(i), value);\n            }\n          });\n        }\n      };\n      for (var i = 0; i < result.length; i++) {\n        _loop(i);\n      }\n      return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n  }, {\n    key: \"parseTransaction\",\n    value: function parseTransaction(tx) {\n      var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n      if (!fragment) {\n        return null;\n      }\n      return new TransactionDescription({\n        args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n        functionFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        sighash: this.getSighash(fragment),\n        value: BigNumber.from(tx.value || \"0\")\n      });\n    }\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n  }, {\n    key: \"parseLog\",\n    value: function parseLog(log) {\n      var fragment = this.getEvent(log.topics[0]);\n      if (!fragment || fragment.anonymous) {\n        return null;\n      }\n      // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n      //        Probably not, because just because it is the only event in the ABI does\n      //        not mean we have the full ABI; maybe just a fragment?\n      return new LogDescription({\n        eventFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        topic: this.getEventTopic(fragment),\n        args: this.decodeEventLog(fragment, log.data, log.topics)\n      });\n    }\n  }, {\n    key: \"parseError\",\n    value: function parseError(data) {\n      var hexData = hexlify(data);\n      var fragment = this.getError(hexData.substring(0, 10).toLowerCase());\n      if (!fragment) {\n        return null;\n      }\n      return new ErrorDescription({\n        args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n        errorFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        sighash: this.getSighash(fragment)\n      });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n  }], [{\n    key: \"getAbiCoder\",\n    value: function getAbiCoder() {\n      return defaultAbiCoder;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(address) {\n      return _getAddress(address);\n    }\n  }, {\n    key: \"getSighash\",\n    value: function getSighash(fragment) {\n      return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n  }, {\n    key: \"getEventTopic\",\n    value: function getEventTopic(eventFragment) {\n      return id(eventFragment.format());\n    }\n  }, {\n    key: \"isInterface\",\n    value: function isInterface(value) {\n      return !!(value && value._isInterface);\n    }\n  }]);\n  return Interface;\n}();","map":{"version":3,"names":["_createClass","_classCallCheck","_inherits","_createSuper","getAddress","BigNumber","arrayify","concat","hexDataSlice","hexlify","hexZeroPad","isHexString","id","keccak256","defineReadOnly","Description","getStatic","defaultAbiCoder","checkResultErrors","ConstructorFragment","EventFragment","FormatTypes","Fragment","FunctionFragment","ParamType","Logger","version","logger","LogDescription","_Description","_super","apply","arguments","TransactionDescription","_Description2","_super2","ErrorDescription","_Description3","_super3","Indexed","_Description4","_super4","key","value","isIndexed","_isIndexed","BuiltinErrors","signature","name","inputs","reason","wrapAccessError","property","error","wrap","Error","Interface","fragments","_this","abi","JSON","parse","map","fragment","from","filter","constructor","forEach","bucket","type","deploy","warn","functions","events","errors","format","payable","full","sighash","throwArgumentError","json","stringify","j","getFunction","nameOrSignatureOrSighash","getSighash","indexOf","trim","matching","Object","keys","f","split","length","result","fromString","getEvent","nameOrSignatureOrTopic","topichash","toLowerCase","getEventTopic","getError","_","eventFragment","_decodeParams","params","data","_abiCoder","decode","_encodeParams","values","encode","encodeDeploy","decodeErrorResult","bytes","slice","encodeErrorResult","decodeFunctionData","functionFragment","encodeFunctionData","decodeFunctionResult","message","errorArgs","errorName","errorSignature","_getWordSize","outputs","selector","builtin","throwError","CALL_EXCEPTION","method","encodeFunctionResult","encodeFilterTopics","_this2","UNEXPECTED_ARGUMENT","argument","topics","anonymous","push","encodeTopic","param","match","toHexString","index","indexed","baseType","Array","isArray","pop","encodeEventLog","_this3","dataTypes","dataValues","decodeEventLog","topicHash","INVALID_ARGUMENT","expected","nonIndexed","dynamic","fromObject","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","hash","defineProperty","enumerable","get","_loop","i","freeze","parseTransaction","tx","substring","args","parseLog","log","topic","parseError","hexData","errorFragment","getAbiCoder","address","isInterface","_isInterface"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\abi\\src.ts\\interface.ts"],"sourcesContent":["\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\"\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\n\nimport { AbiCoder, defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, ErrorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, JsonFragment, ParamType } from \"./fragments\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport { checkResultErrors, Result };\n\nexport class LogDescription extends Description<LogDescription> {\n    readonly eventFragment: EventFragment;\n    readonly name: string;\n    readonly signature: string;\n    readonly topic: string;\n    readonly args: Result\n}\n\nexport class TransactionDescription extends Description<TransactionDescription> {\n    readonly functionFragment: FunctionFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n    readonly value: BigNumber;\n}\n\nexport class ErrorDescription extends Description<ErrorDescription> {\n    readonly errorFragment: ErrorFragment;\n    readonly name: string;\n    readonly args: Result;\n    readonly signature: string;\n    readonly sighash: string;\n}\n\nexport class Indexed extends Description<Indexed> {\n    readonly hash: string;\n    readonly _isIndexed: boolean;\n\n    static isIndexed(value: any): value is Indexed {\n        return !!(value && value._isIndexed);\n    }\n}\n\nconst BuiltinErrors: Record<string, { signature: string, inputs: Array<string>, name: string, reason?: boolean }> = {\n    \"0x08c379a0\": { signature: \"Error(string)\", name: \"Error\", inputs: [ \"string\" ], reason: true },\n    \"0x4e487b71\": { signature: \"Panic(uint256)\", name: \"Panic\", inputs: [ \"uint256\" ] }\n}\n\nfunction wrapAccessError(property: string, error: Error): Error {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${ property }`);\n    (<any>wrap).error = error;\n    return wrap;\n}\n\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    readonly fragments: ReadonlyArray<Fragment>;\n\n    readonly errors: { [ name: string ]: ErrorFragment };\n    readonly events: { [ name: string ]: EventFragment };\n    readonly functions: { [ name: string ]: FunctionFragment };\n    readonly structs: { [ name: string ]: any };\n\n    readonly deploy: ConstructorFragment;\n\n    readonly _abiCoder: AbiCoder;\n\n    readonly _isInterface: boolean;\n\n    constructor(fragments: string | ReadonlyArray<Fragment | JsonFragment | string>) {\n        let abi: ReadonlyArray<Fragment | JsonFragment | string> = [ ];\n        if (typeof(fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n\n        defineReadOnly(this, \"_abiCoder\", getStatic<() => AbiCoder>(new.target, \"getAbiCoder\")());\n\n        defineReadOnly(this, \"functions\", { });\n        defineReadOnly(this, \"errors\", { });\n        defineReadOnly(this, \"events\", { });\n        defineReadOnly(this, \"structs\", { });\n\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket: { [ name: string ]: Fragment } = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", <ConstructorFragment>fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                case \"error\":\n                    bucket = this.errors;\n                    break;\n                default:\n                    return;\n            }\n\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n\n            bucket[signature] = fragment;\n        });\n\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n\n    format(format?: string): string | Array<string> {\n        if (!format) { format = FormatTypes.full; }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n             return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n\n        return abi;\n    }\n\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder(): AbiCoder {\n        return defaultAbiCoder;\n    }\n\n    static getAddress(address: string): string {\n        return getAddress(address);\n    }\n\n    static getSighash(fragment: ErrorFragment | FunctionFragment): string {\n        return hexDataSlice(id(fragment.format()), 0, 4);\n    }\n\n    static getEventTopic(eventFragment: EventFragment): string {\n        return id(eventFragment.format());\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash: string): FunctionFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n\n            return this.functions[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic: string): EventFragment {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n\n            return this.events[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getError(nameOrSignatureOrSighash: string): ErrorFragment {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            const getSighash = getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\");\n            for (const name in this.errors) {\n                const error = this.errors[name];\n                if (nameOrSignatureOrSighash === getSighash(error)) {\n                    return this.errors[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching error\", \"sighash\", nameOrSignatureOrSighash);\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.errors).filter((f) => (f.split(\"(\"/* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching error\", \"name\", name);\n            } else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching errors\", \"name\", name);\n            }\n\n            return this.errors[matching[0]];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching error\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(fragment: ErrorFragment | FunctionFragment | string): string {\n        if (typeof(fragment) === \"string\") {\n            try {\n                fragment = this.getFunction(fragment);\n            } catch (error) {\n                try {\n                    fragment = this.getError(<string>fragment);\n                } catch (_) {\n                    throw error;\n                }\n            }\n        }\n\n        return getStatic<(f: ErrorFragment | FunctionFragment) => string>(this.constructor, \"getSighash\")(fragment);\n    }\n\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment: EventFragment | string): string {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        return getStatic<(e: EventFragment) => string>(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n\n\n    _decodeParams(params: ReadonlyArray<ParamType>, data: BytesLike): Result {\n        return this._abiCoder.decode(params, data)\n    }\n\n    _encodeParams(params: ReadonlyArray<ParamType>, values: ReadonlyArray<any>): string {\n        return this._abiCoder.encode(params, values)\n    }\n\n    encodeDeploy(values?: ReadonlyArray<any>): string {\n        return this._encodeParams(this.deploy.inputs, values || [ ]);\n    }\n\n    decodeErrorResult(fragment: ErrorFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {\n            logger.throwArgumentError(`data signature does not match error ${ fragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(fragment.inputs, bytes.slice(4));\n    }\n\n    encodeErrorResult(fragment: ErrorFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            fragment = this.getError(fragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(fragment),\n            this._encodeParams(fragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        const bytes = arrayify(data);\n\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${ functionFragment.name }.`, \"data\", hexlify(bytes));\n        }\n\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [ ])\n        ]));\n    }\n\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        let bytes = arrayify(data);\n\n        let reason: string = null;\n        let message = \"\";\n        let errorArgs: Result = null;\n        let errorName: string = null;\n        let errorSignature: string = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                } catch (error) { }\n                break;\n\n            case 4: {\n                const selector = hexlify(bytes.slice(0, 4));\n                const builtin = BuiltinErrors[selector];\n                if (builtin) {\n                    errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));\n                    errorName = builtin.name;\n                    errorSignature = builtin.signature;\n                    if (builtin.reason) { reason = errorArgs[0]; }\n                    if (errorName === \"Error\") {\n                        message = `; VM Exception while processing transaction: reverted with reason string ${ JSON.stringify(errorArgs[0]) }`;\n                    } else if (errorName === \"Panic\") {\n                        message = `; VM Exception while processing transaction: reverted with panic code ${ errorArgs[0] }`;\n                    }\n                } else {\n                    try {\n                        const error = this.getError(selector);\n                        errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));\n                        errorName = error.name;\n                        errorSignature = error.format();\n                    } catch (error) { }\n                }\n                break;\n            }\n        }\n\n        return logger.throwError(\"call revert exception\" + message, Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            data: hexlify(data), errorArgs, errorName, errorSignature, reason\n        });\n    }\n\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || [ ]));\n    }\n\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment: EventFragment | string, values: ReadonlyArray<any>): Array<string | Array<string>> {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            })\n        }\n\n        let topics: Array<string | Array<string>> = [];\n        if (!eventFragment.anonymous) { topics.push(this.getEventTopic(eventFragment)); }\n\n        const encodeTopic = (param: ParamType, value: any): string => {\n            if (param.type === \"string\") {\n                 return id(value);\n            } else if (param.type === \"bytes\") {\n                 return keccak256(hexlify(value));\n            }\n\n            if (param.type === \"bool\" && typeof(value) === \"boolean\") {\n                value = (value ? \"0x01\": \"0x00\");\n            }\n\n            if (param.type.match(/^u?int/)) {\n                value = BigNumber.from(value).toHexString();\n            }\n\n            // Check addresses are valid\n            if (param.type === \"address\") { this._abiCoder.encode( [ \"address\" ], [ value ]); }\n            return hexZeroPad(hexlify(value), 32);\n        };\n\n        values.forEach((value, index) => {\n\n            let param = (<EventFragment>eventFragment).inputs[index];\n\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n\n        return topics;\n    }\n\n    encodeEventLog(eventFragment: EventFragment | string, values: ReadonlyArray<any>): { data: string, topics: Array<string> } {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        const topics: Array<string> = [ ];\n\n        const dataTypes: Array<ParamType> = [ ];\n        const dataValues: Array<string> = [ ];\n\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value))\n                } else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value))\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                } else {\n                    topics.push(this._abiCoder.encode([ param.type] , [ value ]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n\n        return {\n            data: this._abiCoder.encode(dataTypes , dataValues),\n            topics: topics\n        };\n    }\n\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment: EventFragment | string, data: BytesLike, topics?: ReadonlyArray<string>): Result {\n        if (typeof(eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n\n        let indexed: Array<ParamType> = [];\n        let nonIndexed: Array<ParamType> = [];\n        let dynamic: Array<boolean> = [];\n\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)): null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n        let result: (Array<any> & { [ key: string ]: any }) = [ ];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n\n                } else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n\n                } else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    } catch (error) {\n                        result[index] = error;\n                    }\n                }\n            } else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                } catch (error) {\n                    result[index] = error;\n                }\n            }\n\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        enumerable: true,\n                        get: () => { throw wrapAccessError(`property ${ JSON.stringify(param.name) }`, value); }\n                    });\n                } else {\n                    result[param.name] = value;\n                }\n            }\n        });\n\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    enumerable: true,\n                    get: () => { throw wrapAccessError(`index ${ i }`, value); }\n                });\n            }\n        }\n\n        return Object.freeze(result);\n    }\n\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx: { data: string, value?: BigNumberish }): TransactionDescription {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n\n    // @TODO\n    //parseCallResult(data: BytesLike): ??\n\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log: { topics: Array<string>, data: string}): LogDescription {\n        let fragment = this.getEvent(log.topics[0]);\n\n        if (!fragment || fragment.anonymous) { return null; }\n\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n\n\n       return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n\n    parseError(data: BytesLike): ErrorDescription {\n        const hexData = hexlify(data);\n        let fragment = this.getError(hexData.substring(0, 10).toLowerCase())\n\n        if (!fragment) { return null; }\n\n        return new ErrorDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + hexData.substring(10)),\n            errorFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n        });\n    }\n\n\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n\n    static isInterface(value: any): value is Interface {\n        return !!(value && value._isInterface);\n    }\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}