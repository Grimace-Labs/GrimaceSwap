{"ast":null,"code":"'use strict';\n\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';\n\n// pre-compute lookup table\nvar ALPHABET_MAP = {};\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z);\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous');\n  ALPHABET_MAP[x] = z;\n}\nfunction polymodStep(pre) {\n  var b = pre >> 25;\n  return (pre & 0x1FFFFFF) << 5 ^ -(b >> 0 & 1) & 0x3b6a57b2 ^ -(b >> 1 & 1) & 0x26508e6d ^ -(b >> 2 & 1) & 0x1ea119fa ^ -(b >> 3 & 1) & 0x3d4233dd ^ -(b >> 4 & 1) & 0x2a1462b3;\n}\nfunction prefixChk(prefix) {\n  var chk = 1;\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i);\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')';\n    chk = polymodStep(chk) ^ c >> 5;\n  }\n  chk = polymodStep(chk);\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i);\n    chk = polymodStep(chk) ^ v & 0x1f;\n  }\n  return chk;\n}\nfunction encode(prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90;\n  if (prefix.length + 7 + words.length > LIMIT) throw new TypeError('Exceeds length limit');\n  prefix = prefix.toLowerCase();\n\n  // determine chk mod\n  var chk = prefixChk(prefix);\n  if (typeof chk === 'string') throw new Error(chk);\n  var result = prefix + '1';\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i];\n    if (x >> 5 !== 0) throw new Error('Non 5-bit word');\n    chk = polymodStep(chk) ^ x;\n    result += ALPHABET.charAt(x);\n  }\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk);\n  }\n  chk ^= 1;\n  for (i = 0; i < 6; ++i) {\n    var v = chk >> (5 - i) * 5 & 0x1f;\n    result += ALPHABET.charAt(v);\n  }\n  return result;\n}\nfunction __decode(str, LIMIT) {\n  LIMIT = LIMIT || 90;\n  if (str.length < 8) return str + ' too short';\n  if (str.length > LIMIT) return 'Exceeds length limit';\n\n  // don't allow mixed case\n  var lowered = str.toLowerCase();\n  var uppered = str.toUpperCase();\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str;\n  str = lowered;\n  var split = str.lastIndexOf('1');\n  if (split === -1) return 'No separator character for ' + str;\n  if (split === 0) return 'Missing prefix for ' + str;\n  var prefix = str.slice(0, split);\n  var wordChars = str.slice(split + 1);\n  if (wordChars.length < 6) return 'Data too short';\n  var chk = prefixChk(prefix);\n  if (typeof chk === 'string') return chk;\n  var words = [];\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i);\n    var v = ALPHABET_MAP[c];\n    if (v === undefined) return 'Unknown character ' + c;\n    chk = polymodStep(chk) ^ v;\n\n    // not in the checksum?\n    if (i + 6 >= wordChars.length) continue;\n    words.push(v);\n  }\n  if (chk !== 1) return 'Invalid checksum for ' + str;\n  return {\n    prefix: prefix,\n    words: words\n  };\n}\nfunction decodeUnsafe() {\n  var res = __decode.apply(null, arguments);\n  if (typeof res === 'object') return res;\n}\nfunction decode(str) {\n  var res = __decode.apply(null, arguments);\n  if (typeof res === 'object') return res;\n  throw new Error(res);\n}\nfunction convert(data, inBits, outBits, pad) {\n  var value = 0;\n  var bits = 0;\n  var maxV = (1 << outBits) - 1;\n  var result = [];\n  for (var i = 0; i < data.length; ++i) {\n    value = value << inBits | data[i];\n    bits += inBits;\n    while (bits >= outBits) {\n      bits -= outBits;\n      result.push(value >> bits & maxV);\n    }\n  }\n  if (pad) {\n    if (bits > 0) {\n      result.push(value << outBits - bits & maxV);\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding';\n    if (value << outBits - bits & maxV) return 'Non-zero padding';\n  }\n  return result;\n}\nfunction toWordsUnsafe(bytes) {\n  var res = convert(bytes, 8, 5, true);\n  if (Array.isArray(res)) return res;\n}\nfunction toWords(bytes) {\n  var res = convert(bytes, 8, 5, true);\n  if (Array.isArray(res)) return res;\n  throw new Error(res);\n}\nfunction fromWordsUnsafe(words) {\n  var res = convert(words, 5, 8, false);\n  if (Array.isArray(res)) return res;\n}\nfunction fromWords(words) {\n  var res = convert(words, 5, 8, false);\n  if (Array.isArray(res)) return res;\n  throw new Error(res);\n}\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n};","map":{"version":3,"names":["ALPHABET","ALPHABET_MAP","z","length","x","charAt","undefined","TypeError","polymodStep","pre","b","prefixChk","prefix","chk","i","c","charCodeAt","v","encode","words","LIMIT","toLowerCase","Error","result","__decode","str","lowered","uppered","toUpperCase","split","lastIndexOf","slice","wordChars","push","decodeUnsafe","res","apply","arguments","decode","convert","data","inBits","outBits","pad","value","bits","maxV","toWordsUnsafe","bytes","Array","isArray","toWords","fromWordsUnsafe","fromWords","module","exports"],"sources":["D:/temki/grimace/GrimaceSwap/node_modules/bech32/index.js"],"sourcesContent":["'use strict'\nvar ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l'\n\n// pre-compute lookup table\nvar ALPHABET_MAP = {}\nfor (var z = 0; z < ALPHABET.length; z++) {\n  var x = ALPHABET.charAt(z)\n\n  if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n  ALPHABET_MAP[x] = z\n}\n\nfunction polymodStep (pre) {\n  var b = pre >> 25\n  return ((pre & 0x1FFFFFF) << 5) ^\n    (-((b >> 0) & 1) & 0x3b6a57b2) ^\n    (-((b >> 1) & 1) & 0x26508e6d) ^\n    (-((b >> 2) & 1) & 0x1ea119fa) ^\n    (-((b >> 3) & 1) & 0x3d4233dd) ^\n    (-((b >> 4) & 1) & 0x2a1462b3)\n}\n\nfunction prefixChk (prefix) {\n  var chk = 1\n  for (var i = 0; i < prefix.length; ++i) {\n    var c = prefix.charCodeAt(i)\n    if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'\n\n    chk = polymodStep(chk) ^ (c >> 5)\n  }\n  chk = polymodStep(chk)\n\n  for (i = 0; i < prefix.length; ++i) {\n    var v = prefix.charCodeAt(i)\n    chk = polymodStep(chk) ^ (v & 0x1f)\n  }\n  return chk\n}\n\nfunction encode (prefix, words, LIMIT) {\n  LIMIT = LIMIT || 90\n  if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')\n\n  prefix = prefix.toLowerCase()\n\n  // determine chk mod\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') throw new Error(chk)\n\n  var result = prefix + '1'\n  for (var i = 0; i < words.length; ++i) {\n    var x = words[i]\n    if ((x >> 5) !== 0) throw new Error('Non 5-bit word')\n\n    chk = polymodStep(chk) ^ x\n    result += ALPHABET.charAt(x)\n  }\n\n  for (i = 0; i < 6; ++i) {\n    chk = polymodStep(chk)\n  }\n  chk ^= 1\n\n  for (i = 0; i < 6; ++i) {\n    var v = (chk >> ((5 - i) * 5)) & 0x1f\n    result += ALPHABET.charAt(v)\n  }\n\n  return result\n}\n\nfunction __decode (str, LIMIT) {\n  LIMIT = LIMIT || 90\n  if (str.length < 8) return str + ' too short'\n  if (str.length > LIMIT) return 'Exceeds length limit'\n\n  // don't allow mixed case\n  var lowered = str.toLowerCase()\n  var uppered = str.toUpperCase()\n  if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str\n  str = lowered\n\n  var split = str.lastIndexOf('1')\n  if (split === -1) return 'No separator character for ' + str\n  if (split === 0) return 'Missing prefix for ' + str\n\n  var prefix = str.slice(0, split)\n  var wordChars = str.slice(split + 1)\n  if (wordChars.length < 6) return 'Data too short'\n\n  var chk = prefixChk(prefix)\n  if (typeof chk === 'string') return chk\n\n  var words = []\n  for (var i = 0; i < wordChars.length; ++i) {\n    var c = wordChars.charAt(i)\n    var v = ALPHABET_MAP[c]\n    if (v === undefined) return 'Unknown character ' + c\n    chk = polymodStep(chk) ^ v\n\n    // not in the checksum?\n    if (i + 6 >= wordChars.length) continue\n    words.push(v)\n  }\n\n  if (chk !== 1) return 'Invalid checksum for ' + str\n  return { prefix: prefix, words: words }\n}\n\nfunction decodeUnsafe () {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n}\n\nfunction decode (str) {\n  var res = __decode.apply(null, arguments)\n  if (typeof res === 'object') return res\n\n  throw new Error(res)\n}\n\nfunction convert (data, inBits, outBits, pad) {\n  var value = 0\n  var bits = 0\n  var maxV = (1 << outBits) - 1\n\n  var result = []\n  for (var i = 0; i < data.length; ++i) {\n    value = (value << inBits) | data[i]\n    bits += inBits\n\n    while (bits >= outBits) {\n      bits -= outBits\n      result.push((value >> bits) & maxV)\n    }\n  }\n\n  if (pad) {\n    if (bits > 0) {\n      result.push((value << (outBits - bits)) & maxV)\n    }\n  } else {\n    if (bits >= inBits) return 'Excess padding'\n    if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'\n  }\n\n  return result\n}\n\nfunction toWordsUnsafe (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n}\n\nfunction toWords (bytes) {\n  var res = convert(bytes, 8, 5, true)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nfunction fromWordsUnsafe (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n}\n\nfunction fromWords (words) {\n  var res = convert(words, 5, 8, false)\n  if (Array.isArray(res)) return res\n\n  throw new Error(res)\n}\n\nmodule.exports = {\n  decodeUnsafe: decodeUnsafe,\n  decode: decode,\n  encode: encode,\n  toWordsUnsafe: toWordsUnsafe,\n  toWords: toWords,\n  fromWordsUnsafe: fromWordsUnsafe,\n  fromWords: fromWords\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}