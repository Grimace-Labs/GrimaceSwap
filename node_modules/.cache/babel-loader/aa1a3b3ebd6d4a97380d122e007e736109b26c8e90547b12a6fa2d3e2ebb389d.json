{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { arrayify, concat, hexDataSlice, isHexString, joinSignature } from \"@ethersproject/bytes\";\nimport { hashMessage, _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction isAccount(value) {\n  return value != null && isHexString(value.privateKey, 32) && value.address != null;\n}\nfunction hasMnemonic(value) {\n  const mnemonic = value.mnemonic;\n  return mnemonic && mnemonic.phrase;\n}\nexport class Wallet extends Signer {\n  constructor(privateKey, provider) {\n    logger.checkNew(new.target, Wallet);\n    super();\n    if (isAccount(privateKey)) {\n      const signingKey = new SigningKey(privateKey.privateKey);\n      defineReadOnly(this, \"_signingKey\", () => signingKey);\n      defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n      if (this.address !== getAddress(privateKey.address)) {\n        logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n      }\n      if (hasMnemonic(privateKey)) {\n        const srcMnemonic = privateKey.mnemonic;\n        defineReadOnly(this, \"_mnemonic\", () => ({\n          phrase: srcMnemonic.phrase,\n          path: srcMnemonic.path || defaultPath,\n          locale: srcMnemonic.locale || \"en\"\n        }));\n        const mnemonic = this.mnemonic;\n        const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n        if (computeAddress(node.privateKey) !== this.address) {\n          logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n        }\n      } else {\n        defineReadOnly(this, \"_mnemonic\", () => null);\n      }\n    } else {\n      if (SigningKey.isSigningKey(privateKey)) {\n        /* istanbul ignore if */\n        if (privateKey.curve !== \"secp256k1\") {\n          logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n        }\n        defineReadOnly(this, \"_signingKey\", () => privateKey);\n      } else {\n        // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n        if (typeof privateKey === \"string\") {\n          if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n            privateKey = \"0x\" + privateKey;\n          }\n        }\n        const signingKey = new SigningKey(privateKey);\n        defineReadOnly(this, \"_signingKey\", () => signingKey);\n      }\n      defineReadOnly(this, \"_mnemonic\", () => null);\n      defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n    }\n    /* istanbul ignore if */\n    if (provider && !Provider.isProvider(provider)) {\n      logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n    }\n    defineReadOnly(this, \"provider\", provider || null);\n  }\n  get mnemonic() {\n    return this._mnemonic();\n  }\n  get privateKey() {\n    return this._signingKey().privateKey;\n  }\n  get publicKey() {\n    return this._signingKey().publicKey;\n  }\n  getAddress() {\n    return Promise.resolve(this.address);\n  }\n  connect(provider) {\n    return new Wallet(this, provider);\n  }\n  signTransaction(transaction) {\n    return resolveProperties(transaction).then(tx => {\n      if (tx.from != null) {\n        if (getAddress(tx.from) !== this.address) {\n          logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n        }\n        delete tx.from;\n      }\n      const signature = this._signingKey().signDigest(keccak256(serialize(tx)));\n      return serialize(tx, signature);\n    });\n  }\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return joinSignature(this._signingKey().signDigest(hashMessage(message)));\n    });\n  }\n  _signTypedData(domain, types, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Populate any ENS names\n      const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, name => {\n        if (this.provider == null) {\n          logger.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resolveName\",\n            value: name\n          });\n        }\n        return this.provider.resolveName(name);\n      });\n      return joinSignature(this._signingKey().signDigest(_TypedDataEncoder.hash(populated.domain, types, populated.value)));\n    });\n  }\n  encrypt(password, options, progressCallback) {\n    if (typeof options === \"function\" && !progressCallback) {\n      progressCallback = options;\n      options = {};\n    }\n    if (progressCallback && typeof progressCallback !== \"function\") {\n      throw new Error(\"invalid callback\");\n    }\n    if (!options) {\n      options = {};\n    }\n    return encryptKeystore(this, password, options, progressCallback);\n  }\n  /**\n   *  Static methods to create Wallet instances.\n   */\n  static createRandom(options) {\n    let entropy = randomBytes(16);\n    if (!options) {\n      options = {};\n    }\n    if (options.extraEntropy) {\n      entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));\n    }\n    const mnemonic = entropyToMnemonic(entropy, options.locale);\n    return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n  }\n  static fromEncryptedJson(json, password, progressCallback) {\n    return decryptJsonWallet(json, password, progressCallback).then(account => {\n      return new Wallet(account);\n    });\n  }\n  static fromEncryptedJsonSync(json, password) {\n    return new Wallet(decryptJsonWalletSync(json, password));\n  }\n  static fromMnemonic(mnemonic, path, wordlist) {\n    if (!path) {\n      path = defaultPath;\n    }\n    return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n  }\n}\nexport function verifyMessage(message, signature) {\n  return recoverAddress(hashMessage(message), signature);\n}\nexport function verifyTypedData(domain, types, value, signature) {\n  return recoverAddress(_TypedDataEncoder.hash(domain, types, value), signature);\n}","map":{"version":3,"names":["getAddress","Provider","Signer","arrayify","concat","hexDataSlice","isHexString","joinSignature","hashMessage","_TypedDataEncoder","defaultPath","HDNode","entropyToMnemonic","keccak256","defineReadOnly","resolveProperties","randomBytes","SigningKey","decryptJsonWallet","decryptJsonWalletSync","encryptKeystore","computeAddress","recoverAddress","serialize","Logger","version","logger","isAccount","value","privateKey","address","hasMnemonic","mnemonic","phrase","Wallet","constructor","provider","checkNew","new","target","signingKey","publicKey","throwArgumentError","srcMnemonic","path","locale","node","fromMnemonic","derivePath","isSigningKey","curve","match","length","isProvider","_mnemonic","_signingKey","Promise","resolve","connect","signTransaction","transaction","then","tx","from","signature","signDigest","signMessage","message","_signTypedData","domain","types","populated","resolveNames","name","throwError","errors","UNSUPPORTED_OPERATION","operation","resolveName","hash","encrypt","password","options","progressCallback","Error","createRandom","entropy","extraEntropy","fromEncryptedJson","json","account","fromEncryptedJsonSync","wordlist","verifyMessage","verifyTypedData"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\wallet\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { Provider, TransactionRequest } from \"@ethersproject/abstract-provider\";\nimport { ExternallyOwnedAccount, Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { arrayify, Bytes, BytesLike, concat, hexDataSlice, isHexString, joinSignature, SignatureLike } from \"@ethersproject/bytes\";\nimport { hashMessage, _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { defaultPath, HDNode, entropyToMnemonic, Mnemonic } from \"@ethersproject/hdnode\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, resolveProperties } from \"@ethersproject/properties\";\nimport { randomBytes } from \"@ethersproject/random\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { decryptJsonWallet, decryptJsonWalletSync, encryptKeystore, ProgressCallback } from \"@ethersproject/json-wallets\";\nimport { computeAddress, recoverAddress, serialize, UnsignedTransaction } from \"@ethersproject/transactions\";\nimport { Wordlist } from \"@ethersproject/wordlists\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction isAccount(value: any): value is ExternallyOwnedAccount {\n    return (value != null && isHexString(value.privateKey, 32) && value.address != null);\n}\n\nfunction hasMnemonic(value: any): value is { mnemonic: Mnemonic } {\n    const mnemonic = value.mnemonic;\n    return (mnemonic && mnemonic.phrase);\n}\n\nexport class Wallet extends Signer implements ExternallyOwnedAccount, TypedDataSigner {\n\n    readonly address: string;\n    readonly provider: Provider;\n\n    // Wrapping the _signingKey and _mnemonic in a getter function prevents\n    // leaking the private key in console.log; still, be careful! :)\n    readonly _signingKey: () => SigningKey;\n    readonly _mnemonic: () => Mnemonic;\n\n    constructor(privateKey: BytesLike | ExternallyOwnedAccount | SigningKey, provider?: Provider) {\n        logger.checkNew(new.target, Wallet);\n\n        super();\n\n        if (isAccount(privateKey)) {\n            const signingKey = new SigningKey(privateKey.privateKey);\n            defineReadOnly(this, \"_signingKey\", () => signingKey);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n\n            if (this.address !== getAddress(privateKey.address)) {\n                logger.throwArgumentError(\"privateKey/address mismatch\", \"privateKey\", \"[REDACTED]\");\n            }\n\n            if (hasMnemonic(privateKey)) {\n                const srcMnemonic = privateKey.mnemonic;\n                defineReadOnly(this, \"_mnemonic\", () => (\n                    {\n                        phrase: srcMnemonic.phrase,\n                        path: srcMnemonic.path || defaultPath,\n                        locale: srcMnemonic.locale || \"en\"\n                    }\n                ));\n                const mnemonic = this.mnemonic;\n                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);\n                if (computeAddress(node.privateKey) !== this.address) {\n                    logger.throwArgumentError(\"mnemonic/address mismatch\", \"privateKey\", \"[REDACTED]\");\n                }\n            } else {\n                defineReadOnly(this, \"_mnemonic\", (): Mnemonic => null);\n            }\n\n\n        } else {\n            if (SigningKey.isSigningKey(privateKey)) {\n                /* istanbul ignore if */\n                if (privateKey.curve !== \"secp256k1\") {\n                    logger.throwArgumentError(\"unsupported curve; must be secp256k1\", \"privateKey\", \"[REDACTED]\");\n                }\n                defineReadOnly(this, \"_signingKey\", () => (<SigningKey>privateKey));\n\n            } else {\n                // A lot of common tools do not prefix private keys with a 0x (see: #1166)\n                if (typeof(privateKey) === \"string\") {\n                    if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {\n                        privateKey = \"0x\" + privateKey;\n                    }\n                }\n\n                const signingKey = new SigningKey(privateKey);\n                defineReadOnly(this, \"_signingKey\", () => signingKey);\n            }\n\n            defineReadOnly(this, \"_mnemonic\", (): Mnemonic => null);\n            defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n        }\n\n        /* istanbul ignore if */\n        if (provider && !Provider.isProvider(provider)) {\n            logger.throwArgumentError(\"invalid provider\", \"provider\", provider);\n        }\n\n        defineReadOnly(this, \"provider\", provider || null);\n    }\n\n    get mnemonic(): Mnemonic { return this._mnemonic(); }\n    get privateKey(): string { return this._signingKey().privateKey; }\n    get publicKey(): string { return this._signingKey().publicKey; }\n\n    getAddress(): Promise<string> {\n        return Promise.resolve(this.address);\n    }\n\n    connect(provider: Provider): Wallet {\n        return new Wallet(this, provider);\n    }\n\n    signTransaction(transaction: TransactionRequest): Promise<string> {\n        return resolveProperties(transaction).then((tx) => {\n            if (tx.from != null) {\n                if (getAddress(tx.from) !== this.address) {\n                    logger.throwArgumentError(\"transaction from address mismatch\", \"transaction.from\", transaction.from);\n                }\n                delete tx.from;\n            }\n\n            const signature = this._signingKey().signDigest(keccak256(serialize(<UnsignedTransaction>tx)));\n            return serialize(<UnsignedTransaction>tx, signature);\n        });\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        return joinSignature(this._signingKey().signDigest(hashMessage(message)));\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            if (this.provider == null) {\n                logger.throwError(\"cannot resolve ENS names without a provider\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"resolveName\",\n                    value: name\n                });\n            }\n            return this.provider.resolveName(name);\n        });\n\n        return joinSignature(this._signingKey().signDigest(_TypedDataEncoder.hash(populated.domain, types, populated.value)));\n    }\n\n    encrypt(password: Bytes | string, options?: any, progressCallback?: ProgressCallback): Promise<string> {\n        if (typeof(options) === \"function\" && !progressCallback) {\n            progressCallback = options;\n            options = {};\n        }\n\n        if (progressCallback && typeof(progressCallback) !== \"function\") {\n            throw new Error(\"invalid callback\");\n        }\n\n        if (!options) { options = {}; }\n\n        return encryptKeystore(this, password, options, progressCallback);\n    }\n\n\n    /**\n     *  Static methods to create Wallet instances.\n     */\n    static createRandom(options?: any): Wallet {\n        let entropy: Uint8Array = randomBytes(16);\n\n        if (!options) { options = { }; }\n\n        if (options.extraEntropy) {\n            entropy = arrayify(hexDataSlice(keccak256(concat([ entropy, options.extraEntropy ])), 0, 16));\n        }\n\n        const mnemonic = entropyToMnemonic(entropy, options.locale);\n        return Wallet.fromMnemonic(mnemonic, options.path, options.locale);\n    }\n\n    static fromEncryptedJson(json: string, password: Bytes | string, progressCallback?: ProgressCallback): Promise<Wallet> {\n        return decryptJsonWallet(json, password, progressCallback).then((account) => {\n            return new Wallet(account);\n        });\n    }\n\n    static fromEncryptedJsonSync(json: string, password: Bytes | string): Wallet {\n        return new Wallet(decryptJsonWalletSync(json, password));\n    }\n\n    static fromMnemonic(mnemonic: string, path?: string, wordlist?: Wordlist): Wallet {\n        if (!path) { path = defaultPath; }\n        return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));\n    }\n}\n\nexport function verifyMessage(message: Bytes | string, signature: SignatureLike): string {\n    return recoverAddress(hashMessage(message), signature);\n}\n\nexport function verifyTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>, signature: SignatureLike): string {\n    return recoverAddress(_TypedDataEncoder.hash(domain, types, value), signature);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}