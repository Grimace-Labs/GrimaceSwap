{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BigNumber, isBigNumberish } from \"./bignumber\";\nconst _constructorGuard = {};\nconst Zero = BigNumber.from(0);\nconst NegativeOne = BigNumber.from(-1);\nfunction throwFault(message, fault, operation, value) {\n  const params = {\n    fault: fault,\n    operation: operation\n  };\n  if (value !== undefined) {\n    params.value = value;\n  }\n  return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n}\n// Constant to pull zeros from for multipliers\nlet zeros = \"0\";\nwhile (zeros.length < 256) {\n  zeros += zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals) {\n  if (typeof decimals !== \"number\") {\n    try {\n      decimals = BigNumber.from(decimals).toNumber();\n    } catch (e) {}\n  }\n  if (typeof decimals === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n    return \"1\" + zeros.substring(0, decimals);\n  }\n  return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\nexport function formatFixed(value, decimals) {\n  if (decimals == null) {\n    decimals = 0;\n  }\n  const multiplier = getMultiplier(decimals);\n  // Make sure wei is a big number (convert as necessary)\n  value = BigNumber.from(value);\n  const negative = value.lt(Zero);\n  if (negative) {\n    value = value.mul(NegativeOne);\n  }\n  let fraction = value.mod(multiplier).toString();\n  while (fraction.length < multiplier.length - 1) {\n    fraction = \"0\" + fraction;\n  }\n  // Strip training 0\n  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n  const whole = value.div(multiplier).toString();\n  if (multiplier.length === 1) {\n    value = whole;\n  } else {\n    value = whole + \".\" + fraction;\n  }\n  if (negative) {\n    value = \"-\" + value;\n  }\n  return value;\n}\nexport function parseFixed(value, decimals) {\n  if (decimals == null) {\n    decimals = 0;\n  }\n  const multiplier = getMultiplier(decimals);\n  if (typeof value !== \"string\" || !value.match(/^-?[0-9.,]+$/)) {\n    logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n  }\n  // Is it negative?\n  const negative = value.substring(0, 1) === \"-\";\n  if (negative) {\n    value = value.substring(1);\n  }\n  if (value === \".\") {\n    logger.throwArgumentError(\"missing value\", \"value\", value);\n  }\n  // Split it into a whole and fractional part\n  const comps = value.split(\".\");\n  if (comps.length > 2) {\n    logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n  }\n  let whole = comps[0],\n    fraction = comps[1];\n  if (!whole) {\n    whole = \"0\";\n  }\n  if (!fraction) {\n    fraction = \"0\";\n  }\n  // Get significant digits to check truncation for underflow\n  {\n    const sigFraction = fraction.replace(/^([0-9]*?)(0*)$/, (all, sig, zeros) => sig);\n    if (sigFraction.length > multiplier.length - 1) {\n      throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n  }\n  // Fully pad the string with zeros to get to wei\n  while (fraction.length < multiplier.length - 1) {\n    fraction += \"0\";\n  }\n  const wholeValue = BigNumber.from(whole);\n  const fractionValue = BigNumber.from(fraction);\n  let wei = wholeValue.mul(multiplier).add(fractionValue);\n  if (negative) {\n    wei = wei.mul(NegativeOne);\n  }\n  return wei;\n}\nexport class FixedFormat {\n  constructor(constructorGuard, signed, width, decimals) {\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new FixedFormat\"\n      });\n    }\n    this.signed = signed;\n    this.width = width;\n    this.decimals = decimals;\n    this.name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n    this._multiplier = getMultiplier(decimals);\n    Object.freeze(this);\n  }\n  static from(value) {\n    if (value instanceof FixedFormat) {\n      return value;\n    }\n    if (typeof value === \"number\") {\n      value = `fixed128x${value}`;\n    }\n    let signed = true;\n    let width = 128;\n    let decimals = 18;\n    if (typeof value === \"string\") {\n      if (value === \"fixed\") {\n        // defaults...\n      } else if (value === \"ufixed\") {\n        signed = false;\n      } else {\n        const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n        if (!match) {\n          logger.throwArgumentError(\"invalid fixed format\", \"format\", value);\n        }\n        signed = match[1] !== \"u\";\n        width = parseInt(match[2]);\n        decimals = parseInt(match[3]);\n      }\n    } else if (value) {\n      const check = (key, type, defaultValue) => {\n        if (value[key] == null) {\n          return defaultValue;\n        }\n        if (typeof value[key] !== type) {\n          logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, value[key]);\n        }\n        return value[key];\n      };\n      signed = check(\"signed\", \"boolean\", signed);\n      width = check(\"width\", \"number\", width);\n      decimals = check(\"decimals\", \"number\", decimals);\n    }\n    if (width % 8) {\n      logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n    }\n    if (decimals > 80) {\n      logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n    }\n    return new FixedFormat(_constructorGuard, signed, width, decimals);\n  }\n}\nexport class FixedNumber {\n  constructor(constructorGuard, hex, value, format) {\n    logger.checkNew(new.target, FixedNumber);\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new FixedFormat\"\n      });\n    }\n    this.format = format;\n    this._hex = hex;\n    this._value = value;\n    this._isFixedNumber = true;\n    Object.freeze(this);\n  }\n  _checkFormat(other) {\n    if (this.format.name !== other.format.name) {\n      logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n    }\n  }\n  addUnsafe(other) {\n    this._checkFormat(other);\n    const a = parseFixed(this._value, this.format.decimals);\n    const b = parseFixed(other._value, other.format.decimals);\n    return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n  }\n  subUnsafe(other) {\n    this._checkFormat(other);\n    const a = parseFixed(this._value, this.format.decimals);\n    const b = parseFixed(other._value, other.format.decimals);\n    return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n  }\n  mulUnsafe(other) {\n    this._checkFormat(other);\n    const a = parseFixed(this._value, this.format.decimals);\n    const b = parseFixed(other._value, other.format.decimals);\n    return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n  }\n  divUnsafe(other) {\n    this._checkFormat(other);\n    const a = parseFixed(this._value, this.format.decimals);\n    const b = parseFixed(other._value, other.format.decimals);\n    return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n  }\n  floor() {\n    const comps = this.toString().split(\".\");\n    if (comps.length === 1) {\n      comps.push(\"0\");\n    }\n    let result = FixedNumber.from(comps[0], this.format);\n    const hasFraction = !comps[1].match(/^(0*)$/);\n    if (this.isNegative() && hasFraction) {\n      result = result.subUnsafe(ONE);\n    }\n    return result;\n  }\n  ceiling() {\n    const comps = this.toString().split(\".\");\n    if (comps.length === 1) {\n      comps.push(\"0\");\n    }\n    let result = FixedNumber.from(comps[0], this.format);\n    const hasFraction = !comps[1].match(/^(0*)$/);\n    if (!this.isNegative() && hasFraction) {\n      result = result.addUnsafe(ONE);\n    }\n    return result;\n  }\n  // @TODO: Support other rounding algorithms\n  round(decimals) {\n    if (decimals == null) {\n      decimals = 0;\n    }\n    // If we are already in range, we're done\n    const comps = this.toString().split(\".\");\n    if (comps.length === 1) {\n      comps.push(\"0\");\n    }\n    if (decimals < 0 || decimals > 80 || decimals % 1) {\n      logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n    }\n    if (comps[1].length <= decimals) {\n      return this;\n    }\n    const factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n    const bump = BUMP.toFormat(this.format);\n    return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n  }\n  isZero() {\n    return this._value === \"0.0\" || this._value === \"0\";\n  }\n  isNegative() {\n    return this._value[0] === \"-\";\n  }\n  toString() {\n    return this._value;\n  }\n  toHexString(width) {\n    if (width == null) {\n      return this._hex;\n    }\n    if (width % 8) {\n      logger.throwArgumentError(\"invalid byte width\", \"width\", width);\n    }\n    const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n    return hexZeroPad(hex, width / 8);\n  }\n  toUnsafeFloat() {\n    return parseFloat(this.toString());\n  }\n  toFormat(format) {\n    return FixedNumber.fromString(this._value, format);\n  }\n  static fromValue(value, decimals, format) {\n    // If decimals looks more like a format, and there is no format, shift the parameters\n    if (format == null && decimals != null && !isBigNumberish(decimals)) {\n      format = decimals;\n      decimals = null;\n    }\n    if (decimals == null) {\n      decimals = 0;\n    }\n    if (format == null) {\n      format = \"fixed\";\n    }\n    return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n  }\n  static fromString(value, format) {\n    if (format == null) {\n      format = \"fixed\";\n    }\n    const fixedFormat = FixedFormat.from(format);\n    const numeric = parseFixed(value, fixedFormat.decimals);\n    if (!fixedFormat.signed && numeric.lt(Zero)) {\n      throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n    }\n    let hex = null;\n    if (fixedFormat.signed) {\n      hex = numeric.toTwos(fixedFormat.width).toHexString();\n    } else {\n      hex = numeric.toHexString();\n      hex = hexZeroPad(hex, fixedFormat.width / 8);\n    }\n    const decimal = formatFixed(numeric, fixedFormat.decimals);\n    return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n  }\n  static fromBytes(value, format) {\n    if (format == null) {\n      format = \"fixed\";\n    }\n    const fixedFormat = FixedFormat.from(format);\n    if (arrayify(value).length > fixedFormat.width / 8) {\n      throw new Error(\"overflow\");\n    }\n    let numeric = BigNumber.from(value);\n    if (fixedFormat.signed) {\n      numeric = numeric.fromTwos(fixedFormat.width);\n    }\n    const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n    const decimal = formatFixed(numeric, fixedFormat.decimals);\n    return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n  }\n  static from(value, format) {\n    if (typeof value === \"string\") {\n      return FixedNumber.fromString(value, format);\n    }\n    if (isBytes(value)) {\n      return FixedNumber.fromBytes(value, format);\n    }\n    try {\n      return FixedNumber.fromValue(value, 0, format);\n    } catch (error) {\n      // Allow NUMERIC_FAULT to bubble up\n      if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n        throw error;\n      }\n    }\n    return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n  }\n  static isFixedNumber(value) {\n    return !!(value && value._isFixedNumber);\n  }\n}\nconst ONE = FixedNumber.from(1);\nconst BUMP = FixedNumber.from(\"0.5\");","map":{"version":3,"names":["arrayify","hexZeroPad","isBytes","Logger","version","logger","BigNumber","isBigNumberish","_constructorGuard","Zero","from","NegativeOne","throwFault","message","fault","operation","value","params","undefined","throwError","errors","NUMERIC_FAULT","zeros","length","getMultiplier","decimals","toNumber","e","substring","throwArgumentError","formatFixed","multiplier","negative","lt","mul","fraction","mod","toString","match","whole","div","parseFixed","comps","split","sigFraction","replace","all","sig","wholeValue","fractionValue","wei","add","FixedFormat","constructor","constructorGuard","signed","width","UNSUPPORTED_OPERATION","name","String","_multiplier","Object","freeze","parseInt","check","key","type","defaultValue","FixedNumber","hex","format","checkNew","new","target","_hex","_value","_isFixedNumber","_checkFormat","other","addUnsafe","a","b","fromValue","subUnsafe","sub","mulUnsafe","divUnsafe","floor","push","result","hasFraction","isNegative","ONE","ceiling","round","factor","bump","BUMP","toFormat","isZero","toHexString","fromTwos","toTwos","toUnsafeFloat","parseFloat","fromString","fixedFormat","numeric","decimal","fromBytes","Error","error","code","INVALID_ARGUMENT","isFixedNumber"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\ethers\\node_modules\\@ethersproject\\bignumber\\src.ts\\fixednumber.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify, BytesLike, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BigNumber, BigNumberish, isBigNumberish } from \"./bignumber\";\n\nconst _constructorGuard = { };\n\nconst Zero = BigNumber.from(0);\nconst NegativeOne = BigNumber.from(-1);\n\nfunction throwFault(message: string, fault: string, operation: string, value?: any): never {\n    const params: any = { fault: fault, operation: operation };\n    if (value !== undefined) { params.value = value; }\n    return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n}\n\n// Constant to pull zeros from for multipliers\nlet zeros = \"0\";\nwhile (zeros.length < 256) { zeros += zeros; }\n\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals: BigNumberish): string {\n\n    if (typeof(decimals) !== \"number\") {\n        try {\n            decimals = BigNumber.from(decimals).toNumber();\n        } catch (e) { }\n    }\n\n    if (typeof(decimals) === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return (\"1\" + zeros.substring(0, decimals));\n    }\n\n    return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\n\nexport function formatFixed(value: BigNumberish, decimals?: string | BigNumberish): string {\n    if (decimals == null) { decimals = 0; }\n    const multiplier = getMultiplier(decimals);\n\n    // Make sure wei is a big number (convert as necessary)\n    value = BigNumber.from(value);\n\n    const negative = value.lt(Zero);\n    if (negative) { value = value.mul(NegativeOne); }\n\n    let fraction = value.mod(multiplier).toString();\n    while (fraction.length < multiplier.length - 1) { fraction = \"0\" + fraction; }\n\n    // Strip training 0\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n\n    const whole = value.div(multiplier).toString();\n    if (multiplier.length === 1) {\n        value = whole;\n    } else {\n        value = whole + \".\" + fraction;\n    }\n\n    if (negative) { value = \"-\" + value; }\n\n    return value;\n}\n\nexport function parseFixed(value: string, decimals?: BigNumberish): BigNumber {\n    if (decimals == null) { decimals = 0; }\n    const multiplier = getMultiplier(decimals);\n\n    if (typeof(value) !== \"string\" || !value.match(/^-?[0-9.,]+$/)) {\n        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n\n    // Is it negative?\n    const negative = (value.substring(0, 1) === \"-\");\n    if (negative) { value = value.substring(1); }\n\n    if (value === \".\") {\n        logger.throwArgumentError(\"missing value\", \"value\", value);\n    }\n\n    // Split it into a whole and fractional part\n    const comps = value.split(\".\");\n    if (comps.length > 2) {\n        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n\n    let whole = comps[0], fraction = comps[1];\n    if (!whole) { whole = \"0\"; }\n    if (!fraction) { fraction = \"0\"; }\n\n    // Get significant digits to check truncation for underflow\n    {\n    const sigFraction = fraction.replace(/^([0-9]*?)(0*)$/, (all, sig, zeros) => (sig));\n        if (sigFraction.length > multiplier.length - 1) {\n            throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n        }\n    }\n\n    // Fully pad the string with zeros to get to wei\n    while (fraction.length < multiplier.length - 1) { fraction += \"0\"; }\n\n    const wholeValue = BigNumber.from(whole);\n    const fractionValue = BigNumber.from(fraction);\n\n    let wei = (wholeValue.mul(multiplier)).add(fractionValue);\n\n    if (negative) { wei = wei.mul(NegativeOne); }\n\n    return wei;\n}\n\nexport class FixedFormat {\n    readonly signed: boolean;\n    readonly width: number;\n    readonly decimals: number;\n    readonly name: string;\n    readonly _multiplier: string;\n\n    constructor(constructorGuard: any, signed: boolean, width: number, decimals: number) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n\n        this.name = (signed ? \"\": \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n\n        this._multiplier = getMultiplier(decimals);\n\n        Object.freeze(this);\n    }\n\n    static from(value: any): FixedFormat {\n        if (value instanceof FixedFormat) { return value; }\n\n        if (typeof(value) === \"number\") {\n            value = `fixed128x${value}`\n        }\n\n        let signed = true;\n        let width = 128;\n        let decimals = 18;\n\n        if (typeof(value) === \"string\") {\n            if (value === \"fixed\") {\n                // defaults...\n            } else if (value === \"ufixed\") {\n                signed = false;\n            } else {\n                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                if (!match) { logger.throwArgumentError(\"invalid fixed format\", \"format\", value); }\n                signed = (match[1] !== \"u\");\n                width = parseInt(match[2]);\n                decimals = parseInt(match[3]);\n            }\n        } else if (value) {\n            const check = (key: string, type: string, defaultValue: any): any => {\n                if (value[key] == null) { return defaultValue; }\n                if (typeof(value[key]) !== type) {\n                    logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type +\")\", \"format.\" + key, value[key]);\n                }\n                return value[key];\n            }\n            signed = check(\"signed\", \"boolean\", signed);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n        }\n\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n\n        if (decimals > 80) {\n            logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\n    }\n}\n\nexport class FixedNumber {\n    readonly format: FixedFormat;\n    readonly _hex: string;\n    readonly _value: string;\n\n    readonly _isFixedNumber: boolean;\n\n    constructor(constructorGuard: any, hex: string, value: string, format?: FixedFormat) {\n        logger.checkNew(new.target, FixedNumber);\n\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n\n        this._isFixedNumber = true;\n\n        Object.freeze(this);\n    }\n\n    _checkFormat(other: FixedNumber): void {\n        if (this.format.name !== other.format.name) {\n            logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n    }\n\n    addUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n\n    subUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n\n    mulUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n\n    divUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n\n    floor(): FixedNumber {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        let result = FixedNumber.from(comps[0], this.format);\n\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (this.isNegative() && hasFraction) {\n            result = result.subUnsafe(ONE);\n        }\n\n        return result;\n    }\n\n    ceiling(): FixedNumber {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        let result = FixedNumber.from(comps[0], this.format);\n\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (!this.isNegative() && hasFraction) {\n            result = result.addUnsafe(ONE);\n        }\n\n        return result;\n    }\n\n    // @TODO: Support other rounding algorithms\n    round(decimals?: number): FixedNumber {\n        if (decimals == null) { decimals = 0; }\n\n        // If we are already in range, we're done\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\n            logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        }\n\n        if (comps[1].length <= decimals) { return this; }\n\n        const factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n        const bump = BUMP.toFormat(this.format);\n\n        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n    }\n\n    isZero(): boolean {\n        return (this._value === \"0.0\" || this._value === \"0\");\n    }\n\n    isNegative(): boolean {\n        return (this._value[0] === \"-\");\n    }\n\n    toString(): string { return this._value; }\n\n    toHexString(width?: number): string {\n        if (width == null) { return this._hex; }\n        if (width % 8) { logger.throwArgumentError(\"invalid byte width\", \"width\", width); }\n        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return hexZeroPad(hex, width / 8);\n    }\n\n    toUnsafeFloat(): number { return parseFloat(this.toString()); }\n\n    toFormat(format: FixedFormat | string): FixedNumber {\n        return FixedNumber.fromString(this._value, format);\n    }\n\n\n    static fromValue(value: BigNumber, decimals?: BigNumberish, format?: FixedFormat | string | number): FixedNumber {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !isBigNumberish(decimals)) {\n            format = decimals;\n            decimals = null;\n        }\n\n        if (decimals == null) { decimals = 0; }\n        if (format == null) { format = \"fixed\"; }\n\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n\n\n    static fromString(value: string, format?: FixedFormat | string | number): FixedNumber {\n        if (format == null) { format = \"fixed\"; }\n\n        const fixedFormat = FixedFormat.from(format);\n\n        const numeric = parseFixed(value, fixedFormat.decimals);\n\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\n            throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n\n        let hex: string = null;\n        if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n        } else {\n            hex = numeric.toHexString();\n            hex = hexZeroPad(hex, fixedFormat.width / 8);\n        }\n\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n\n    static fromBytes(value: BytesLike, format?: FixedFormat | string | number): FixedNumber {\n        if (format == null) { format = \"fixed\"; }\n\n        const fixedFormat = FixedFormat.from(format);\n\n        if (arrayify(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n        }\n\n        let numeric = BigNumber.from(value);\n        if (fixedFormat.signed) { numeric = numeric.fromTwos(fixedFormat.width); }\n\n        const hex = numeric.toTwos((fixedFormat.signed ? 0: 1) + fixedFormat.width).toHexString();\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n\n    static from(value: any, format?: FixedFormat | string | number) {\n        if (typeof(value) === \"string\") {\n            return FixedNumber.fromString(value, format);\n        }\n\n        if (isBytes(value)) {\n            return FixedNumber.fromBytes(value, format);\n        }\n\n        try {\n            return FixedNumber.fromValue(value, 0, format);\n        } catch (error) {\n            // Allow NUMERIC_FAULT to bubble up\n            if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n                throw error;\n            }\n        }\n\n        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n\n    static isFixedNumber(value: any): value is FixedNumber {\n        return !!(value && value._isFixedNumber);\n    }\n}\n\nconst ONE = FixedNumber.from(1);\nconst BUMP = FixedNumber.from(\"0.5\");\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}