{"ast":null,"code":"\"use strict\";\n\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\nimport _BN from \"bn.js\";\nvar BN = _BN.BN;\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n  return value != null && (BigNumber.isBigNumber(value) || typeof value === \"number\" && value % 1 === 0 || typeof value === \"string\" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === \"bigint\" || isBytes(value));\n}\n// Only warn about passing 10 into radix once\nlet _warnedToStringRadix = false;\nexport class BigNumber {\n  constructor(constructorGuard, hex) {\n    logger.checkNew(new.target, BigNumber);\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new (BigNumber)\"\n      });\n    }\n    this._hex = hex;\n    this._isBigNumber = true;\n    Object.freeze(this);\n  }\n  fromTwos(value) {\n    return toBigNumber(toBN(this).fromTwos(value));\n  }\n  toTwos(value) {\n    return toBigNumber(toBN(this).toTwos(value));\n  }\n  abs() {\n    if (this._hex[0] === \"-\") {\n      return BigNumber.from(this._hex.substring(1));\n    }\n    return this;\n  }\n  add(other) {\n    return toBigNumber(toBN(this).add(toBN(other)));\n  }\n  sub(other) {\n    return toBigNumber(toBN(this).sub(toBN(other)));\n  }\n  div(other) {\n    const o = BigNumber.from(other);\n    if (o.isZero()) {\n      throwFault(\"division by zero\", \"div\");\n    }\n    return toBigNumber(toBN(this).div(toBN(other)));\n  }\n  mul(other) {\n    return toBigNumber(toBN(this).mul(toBN(other)));\n  }\n  mod(other) {\n    const value = toBN(other);\n    if (value.isNeg()) {\n      throwFault(\"cannot modulo negative values\", \"mod\");\n    }\n    return toBigNumber(toBN(this).umod(value));\n  }\n  pow(other) {\n    const value = toBN(other);\n    if (value.isNeg()) {\n      throwFault(\"cannot raise to negative values\", \"pow\");\n    }\n    return toBigNumber(toBN(this).pow(value));\n  }\n  and(other) {\n    const value = toBN(other);\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"cannot 'and' negative values\", \"and\");\n    }\n    return toBigNumber(toBN(this).and(value));\n  }\n  or(other) {\n    const value = toBN(other);\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"cannot 'or' negative values\", \"or\");\n    }\n    return toBigNumber(toBN(this).or(value));\n  }\n  xor(other) {\n    const value = toBN(other);\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"cannot 'xor' negative values\", \"xor\");\n    }\n    return toBigNumber(toBN(this).xor(value));\n  }\n  mask(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"cannot mask negative values\", \"mask\");\n    }\n    return toBigNumber(toBN(this).maskn(value));\n  }\n  shl(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"cannot shift negative values\", \"shl\");\n    }\n    return toBigNumber(toBN(this).shln(value));\n  }\n  shr(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"cannot shift negative values\", \"shr\");\n    }\n    return toBigNumber(toBN(this).shrn(value));\n  }\n  eq(other) {\n    return toBN(this).eq(toBN(other));\n  }\n  lt(other) {\n    return toBN(this).lt(toBN(other));\n  }\n  lte(other) {\n    return toBN(this).lte(toBN(other));\n  }\n  gt(other) {\n    return toBN(this).gt(toBN(other));\n  }\n  gte(other) {\n    return toBN(this).gte(toBN(other));\n  }\n  isNegative() {\n    return this._hex[0] === \"-\";\n  }\n  isZero() {\n    return toBN(this).isZero();\n  }\n  toNumber() {\n    try {\n      return toBN(this).toNumber();\n    } catch (error) {\n      throwFault(\"overflow\", \"toNumber\", this.toString());\n    }\n    return null;\n  }\n  toBigInt() {\n    try {\n      return BigInt(this.toString());\n    } catch (e) {}\n    return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n      value: this.toString()\n    });\n  }\n  toString() {\n    // Lots of people expect this, which we do not support, so check (See: #889)\n    if (arguments.length > 0) {\n      if (arguments[0] === 10) {\n        if (!_warnedToStringRadix) {\n          _warnedToStringRadix = true;\n          logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n        }\n      } else if (arguments[0] === 16) {\n        logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n      } else {\n        logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n      }\n    }\n    return toBN(this).toString(10);\n  }\n  toHexString() {\n    return this._hex;\n  }\n  toJSON(key) {\n    return {\n      type: \"BigNumber\",\n      hex: this.toHexString()\n    };\n  }\n  static from(value) {\n    if (value instanceof BigNumber) {\n      return value;\n    }\n    if (typeof value === \"string\") {\n      if (value.match(/^-?0x[0-9a-f]+$/i)) {\n        return new BigNumber(_constructorGuard, toHex(value));\n      }\n      if (value.match(/^-?[0-9]+$/)) {\n        return new BigNumber(_constructorGuard, toHex(new BN(value)));\n      }\n      return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n    }\n    if (typeof value === \"number\") {\n      if (value % 1) {\n        throwFault(\"underflow\", \"BigNumber.from\", value);\n      }\n      if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n        throwFault(\"overflow\", \"BigNumber.from\", value);\n      }\n      return BigNumber.from(String(value));\n    }\n    const anyValue = value;\n    if (typeof anyValue === \"bigint\") {\n      return BigNumber.from(anyValue.toString());\n    }\n    if (isBytes(anyValue)) {\n      return BigNumber.from(hexlify(anyValue));\n    }\n    if (anyValue) {\n      // Hexable interface (takes piority)\n      if (anyValue.toHexString) {\n        const hex = anyValue.toHexString();\n        if (typeof hex === \"string\") {\n          return BigNumber.from(hex);\n        }\n      } else {\n        // For now, handle legacy JSON-ified values (goes away in v6)\n        let hex = anyValue._hex;\n        // New-form JSON\n        if (hex == null && anyValue.type === \"BigNumber\") {\n          hex = anyValue.hex;\n        }\n        if (typeof hex === \"string\") {\n          if (isHexString(hex) || hex[0] === \"-\" && isHexString(hex.substring(1))) {\n            return BigNumber.from(hex);\n          }\n        }\n      }\n    }\n    return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n  }\n  static isBigNumber(value) {\n    return !!(value && value._isBigNumber);\n  }\n}\n// Normalize the hex string\nfunction toHex(value) {\n  // For BN, call on the hex string\n  if (typeof value !== \"string\") {\n    return toHex(value.toString(16));\n  }\n  // If negative, prepend the negative sign to the normalized positive value\n  if (value[0] === \"-\") {\n    // Strip off the negative sign\n    value = value.substring(1);\n    // Cannot have mulitple negative signs (e.g. \"--0x04\")\n    if (value[0] === \"-\") {\n      logger.throwArgumentError(\"invalid hex\", \"value\", value);\n    }\n    // Call toHex on the positive component\n    value = toHex(value);\n    // Do not allow \"-0x00\"\n    if (value === \"0x00\") {\n      return value;\n    }\n    // Negate the value\n    return \"-\" + value;\n  }\n  // Add a \"0x\" prefix if missing\n  if (value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  }\n  // Normalize zero\n  if (value === \"0x\") {\n    return \"0x00\";\n  }\n  // Make the string even length\n  if (value.length % 2) {\n    value = \"0x0\" + value.substring(2);\n  }\n  // Trim to smallest even-length string\n  while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n    value = \"0x\" + value.substring(4);\n  }\n  return value;\n}\nfunction toBigNumber(value) {\n  return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n  const hex = BigNumber.from(value).toHexString();\n  if (hex[0] === \"-\") {\n    return new BN(\"-\" + hex.substring(3), 16);\n  }\n  return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n  const params = {\n    fault: fault,\n    operation: operation\n  };\n  if (value != null) {\n    params.value = value;\n  }\n  return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n// value should have no prefix\nexport function _base36To16(value) {\n  return new BN(value, 36).toString(16);\n}\n// value should have no prefix\nexport function _base16To36(value) {\n  return new BN(value, 16).toString(36);\n}","map":{"version":3,"names":["_BN","BN","hexlify","isBytes","isHexString","Logger","version","logger","_constructorGuard","MAX_SAFE","isBigNumberish","value","BigNumber","isBigNumber","match","_warnedToStringRadix","constructor","constructorGuard","hex","checkNew","new","target","throwError","errors","UNSUPPORTED_OPERATION","operation","_hex","_isBigNumber","Object","freeze","fromTwos","toBigNumber","toBN","toTwos","abs","from","substring","add","other","sub","div","o","isZero","throwFault","mul","mod","isNeg","umod","pow","and","isNegative","or","xor","mask","maskn","shl","shln","shr","shrn","eq","lt","lte","gt","gte","toNumber","error","toString","toBigInt","BigInt","e","arguments","length","warn","UNEXPECTED_ARGUMENT","toHexString","toJSON","key","type","toHex","throwArgumentError","String","anyValue","fault","params","NUMERIC_FAULT","_base36To16","_base16To36"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\ethers\\node_modules\\@ethersproject\\bignumber\\src.ts\\bignumber.ts"],"sourcesContent":["\"use strict\";\n\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\n\nimport _BN from \"bn.js\";\nimport BN = _BN.BN;\n\nimport { Bytes, Hexable, hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst _constructorGuard = { };\n\nconst MAX_SAFE = 0x1fffffffffffff;\n\n\nexport type BigNumberish = BigNumber | Bytes | bigint | string | number;\n\nexport function isBigNumberish(value: any): value is BigNumberish {\n    return (value != null) && (\n        BigNumber.isBigNumber(value) ||\n        (typeof(value) === \"number\" && (value % 1) === 0) ||\n        (typeof(value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        isHexString(value) ||\n        (typeof(value) === \"bigint\") ||\n        isBytes(value)\n    );\n}\n\n// Only warn about passing 10 into radix once\nlet _warnedToStringRadix = false;\n\nexport class BigNumber implements Hexable {\n    readonly _hex: string;\n    readonly _isBigNumber: boolean;\n\n    constructor(constructorGuard: any, hex: string) {\n        logger.checkNew(new.target, BigNumber);\n\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n\n        this._hex = hex;\n        this._isBigNumber = true;\n\n        Object.freeze(this);\n    }\n\n    fromTwos(value: number): BigNumber {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n\n    toTwos(value: number): BigNumber {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n\n    abs(): BigNumber {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n\n    add(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n\n    sub(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n\n    div(other: BigNumberish): BigNumber {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division by zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n\n    mul(other: BigNumberish): BigNumber {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n\n    mod(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"cannot modulo negative values\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n\n    pow(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"cannot raise to negative values\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    }\n\n    and(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'and' negative values\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n\n    or(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'or' negative values\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n\n    xor(other: BigNumberish): BigNumber {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"cannot 'xor' negative values\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n\n    mask(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot mask negative values\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n\n    shl(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot shift negative values\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n\n    shr(value: number): BigNumber {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"cannot shift negative values\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n\n    eq(other: BigNumberish): boolean {\n        return toBN(this).eq(toBN(other));\n    }\n\n    lt(other: BigNumberish): boolean {\n        return toBN(this).lt(toBN(other));\n    }\n\n    lte(other: BigNumberish): boolean {\n        return toBN(this).lte(toBN(other));\n    }\n\n    gt(other: BigNumberish): boolean {\n        return toBN(this).gt(toBN(other));\n   }\n\n    gte(other: BigNumberish): boolean {\n        return toBN(this).gte(toBN(other));\n    }\n\n    isNegative(): boolean {\n        return (this._hex[0] === \"-\");\n    }\n\n    isZero(): boolean {\n        return toBN(this).isZero();\n    }\n\n    toNumber(): number {\n        try {\n            return toBN(this).toNumber();\n        } catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n\n    toBigInt(): bigint {\n        try {\n            return BigInt(this.toString());\n        } catch (e) { }\n\n        return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    }\n\n    toString(): string {\n        // Lots of people expect this, which we do not support, so check (See: #889)\n        if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n                if (!_warnedToStringRadix) {\n                    _warnedToStringRadix = true;\n                    logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n                }\n            } else if (arguments[0] === 16) {\n                logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, { });\n            } else {\n                logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, { });\n            }\n        }\n        return toBN(this).toString(10);\n    }\n\n    toHexString(): string {\n        return this._hex;\n    }\n\n    toJSON(key?: string): any {\n        return { type: \"BigNumber\", hex: this.toHexString() };\n    }\n\n    static from(value: any): BigNumber {\n        if (value instanceof BigNumber) { return value; }\n\n        if (typeof(value) === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n\n        if (typeof(value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n\n            return BigNumber.from(String(value));\n        }\n\n        const anyValue = <any>value;\n\n        if (typeof(anyValue) === \"bigint\") {\n            return BigNumber.from(anyValue.toString());\n        }\n\n        if (isBytes(anyValue)) {\n            return BigNumber.from(hexlify(anyValue));\n        }\n\n        if (anyValue) {\n\n            // Hexable interface (takes piority)\n            if (anyValue.toHexString) {\n                const hex = anyValue.toHexString();\n                if (typeof(hex) === \"string\") {\n                    return BigNumber.from(hex);\n                }\n\n            } else {\n                // For now, handle legacy JSON-ified values (goes away in v6)\n                let hex = anyValue._hex;\n\n                // New-form JSON\n                if (hex == null && anyValue.type === \"BigNumber\") {\n                    hex = anyValue.hex;\n                }\n\n                if (typeof(hex) === \"string\") {\n                    if (isHexString(hex) || (hex[0] === \"-\" && isHexString(hex.substring(1)))) {\n                        return BigNumber.from(hex);\n                    }\n                }\n            }\n        }\n\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n\n    static isBigNumber(value: any): value is BigNumber {\n        return !!(value && value._isBigNumber);\n    }\n}\n\n// Normalize the hex string\nfunction toHex(value: string | BN): string {\n\n    // For BN, call on the hex string\n    if (typeof(value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n\n        // Cannot have mulitple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") { logger.throwArgumentError(\"invalid hex\", \"value\", value); }\n\n        // Call toHex on the positive component\n        value = toHex(value);\n\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") { return value; }\n\n        // Negate the value\n        return \"-\" + value;\n    }\n\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n\n    // Normalize zero\n    if (value === \"0x\") { return \"0x00\"; }\n\n    // Make the string even length\n    if (value.length % 2) { value = \"0x0\" + value.substring(2); }\n\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n\n    return value;\n}\n\nfunction toBigNumber(value: BN): BigNumber {\n    return BigNumber.from(toHex(value));\n}\n\nfunction toBN(value: BigNumberish): BN {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\n\nfunction throwFault(fault: string, operation: string, value?: any): never {\n    const params: any = { fault: fault, operation: operation };\n    if (value != null) { params.value = value; }\n\n    return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n\n// value should have no prefix\nexport function _base36To16(value: string): string {\n    return (new BN(value, 36)).toString(16);\n}\n\n// value should have no prefix\nexport function _base16To36(value: string): string {\n    return (new BN(value, 16)).toString(36);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}