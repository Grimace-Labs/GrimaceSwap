{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { arrayify } from \"@ethersproject/bytes\";\nexport function getUrl(href, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (options == null) {\n      options = {};\n    }\n    const request = {\n      method: options.method || \"GET\",\n      headers: options.headers || {},\n      body: options.body || undefined,\n      mode: \"cors\",\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      redirect: \"follow\",\n      referrer: \"client\" // no-referrer, *client\n    };\n\n    const response = yield fetch(href, request);\n    const body = yield response.arrayBuffer();\n    const headers = {};\n    if (response.headers.forEach) {\n      response.headers.forEach((value, key) => {\n        headers[key.toLowerCase()] = value;\n      });\n    } else {\n      response.headers.keys().forEach(key => {\n        headers[key.toLowerCase()] = response.headers.get(key);\n      });\n    }\n    return {\n      headers: headers,\n      statusCode: response.status,\n      statusMessage: response.statusText,\n      body: arrayify(new Uint8Array(body))\n    };\n  });\n}","map":{"version":3,"names":["arrayify","getUrl","href","options","request","method","headers","body","undefined","mode","cache","credentials","redirect","referrer","response","fetch","arrayBuffer","forEach","value","key","toLowerCase","keys","get","statusCode","status","statusMessage","statusText","Uint8Array"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\ethers\\node_modules\\@ethersproject\\web\\src.ts\\browser-geturl.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport type { GetUrlResponse, Options } from \"./types\";\n\nexport { GetUrlResponse, Options };\n\nexport async function getUrl(href: string, options?: Options): Promise<GetUrlResponse> {\n    if (options == null) { options = { }; }\n\n    const request = {\n        method: (options.method || \"GET\"),\n        headers: (options.headers || { }),\n        body: (options.body || undefined),\n\n        mode: <RequestMode>\"cors\",                       // no-cors, cors, *same-origin\n        cache: <RequestCache>\"no-cache\",                 // *default, no-cache, reload, force-cache, only-if-cached\n        credentials: <RequestCredentials>\"same-origin\",  // include, *same-origin, omit\n        redirect: <RequestRedirect>\"follow\",             // manual, *follow, error\n        referrer: \"client\",         // no-referrer, *client\n    };\n\n    const response = await fetch(href, request);\n    const body = await response.arrayBuffer();\n\n    const headers: { [ name: string ]: string } = { };\n    if (response.headers.forEach) {\n        response.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n    } else {\n        (<() => Array<string>>((<any>(response.headers)).keys))().forEach((key) => {\n            headers[key.toLowerCase()] = response.headers.get(key);\n        });\n    }\n\n    return {\n        headers: headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body)),\n    }\n}\n"],"mappings":"AAAA,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEZ,SAASA,QAAQ,QAAQ,sBAAsB;AAM/C,OAAM,SAAgBC,MAAMA,CAACC,IAAY,EAAEC,OAAiB;;IACxD,IAAIA,OAAO,IAAI,IAAI,EAAE;MAAEA,OAAO,GAAG,EAAG;;IAEpC,MAAMC,OAAO,GAAG;MACZC,MAAM,EAAGF,OAAO,CAACE,MAAM,IAAI,KAAM;MACjCC,OAAO,EAAGH,OAAO,CAACG,OAAO,IAAI,EAAI;MACjCC,IAAI,EAAGJ,OAAO,CAACI,IAAI,IAAIC,SAAU;MAEjCC,IAAI,EAAe,MAAM;MACzBC,KAAK,EAAgB,UAAU;MAC/BC,WAAW,EAAsB,aAAa;MAC9CC,QAAQ,EAAmB,QAAQ;MACnCC,QAAQ,EAAE,QAAQ,CAAU;KAC/B;;IAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACb,IAAI,EAAEE,OAAO,CAAC;IAC3C,MAAMG,IAAI,GAAG,MAAMO,QAAQ,CAACE,WAAW,EAAE;IAEzC,MAAMV,OAAO,GAAiC,EAAG;IACjD,IAAIQ,QAAQ,CAACR,OAAO,CAACW,OAAO,EAAE;MAC1BH,QAAQ,CAACR,OAAO,CAACW,OAAO,CAAC,CAACC,KAAK,EAAEC,GAAG,KAAI;QACpCb,OAAO,CAACa,GAAG,CAACC,WAAW,EAAE,CAAC,GAAGF,KAAK;MACtC,CAAC,CAAC;KACL,MAAM;MAC2BJ,QAAQ,CAACR,OAAO,CAAGe,IAAI,CAAE,CAAE,CAACJ,OAAO,CAAEE,GAAG,IAAI;QACtEb,OAAO,CAACa,GAAG,CAACC,WAAW,EAAE,CAAC,GAAGN,QAAQ,CAACR,OAAO,CAACgB,GAAG,CAACH,GAAG,CAAC;MAC1D,CAAC,CAAC;;IAGN,OAAO;MACHb,OAAO,EAAEA,OAAO;MAChBiB,UAAU,EAAET,QAAQ,CAACU,MAAM;MAC3BC,aAAa,EAAEX,QAAQ,CAACY,UAAU;MAClCnB,IAAI,EAAEP,QAAQ,CAAC,IAAI2B,UAAU,CAACpB,IAAI,CAAC;KACtC;EACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}