{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { arrayify } from \"@ethersproject/bytes\";\nexport function getUrl(href, options) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var request, opts, response, body, headers;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (options == null) {\n            options = {};\n          }\n          request = {\n            method: options.method || \"GET\",\n            headers: options.headers || {},\n            body: options.body || undefined\n          };\n          if (options.skipFetchSetup !== true) {\n            request.mode = \"cors\"; // no-cors, cors, *same-origin\n            request.cache = \"no-cache\"; // *default, no-cache, reload, force-cache, only-if-cached\n            request.credentials = \"same-origin\"; // include, *same-origin, omit\n            request.redirect = \"follow\"; // manual, *follow, error\n            request.referrer = \"client\"; // no-referrer, *client\n          }\n\n          ;\n          if (options.fetchOptions != null) {\n            opts = options.fetchOptions;\n            if (opts.mode) {\n              request.mode = opts.mode;\n            }\n            if (opts.cache) {\n              request.cache = opts.cache;\n            }\n            if (opts.credentials) {\n              request.credentials = opts.credentials;\n            }\n            if (opts.redirect) {\n              request.redirect = opts.redirect;\n            }\n            if (opts.referrer) {\n              request.referrer = opts.referrer;\n            }\n          }\n          _context.next = 7;\n          return fetch(href, request);\n        case 7:\n          response = _context.sent;\n          _context.next = 10;\n          return response.arrayBuffer();\n        case 10:\n          body = _context.sent;\n          headers = {};\n          if (response.headers.forEach) {\n            response.headers.forEach(function (value, key) {\n              headers[key.toLowerCase()] = value;\n            });\n          } else {\n            response.headers.keys().forEach(function (key) {\n              headers[key.toLowerCase()] = response.headers.get(key);\n            });\n          }\n          return _context.abrupt(\"return\", {\n            headers: headers,\n            statusCode: response.status,\n            statusMessage: response.statusText,\n            body: arrayify(new Uint8Array(body))\n          });\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n}","map":{"version":3,"names":["_regeneratorRuntime","arrayify","getUrl","href","options","request","method","headers","body","undefined","skipFetchSetup","mode","cache","credentials","redirect","referrer","fetchOptions","opts","_context","next","fetch","response","sent","arrayBuffer","forEach","value","key","toLowerCase","keys","get","abrupt","statusCode","status","statusMessage","statusText","Uint8Array","stop","_callee"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\web\\src.ts\\browser-geturl.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport type { GetUrlResponse, Options } from \"./types\";\n\nexport { GetUrlResponse, Options };\n\nexport async function getUrl(href: string, options?: Options): Promise<GetUrlResponse> {\n    if (options == null) { options = { }; }\n\n    const request: RequestInit = {\n        method: (options.method || \"GET\"),\n        headers: (options.headers || { }),\n        body: (options.body || undefined),\n    };\n\n    if (options.skipFetchSetup !== true) {\n        request.mode = <RequestMode>\"cors\";              // no-cors, cors, *same-origin\n        request.cache = <RequestCache>\"no-cache\";        // *default, no-cache, reload, force-cache, only-if-cached\n        request.credentials = <RequestCredentials>\"same-origin\";  // include, *same-origin, omit\n        request.redirect = <RequestRedirect>\"follow\";    // manual, *follow, error\n        request.referrer = \"client\";                     // no-referrer, *client\n    };\n\n    if (options.fetchOptions != null) {\n        const opts = options.fetchOptions;\n        if (opts.mode) { request.mode = <RequestMode>(opts.mode); }\n        if (opts.cache) { request.cache = <RequestCache>(opts.cache); }\n        if (opts.credentials) { request.credentials = <RequestCredentials>(opts.credentials); }\n        if (opts.redirect) { request.redirect = <RequestRedirect>(opts.redirect); }\n        if (opts.referrer) { request.referrer = opts.referrer; }\n    }\n\n    const response = await fetch(href, request);\n    const body = await response.arrayBuffer();\n\n    const headers: { [ name: string ]: string } = { };\n    if (response.headers.forEach) {\n        response.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n    } else {\n        (<() => Array<string>>((<any>(response.headers)).keys))().forEach((key) => {\n            headers[key.toLowerCase()] = response.headers.get(key);\n        });\n    }\n\n    return {\n        headers: headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body)),\n    }\n}\n"],"mappings":"AAAA,YAAY;;AAAC,OAAAA,mBAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEb,SAASC,QAAQ,QAAQ,sBAAsB;AAM/C,OAAM,SAAgBC,MAAMA,CAACC,IAAY,EAAEC,OAAiB;;;;;;UACxD,IAAIA,OAAO,IAAI,IAAI,EAAE;YAAEA,OAAO,GAAG,EAAG;;UAE9BC,OAAO,GAAgB;YACzBC,MAAM,EAAGF,OAAO,CAACE,MAAM,IAAI,KAAM;YACjCC,OAAO,EAAGH,OAAO,CAACG,OAAO,IAAI,EAAI;YACjCC,IAAI,EAAGJ,OAAO,CAACI,IAAI,IAAIC;WAC1B;UAED,IAAIL,OAAO,CAACM,cAAc,KAAK,IAAI,EAAE;YACjCL,OAAO,CAACM,IAAI,GAAgB,MAAM,CAAC,CAAc;YACjDN,OAAO,CAACO,KAAK,GAAiB,UAAU,CAAC,CAAQ;YACjDP,OAAO,CAACQ,WAAW,GAAuB,aAAa,CAAC,CAAE;YAC1DR,OAAO,CAACS,QAAQ,GAAoB,QAAQ,CAAC,CAAI;YACjDT,OAAO,CAACU,QAAQ,GAAG,QAAQ,CAAC,CAAqB;;;UACpD;UAED,IAAIX,OAAO,CAACY,YAAY,IAAI,IAAI,EAAE;YACxBC,IAAI,GAAGb,OAAO,CAACY,YAAY;YACjC,IAAIC,IAAI,CAACN,IAAI,EAAE;cAAEN,OAAO,CAACM,IAAI,GAAiBM,IAAI,CAACN,IAAK;;YACxD,IAAIM,IAAI,CAACL,KAAK,EAAE;cAAEP,OAAO,CAACO,KAAK,GAAkBK,IAAI,CAACL,KAAM;;YAC5D,IAAIK,IAAI,CAACJ,WAAW,EAAE;cAAER,OAAO,CAACQ,WAAW,GAAwBI,IAAI,CAACJ,WAAY;;YACpF,IAAII,IAAI,CAACH,QAAQ,EAAE;cAAET,OAAO,CAACS,QAAQ,GAAqBG,IAAI,CAACH,QAAS;;YACxE,IAAIG,IAAI,CAACF,QAAQ,EAAE;cAAEV,OAAO,CAACU,QAAQ,GAAGE,IAAI,CAACF,QAAQ;;;UACxDG,QAAA,CAAAC,IAAA;UAEgB,OAAMC,KAAK,CAACjB,IAAI,EAAEE,OAAO,CAAC;QAAA;UAArCgB,QAAQ,GAAAH,QAAA,CAAAI,IAAA;UAAAJ,QAAA,CAAAC,IAAA;UACD,OAAME,QAAQ,CAACE,WAAW,EAAE;QAAA;UAAnCf,IAAI,GAAAU,QAAA,CAAAI,IAAA;UAEJf,OAAO,GAAiC,EAAG;UACjD,IAAIc,QAAQ,CAACd,OAAO,CAACiB,OAAO,EAAE;YAC1BH,QAAQ,CAACd,OAAO,CAACiB,OAAO,CAAC,UAACC,KAAK,EAAEC,GAAG,EAAI;cACpCnB,OAAO,CAACmB,GAAG,CAACC,WAAW,EAAE,CAAC,GAAGF,KAAK;YACtC,CAAC,CAAC;WACL,MAAM;YAC2BJ,QAAQ,CAACd,OAAO,CAAGqB,IAAI,CAAE,CAAE,CAACJ,OAAO,CAAC,UAACE,GAAG,EAAI;cACtEnB,OAAO,CAACmB,GAAG,CAACC,WAAW,EAAE,CAAC,GAAGN,QAAQ,CAACd,OAAO,CAACsB,GAAG,CAACH,GAAG,CAAC;YAC1D,CAAC,CAAC;;UACL,OAAAR,QAAA,CAAAY,MAAA,WAEM;YACHvB,OAAO,EAAEA,OAAO;YAChBwB,UAAU,EAAEV,QAAQ,CAACW,MAAM;YAC3BC,aAAa,EAAEZ,QAAQ,CAACa,UAAU;YAClC1B,IAAI,EAAEP,QAAQ,CAAC,IAAIkC,UAAU,CAAC3B,IAAI,CAAC;WACtC;QAAA;QAAA;UAAA,OAAAU,QAAA,CAAAkB,IAAA;MAAA;IAAA,GAAAC,OAAA;EAAA,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}