{"ast":null,"code":"\"use strict\";\n\nimport { EC } from \"./elliptic\";\nimport { arrayify, hexDataLength, hexlify, hexZeroPad, splitSignature } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nlet _curve = null;\nfunction getCurve() {\n  if (!_curve) {\n    _curve = new EC(\"secp256k1\");\n  }\n  return _curve;\n}\nexport class SigningKey {\n  constructor(privateKey) {\n    defineReadOnly(this, \"curve\", \"secp256k1\");\n    defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n    if (hexDataLength(this.privateKey) !== 32) {\n      logger.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n    }\n    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n    defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n    defineReadOnly(this, \"_isSigningKey\", true);\n  }\n  _addPoint(other) {\n    const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));\n    const p1 = getCurve().keyFromPublic(arrayify(other));\n    return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n  }\n  signDigest(digest) {\n    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    const digestBytes = arrayify(digest);\n    if (digestBytes.length !== 32) {\n      logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n    }\n    const signature = keyPair.sign(digestBytes, {\n      canonical: true\n    });\n    return splitSignature({\n      recoveryParam: signature.recoveryParam,\n      r: hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n      s: hexZeroPad(\"0x\" + signature.s.toString(16), 32)\n    });\n  }\n  computeSharedSecret(otherKey) {\n    const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n    return hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n  }\n  static isSigningKey(value) {\n    return !!(value && value._isSigningKey);\n  }\n}\nexport function recoverPublicKey(digest, signature) {\n  const sig = splitSignature(signature);\n  const rs = {\n    r: arrayify(sig.r),\n    s: arrayify(sig.s)\n  };\n  return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nexport function computePublicKey(key, compressed) {\n  const bytes = arrayify(key);\n  if (bytes.length === 32) {\n    const signingKey = new SigningKey(bytes);\n    if (compressed) {\n      return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n    }\n    return signingKey.publicKey;\n  } else if (bytes.length === 33) {\n    if (compressed) {\n      return hexlify(bytes);\n    }\n    return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n  } else if (bytes.length === 65) {\n    if (!compressed) {\n      return hexlify(bytes);\n    }\n    return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n  }\n  return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}","map":{"version":3,"names":["EC","arrayify","hexDataLength","hexlify","hexZeroPad","splitSignature","defineReadOnly","Logger","version","logger","_curve","getCurve","SigningKey","constructor","privateKey","throwArgumentError","keyPair","keyFromPrivate","getPublic","_addPoint","other","p0","keyFromPublic","publicKey","p1","pub","add","encodeCompressed","signDigest","digest","digestBytes","length","signature","sign","canonical","recoveryParam","r","toString","s","computeSharedSecret","otherKey","otherKeyPair","computePublicKey","derive","isSigningKey","value","_isSigningKey","recoverPublicKey","sig","rs","recoverPubKey","encode","key","compressed","bytes","signingKey"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\signing-key\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\n\nimport { EC } from \"./elliptic\";\n\nimport { arrayify, BytesLike, hexDataLength, hexlify, hexZeroPad, Signature, SignatureLike, splitSignature } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nlet _curve: EC = null\nfunction getCurve() {\n    if (!_curve) {\n        _curve = new EC(\"secp256k1\");\n    }\n    return _curve;\n}\n\nexport class SigningKey {\n\n    readonly curve: string;\n\n    readonly privateKey: string;\n    readonly publicKey: string;\n    readonly compressedPublicKey: string;\n\n    //readonly address: string;\n\n    readonly _isSigningKey: boolean;\n\n    constructor(privateKey: BytesLike) {\n        defineReadOnly(this, \"curve\", \"secp256k1\");\n\n        defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n        if (hexDataLength(this.privateKey) !== 32) {\n            logger.throwArgumentError(\"invalid private key\", \"privateKey\", \"[[ REDACTED ]]\");\n        }\n\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n\n        defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n        defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n\n        defineReadOnly(this, \"_isSigningKey\", true);\n    }\n\n    _addPoint(other: BytesLike): string {\n        const p0 =  getCurve().keyFromPublic(arrayify(this.publicKey));\n        const p1 =  getCurve().keyFromPublic(arrayify(other));\n        return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    }\n\n    signDigest(digest: BytesLike): Signature {\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        const digestBytes = arrayify(digest);\n        if (digestBytes.length !== 32) {\n            logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n        }\n        const signature = keyPair.sign(digestBytes, { canonical: true });\n        return splitSignature({\n            recoveryParam: signature.recoveryParam,\n            r: hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n            s: hexZeroPad(\"0x\" + signature.s.toString(16), 32),\n        })\n    }\n\n    computeSharedSecret(otherKey: BytesLike): string {\n        const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n        const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n        return hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    }\n\n    static isSigningKey(value: any): value is SigningKey {\n        return !!(value && value._isSigningKey);\n    }\n}\n\nexport function recoverPublicKey(digest: BytesLike, signature: SignatureLike): string {\n    const sig = splitSignature(signature);\n    const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };\n    return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\n\nexport function computePublicKey(key: BytesLike, compressed?: boolean): string {\n    const bytes = arrayify(key);\n\n    if (bytes.length === 32) {\n        const signingKey = new SigningKey(bytes);\n        if (compressed) {\n            return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n        }\n        return signingKey.publicKey;\n\n    } else if (bytes.length === 33) {\n        if (compressed) { return hexlify(bytes); }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n\n    } else if (bytes.length === 65) {\n        if (!compressed) { return hexlify(bytes); }\n        return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n    }\n\n    return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}