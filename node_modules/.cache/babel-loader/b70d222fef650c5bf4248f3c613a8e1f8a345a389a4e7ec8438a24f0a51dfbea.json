{"ast":null,"code":"\"use strict\";\n\nimport _assertThisInitialized from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ForkEvent, Provider } from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork as _getNetwork } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { poll } from \"@ethersproject/web\";\nimport bech32 from \"bech32\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { Formatter } from \"./formatter\";\n//////////////////////////////\n// Event Serializeing\nfunction checkTopic(topic) {\n  if (topic == null) {\n    return \"null\";\n  }\n  if (hexDataLength(topic) !== 32) {\n    logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n  }\n  return topic.toLowerCase();\n}\nfunction serializeTopics(topics) {\n  // Remove trailing null AND-topics; they are redundant\n  topics = topics.slice();\n  while (topics.length > 0 && topics[topics.length - 1] == null) {\n    topics.pop();\n  }\n  return topics.map(function (topic) {\n    if (Array.isArray(topic)) {\n      // Only track unique OR-topics\n      var unique = {};\n      topic.forEach(function (topic) {\n        unique[checkTopic(topic)] = true;\n      });\n      // The order of OR-topics does not matter\n      var sorted = Object.keys(unique);\n      sorted.sort();\n      return sorted.join(\"|\");\n    } else {\n      return checkTopic(topic);\n    }\n  }).join(\"&\");\n}\nfunction deserializeTopics(data) {\n  if (data === \"\") {\n    return [];\n  }\n  return data.split(/&/g).map(function (topic) {\n    if (topic === \"\") {\n      return [];\n    }\n    var comps = topic.split(\"|\").map(function (topic) {\n      return topic === \"null\" ? null : topic;\n    });\n    return comps.length === 1 ? comps[0] : comps;\n  });\n}\nfunction getEventTag(eventName) {\n  if (typeof eventName === \"string\") {\n    eventName = eventName.toLowerCase();\n    if (hexDataLength(eventName) === 32) {\n      return \"tx:\" + eventName;\n    }\n    if (eventName.indexOf(\":\") === -1) {\n      return eventName;\n    }\n  } else if (Array.isArray(eventName)) {\n    return \"filter:*:\" + serializeTopics(eventName);\n  } else if (ForkEvent.isForkEvent(eventName)) {\n    logger.warn(\"not implemented\");\n    throw new Error(\"not implemented\");\n  } else if (eventName && typeof eventName === \"object\") {\n    return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n  }\n  throw new Error(\"invalid event - \" + eventName);\n}\n//////////////////////////////\n// Helper Object\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction stall(duration) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, duration);\n  });\n}\n//////////////////////////////\n// Provider Object\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\nvar PollableEvents = [\"block\", \"network\", \"pending\", \"poll\"];\nexport var Event = /*#__PURE__*/function () {\n  function Event(tag, listener, once) {\n    _classCallCheck(this, Event);\n    defineReadOnly(this, \"tag\", tag);\n    defineReadOnly(this, \"listener\", listener);\n    defineReadOnly(this, \"once\", once);\n  }\n  _createClass(Event, [{\n    key: \"event\",\n    get: function get() {\n      switch (this.type) {\n        case \"tx\":\n          return this.hash;\n        case \"filter\":\n          return this.filter;\n      }\n      return this.tag;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.tag.split(\":\")[0];\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      var comps = this.tag.split(\":\");\n      if (comps[0] !== \"tx\") {\n        return null;\n      }\n      return comps[1];\n    }\n  }, {\n    key: \"filter\",\n    get: function get() {\n      var comps = this.tag.split(\":\");\n      if (comps[0] !== \"filter\") {\n        return null;\n      }\n      var address = comps[1];\n      var topics = deserializeTopics(comps[2]);\n      var filter = {};\n      if (topics.length > 0) {\n        filter.topics = topics;\n      }\n      if (address && address !== \"*\") {\n        filter.address = address;\n      }\n      return filter;\n    }\n  }, {\n    key: \"pollable\",\n    value: function pollable() {\n      return this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0;\n    }\n  }]);\n  return Event;\n}();\n;\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nvar coinInfos = {\n  \"0\": {\n    symbol: \"btc\",\n    p2pkh: 0x00,\n    p2sh: 0x05,\n    prefix: \"bc\"\n  },\n  \"2\": {\n    symbol: \"ltc\",\n    p2pkh: 0x30,\n    p2sh: 0x32,\n    prefix: \"ltc\"\n  },\n  \"3\": {\n    symbol: \"doge\",\n    p2pkh: 0x1e,\n    p2sh: 0x16\n  },\n  \"60\": {\n    symbol: \"eth\",\n    ilk: \"eth\"\n  },\n  \"61\": {\n    symbol: \"etc\",\n    ilk: \"eth\"\n  },\n  \"700\": {\n    symbol: \"xdai\",\n    ilk: \"eth\"\n  }\n};\nfunction bytes32ify(value) {\n  return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\nexport var Resolver = /*#__PURE__*/function () {\n  function Resolver(provider, address, name) {\n    _classCallCheck(this, Resolver);\n    defineReadOnly(this, \"provider\", provider);\n    defineReadOnly(this, \"name\", name);\n    defineReadOnly(this, \"address\", provider.formatter.address(address));\n  }\n  _createClass(Resolver, [{\n    key: \"_fetchBytes\",\n    value: function _fetchBytes(selector, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var transaction, result, offset, length;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // keccak256(\"addr(bytes32,uint256)\")\n              transaction = {\n                to: this.address,\n                data: hexConcat([selector, namehash(this.name), parameters || \"0x\"])\n              };\n              _context.prev = 1;\n              _context.next = 4;\n              return this.provider.call(transaction);\n            case 4:\n              result = _context.sent;\n              if (!(result === \"0x\")) {\n                _context.next = 7;\n                break;\n              }\n              return _context.abrupt(\"return\", null);\n            case 7:\n              offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n              length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n              return _context.abrupt(\"return\", hexDataSlice(result, offset + 32, offset + 32 + length));\n            case 12:\n              _context.prev = 12;\n              _context.t0 = _context[\"catch\"](1);\n              if (!(_context.t0.code === Logger.errors.CALL_EXCEPTION)) {\n                _context.next = 16;\n                break;\n              }\n              return _context.abrupt(\"return\", null);\n            case 16:\n              return _context.abrupt(\"return\", null);\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[1, 12]]);\n      }));\n    }\n  }, {\n    key: \"_getAddress\",\n    value: function _getAddress(coinType, hexBytes) {\n      var coinInfo = coinInfos[String(coinType)];\n      if (coinInfo == null) {\n        logger.throwError(\"unsupported coin type: \".concat(coinType), Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress(\".concat(coinType, \")\")\n        });\n      }\n      if (coinInfo.ilk === \"eth\") {\n        return this.provider.formatter.address(hexBytes);\n      }\n      var bytes = arrayify(hexBytes);\n      // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n      if (coinInfo.p2pkh != null) {\n        var p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n        if (p2pkh) {\n          var length = parseInt(p2pkh[1], 16);\n          if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n            return base58Encode(concat([[coinInfo.p2pkh], \"0x\" + p2pkh[2]]));\n          }\n        }\n      }\n      // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n      if (coinInfo.p2sh != null) {\n        var p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n        if (p2sh) {\n          var _length = parseInt(p2sh[1], 16);\n          if (p2sh[2].length === _length * 2 && _length >= 1 && _length <= 75) {\n            return base58Encode(concat([[coinInfo.p2sh], \"0x\" + p2sh[2]]));\n          }\n        }\n      }\n      // Bech32\n      if (coinInfo.prefix != null) {\n        var _length2 = bytes[1];\n        // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n        var _version = bytes[0];\n        if (_version === 0x00) {\n          if (_length2 !== 20 && _length2 !== 32) {\n            _version = -1;\n          }\n        } else {\n          _version = -1;\n        }\n        if (_version >= 0 && bytes.length === 2 + _length2 && _length2 >= 1 && _length2 <= 75) {\n          var words = bech32.toWords(bytes.slice(2));\n          words.unshift(_version);\n          return bech32.encode(coinInfo.prefix, words);\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(coinType) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var transaction, _hexBytes, hexBytes, address;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (coinType == null) {\n                coinType = 60;\n              }\n              // If Ethereum, use the standard `addr(bytes32)`\n              if (!(coinType === 60)) {\n                _context2.next = 17;\n                break;\n              }\n              _context2.prev = 2;\n              // keccak256(\"addr(bytes32)\")\n              transaction = {\n                to: this.address,\n                data: \"0x3b3b57de\" + namehash(this.name).substring(2)\n              };\n              _context2.next = 6;\n              return this.provider.call(transaction);\n            case 6:\n              _hexBytes = _context2.sent;\n              if (!(_hexBytes === \"0x\" || _hexBytes === HashZero)) {\n                _context2.next = 9;\n                break;\n              }\n              return _context2.abrupt(\"return\", null);\n            case 9:\n              return _context2.abrupt(\"return\", this.provider.formatter.callAddress(_hexBytes));\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](2);\n              if (!(_context2.t0.code === Logger.errors.CALL_EXCEPTION)) {\n                _context2.next = 16;\n                break;\n              }\n              return _context2.abrupt(\"return\", null);\n            case 16:\n              throw _context2.t0;\n            case 17:\n              _context2.next = 19;\n              return this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n            case 19:\n              hexBytes = _context2.sent;\n              if (!(hexBytes == null || hexBytes === \"0x\")) {\n                _context2.next = 22;\n                break;\n              }\n              return _context2.abrupt(\"return\", null);\n            case 22:\n              // Compute the address\n              address = this._getAddress(coinType, hexBytes);\n              if (address == null) {\n                logger.throwError(\"invalid or unsupported coin data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"getAddress(\".concat(coinType, \")\"),\n                  coinType: coinType,\n                  data: hexBytes\n                });\n              }\n              return _context2.abrupt(\"return\", address);\n            case 25:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[2, 12]]);\n      }));\n    }\n  }, {\n    key: \"getContentHash\",\n    value: function getContentHash() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var hexBytes, ipfs, length, swarm;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this._fetchBytes(\"0xbc1c58d1\");\n            case 2:\n              hexBytes = _context3.sent;\n              if (!(hexBytes == null || hexBytes === \"0x\")) {\n                _context3.next = 5;\n                break;\n              }\n              return _context3.abrupt(\"return\", null);\n            case 5:\n              // IPFS (CID: 1, Type: DAG-PB)\n              ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n              if (!ipfs) {\n                _context3.next = 10;\n                break;\n              }\n              length = parseInt(ipfs[3], 16);\n              if (!(ipfs[4].length === length * 2)) {\n                _context3.next = 10;\n                break;\n              }\n              return _context3.abrupt(\"return\", \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]));\n            case 10:\n              // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n              swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);\n              if (!swarm) {\n                _context3.next = 14;\n                break;\n              }\n              if (!(swarm[1].length === 32 * 2)) {\n                _context3.next = 14;\n                break;\n              }\n              return _context3.abrupt(\"return\", \"bzz:/\\/\" + swarm[1]);\n            case 14:\n              return _context3.abrupt(\"return\", logger.throwError(\"invalid or unsupported content hash data\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"getContentHash()\",\n                data: hexBytes\n              }));\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"getText\",\n    value: function getText(key) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var keyBytes, hexBytes;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              // The key encoded as parameter to fetchBytes\n              keyBytes = toUtf8Bytes(key); // The nodehash consumes the first slot, so the string pointer targets\n              // offset 64, with the length at offset 64 and data starting at offset 96\n              keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);\n              // Pad to word-size (32 bytes)\n              if (keyBytes.length % 32 !== 0) {\n                keyBytes = concat([keyBytes, hexZeroPad(\"0x\", 32 - key.length % 32)]);\n              }\n              _context4.next = 5;\n              return this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n            case 5:\n              hexBytes = _context4.sent;\n              if (!(hexBytes == null || hexBytes === \"0x\")) {\n                _context4.next = 8;\n                break;\n              }\n              return _context4.abrupt(\"return\", null);\n            case 8:\n              return _context4.abrupt(\"return\", toUtf8String(hexBytes));\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n    }\n  }]);\n  return Resolver;\n}();\nvar defaultFormatter = null;\nvar nextPollId = 1;\nexport var BaseProvider = /*#__PURE__*/function (_Provider) {\n  _inherits(BaseProvider, _Provider);\n  var _super = _createSuper(BaseProvider);\n  /**\n   *  ready\n   *\n   *  A Promise<Network> that resolves only once the provider is ready.\n   *\n   *  Sub-classes that call the super with a network without a chainId\n   *  MUST set this. Standard named networks have a known chainId.\n   *\n   */\n  function BaseProvider(network) {\n    var _this;\n    _classCallCheck(this, BaseProvider);\n    logger.checkNew(this instanceof BaseProvider ? this.constructor : void 0, Provider);\n    _this = _super.call(this);\n    // Events being listened to\n    _this._events = [];\n    _this._emitted = {\n      block: -2\n    };\n    _this.formatter = (this instanceof BaseProvider ? this.constructor : void 0).getFormatter();\n    // If network is any, this Provider allows the underlying\n    // network to change dynamically, and we auto-detect the\n    // current network\n    defineReadOnly(_assertThisInitialized(_this), \"anyNetwork\", network === \"any\");\n    if (_this.anyNetwork) {\n      network = _this.detectNetwork();\n    }\n    if (network instanceof Promise) {\n      _this._networkPromise = network;\n      // Squash any \"unhandled promise\" errors; that do not need to be handled\n      network.catch(function (error) {});\n      // Trigger initial network setting (async)\n      _this._ready().catch(function (error) {});\n    } else {\n      var knownNetwork = getStatic(this instanceof BaseProvider ? this.constructor : void 0, \"getNetwork\")(network);\n      if (knownNetwork) {\n        defineReadOnly(_assertThisInitialized(_this), \"_network\", knownNetwork);\n        _this.emit(\"network\", knownNetwork, null);\n      } else {\n        logger.throwArgumentError(\"invalid network\", \"network\", network);\n      }\n    }\n    _this._maxInternalBlockNumber = -1024;\n    _this._lastBlockNumber = -2;\n    _this._pollingInterval = 4000;\n    _this._fastQueryDate = 0;\n    return _this;\n  }\n  _createClass(BaseProvider, [{\n    key: \"_ready\",\n    value: function _ready() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var network;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!(this._network == null)) {\n                _context5.next = 17;\n                break;\n              }\n              network = null;\n              if (!this._networkPromise) {\n                _context5.next = 11;\n                break;\n              }\n              _context5.prev = 3;\n              _context5.next = 6;\n              return this._networkPromise;\n            case 6:\n              network = _context5.sent;\n              _context5.next = 11;\n              break;\n            case 9:\n              _context5.prev = 9;\n              _context5.t0 = _context5[\"catch\"](3);\n            case 11:\n              if (!(network == null)) {\n                _context5.next = 15;\n                break;\n              }\n              _context5.next = 14;\n              return this.detectNetwork();\n            case 14:\n              network = _context5.sent;\n            case 15:\n              // This should never happen; every Provider sub-class should have\n              // suggested a network by here (or have thrown).\n              if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n              }\n              // Possible this call stacked so do not call defineReadOnly again\n              if (this._network == null) {\n                if (this.anyNetwork) {\n                  this._network = network;\n                } else {\n                  defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n              }\n            case 17:\n              return _context5.abrupt(\"return\", this._network);\n            case 18:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[3, 9]]);\n      }));\n    }\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is refelcted); otherwise this cannot change\n  }, {\n    key: \"ready\",\n    get: function get() {\n      var _this2 = this;\n      return poll(function () {\n        return _this2._ready().then(function (network) {\n          return network;\n        }, function (error) {\n          // If the network isn't running yet, we will wait\n          if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n            return undefined;\n          }\n          throw error;\n        });\n      });\n    }\n    // @TODO: Remove this and just create a singleton formatter\n  }, {\n    key: \"_getInternalBlockNumber\",\n    value:\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    function _getInternalBlockNumber(maxAge) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var _this3 = this;\n        var internalBlockNumber, result, reqTime, checkInternalBlockNumber;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return this._ready();\n            case 2:\n              if (!(maxAge > 0)) {\n                _context6.next = 20;\n                break;\n              }\n            case 3:\n              if (!this._internalBlockNumber) {\n                _context6.next = 20;\n                break;\n              }\n              // ...\"remember\" which fetch we started with\n              internalBlockNumber = this._internalBlockNumber;\n              _context6.prev = 5;\n              _context6.next = 8;\n              return internalBlockNumber;\n            case 8:\n              result = _context6.sent;\n              if (!(getTime() - result.respTime <= maxAge)) {\n                _context6.next = 11;\n                break;\n              }\n              return _context6.abrupt(\"return\", result.blockNumber);\n            case 11:\n              return _context6.abrupt(\"break\", 20);\n            case 14:\n              _context6.prev = 14;\n              _context6.t0 = _context6[\"catch\"](5);\n              if (!(this._internalBlockNumber === internalBlockNumber)) {\n                _context6.next = 18;\n                break;\n              }\n              return _context6.abrupt(\"break\", 20);\n            case 18:\n              _context6.next = 3;\n              break;\n            case 20:\n              reqTime = getTime();\n              checkInternalBlockNumber = resolveProperties({\n                blockNumber: this.perform(\"getBlockNumber\", {}),\n                networkError: this.getNetwork().then(function (network) {\n                  return null;\n                }, function (error) {\n                  return error;\n                })\n              }).then(function (_ref) {\n                var blockNumber = _ref.blockNumber,\n                  networkError = _ref.networkError;\n                if (networkError) {\n                  // Unremember this bad internal block number\n                  if (_this3._internalBlockNumber === checkInternalBlockNumber) {\n                    _this3._internalBlockNumber = null;\n                  }\n                  throw networkError;\n                }\n                var respTime = getTime();\n                blockNumber = BigNumber.from(blockNumber).toNumber();\n                if (blockNumber < _this3._maxInternalBlockNumber) {\n                  blockNumber = _this3._maxInternalBlockNumber;\n                }\n                _this3._maxInternalBlockNumber = blockNumber;\n                _this3._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n                return {\n                  blockNumber: blockNumber,\n                  reqTime: reqTime,\n                  respTime: respTime\n                };\n              });\n              this._internalBlockNumber = checkInternalBlockNumber;\n              // Swallow unhandled exceptions; if needed they are handled else where\n              checkInternalBlockNumber.catch(function (error) {\n                // Don't null the dead (rejected) fetch, if it has already been updated\n                if (_this3._internalBlockNumber === checkInternalBlockNumber) {\n                  _this3._internalBlockNumber = null;\n                }\n              });\n              _context6.next = 26;\n              return checkInternalBlockNumber;\n            case 26:\n              return _context6.abrupt(\"return\", _context6.sent.blockNumber);\n            case 27:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[5, 14]]);\n      }));\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var _this4 = this;\n        var pollId, runners, blockNumber, i;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              pollId = nextPollId++; // Track all running promises, so we can trigger a post-poll once they are complete\n              runners = [];\n              blockNumber = null;\n              _context7.prev = 3;\n              _context7.next = 6;\n              return this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n            case 6:\n              blockNumber = _context7.sent;\n              _context7.next = 13;\n              break;\n            case 9:\n              _context7.prev = 9;\n              _context7.t0 = _context7[\"catch\"](3);\n              this.emit(\"error\", _context7.t0);\n              return _context7.abrupt(\"return\");\n            case 13:\n              this._setFastBlockNumber(blockNumber);\n              // Emit a poll event after we have the latest (fast) block number\n              this.emit(\"poll\", pollId, blockNumber);\n              // If the block has not changed, meh.\n              if (!(blockNumber === this._lastBlockNumber)) {\n                _context7.next = 18;\n                break;\n              }\n              this.emit(\"didPoll\", pollId);\n              return _context7.abrupt(\"return\");\n            case 18:\n              // First polling cycle, trigger a \"block\" events\n              if (this._emitted.block === -2) {\n                this._emitted.block = blockNumber - 1;\n              }\n              if (Math.abs(this._emitted.block - blockNumber) > 1000) {\n                logger.warn(\"network block skew detected; skipping block events (emitted=\".concat(this._emitted.block, \" blockNumber\").concat(blockNumber, \")\"));\n                this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                  blockNumber: blockNumber,\n                  event: \"blockSkew\",\n                  previousBlockNumber: this._emitted.block\n                }));\n                this.emit(\"block\", blockNumber);\n              } else {\n                // Notify all listener for each block that has passed\n                for (i = this._emitted.block + 1; i <= blockNumber; i++) {\n                  this.emit(\"block\", i);\n                }\n              }\n              // The emitted block was updated, check for obsolete events\n              if (this._emitted.block !== blockNumber) {\n                this._emitted.block = blockNumber;\n                Object.keys(this._emitted).forEach(function (key) {\n                  // The block event does not expire\n                  if (key === \"block\") {\n                    return;\n                  }\n                  // The block we were at when we emitted this event\n                  var eventBlockNumber = _this4._emitted[key];\n                  // We cannot garbage collect pending transactions or blocks here\n                  // They should be garbage collected by the Provider when setting\n                  // \"pending\" events\n                  if (eventBlockNumber === \"pending\") {\n                    return;\n                  }\n                  // Evict any transaction hashes or block hashes over 12 blocks\n                  // old, since they should not return null anyways\n                  if (blockNumber - eventBlockNumber > 12) {\n                    delete _this4._emitted[key];\n                  }\n                });\n              }\n              // First polling cycle\n              if (this._lastBlockNumber === -2) {\n                this._lastBlockNumber = blockNumber - 1;\n              }\n              // Find all transaction hashes we are waiting on\n              this._events.forEach(function (event) {\n                switch (event.type) {\n                  case \"tx\":\n                    {\n                      var hash = event.hash;\n                      var runner = _this4.getTransactionReceipt(hash).then(function (receipt) {\n                        if (!receipt || receipt.blockNumber == null) {\n                          return null;\n                        }\n                        _this4._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        _this4.emit(hash, receipt);\n                        return null;\n                      }).catch(function (error) {\n                        _this4.emit(\"error\", error);\n                      });\n                      runners.push(runner);\n                      break;\n                    }\n                  case \"filter\":\n                    {\n                      var filter = event.filter;\n                      filter.fromBlock = _this4._lastBlockNumber + 1;\n                      filter.toBlock = blockNumber;\n                      var _runner = _this4.getLogs(filter).then(function (logs) {\n                        if (logs.length === 0) {\n                          return;\n                        }\n                        logs.forEach(function (log) {\n                          _this4._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                          _this4._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                          _this4.emit(filter, log);\n                        });\n                      }).catch(function (error) {\n                        _this4.emit(\"error\", error);\n                      });\n                      runners.push(_runner);\n                      break;\n                    }\n                }\n              });\n              this._lastBlockNumber = blockNumber;\n              // Once all events for this loop have been processed, emit \"didPoll\"\n              Promise.all(runners).then(function () {\n                _this4.emit(\"didPoll\", pollId);\n              }).catch(function (error) {\n                _this4.emit(\"error\", error);\n              });\n              return _context7.abrupt(\"return\");\n            case 26:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[3, 9]]);\n      }));\n    }\n    // Deprecated; do not use this\n  }, {\n    key: \"resetEventsBlock\",\n    value: function resetEventsBlock(blockNumber) {\n      this._lastBlockNumber = blockNumber - 1;\n      if (this.polling) {\n        this.poll();\n      }\n    }\n  }, {\n    key: \"network\",\n    get: function get() {\n      return this._network;\n    }\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n  }, {\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              return _context8.abrupt(\"return\", logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"provider.detectNetwork\"\n              }));\n            case 1:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8);\n      }));\n    }\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var network, currentNetwork, error;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return this._ready();\n            case 2:\n              network = _context9.sent;\n              _context9.next = 5;\n              return this.detectNetwork();\n            case 5:\n              currentNetwork = _context9.sent;\n              if (!(network.chainId !== currentNetwork.chainId)) {\n                _context9.next = 23;\n                break;\n              }\n              if (!this.anyNetwork) {\n                _context9.next = 20;\n                break;\n              }\n              this._network = currentNetwork;\n              // Reset all internal block number guards and caches\n              this._lastBlockNumber = -2;\n              this._fastBlockNumber = null;\n              this._fastBlockNumberPromise = null;\n              this._fastQueryDate = 0;\n              this._emitted.block = -2;\n              this._maxInternalBlockNumber = -1024;\n              this._internalBlockNumber = null;\n              // The \"network\" event MUST happen before this method resolves\n              // so any events have a chance to unregister, so we stall an\n              // additional event loop before returning from /this/ call\n              this.emit(\"network\", currentNetwork, network);\n              _context9.next = 19;\n              return stall(0);\n            case 19:\n              return _context9.abrupt(\"return\", this._network);\n            case 20:\n              error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n              });\n              this.emit(\"error\", error);\n              throw error;\n            case 23:\n              return _context9.abrupt(\"return\", network);\n            case 24:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n    }\n  }, {\n    key: \"blockNumber\",\n    get: function get() {\n      var _this5 = this;\n      this._getInternalBlockNumber(100 + this.pollingInterval / 2).then(function (blockNumber) {\n        _this5._setFastBlockNumber(blockNumber);\n      }, function (error) {});\n      return this._fastBlockNumber != null ? this._fastBlockNumber : -1;\n    }\n  }, {\n    key: \"polling\",\n    get: function get() {\n      return this._poller != null;\n    },\n    set: function set(value) {\n      var _this6 = this;\n      if (value && !this._poller) {\n        this._poller = setInterval(function () {\n          _this6.poll();\n        }, this.pollingInterval);\n        if (!this._bootstrapPoll) {\n          this._bootstrapPoll = setTimeout(function () {\n            _this6.poll();\n            // We block additional polls until the polling interval\n            // is done, to prevent overwhelming the poll function\n            _this6._bootstrapPoll = setTimeout(function () {\n              // If polling was disabled, something may require a poke\n              // since starting the bootstrap poll and it was disabled\n              if (!_this6._poller) {\n                _this6.poll();\n              }\n              // Clear out the bootstrap so we can do another\n              _this6._bootstrapPoll = null;\n            }, _this6.pollingInterval);\n          }, 0);\n        }\n      } else if (!value && this._poller) {\n        clearInterval(this._poller);\n        this._poller = null;\n      }\n    }\n  }, {\n    key: \"pollingInterval\",\n    get: function get() {\n      return this._pollingInterval;\n    },\n    set: function set(value) {\n      var _this7 = this;\n      if (typeof value !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n        throw new Error(\"invalid polling interval\");\n      }\n      this._pollingInterval = value;\n      if (this._poller) {\n        clearInterval(this._poller);\n        this._poller = setInterval(function () {\n          _this7.poll();\n        }, this._pollingInterval);\n      }\n    }\n  }, {\n    key: \"_getFastBlockNumber\",\n    value: function _getFastBlockNumber() {\n      var _this8 = this;\n      var now = getTime();\n      // Stale block number, request a newer value\n      if (now - this._fastQueryDate > 2 * this._pollingInterval) {\n        this._fastQueryDate = now;\n        this._fastBlockNumberPromise = this.getBlockNumber().then(function (blockNumber) {\n          if (_this8._fastBlockNumber == null || blockNumber > _this8._fastBlockNumber) {\n            _this8._fastBlockNumber = blockNumber;\n          }\n          return _this8._fastBlockNumber;\n        });\n      }\n      return this._fastBlockNumberPromise;\n    }\n  }, {\n    key: \"_setFastBlockNumber\",\n    value: function _setFastBlockNumber(blockNumber) {\n      // Older block, maybe a stale request\n      if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {\n        return;\n      }\n      // Update the time we updated the blocknumber\n      this._fastQueryDate = getTime();\n      // Newer block number, use  it\n      if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n        this._fastBlockNumber = blockNumber;\n        this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n      }\n    }\n  }, {\n    key: \"waitForTransaction\",\n    value: function waitForTransaction(transactionHash, confirmations, timeout) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              return _context10.abrupt(\"return\", this._waitForTransaction(transactionHash, confirmations == null ? 1 : confirmations, timeout || 0, null));\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this);\n      }));\n    }\n  }, {\n    key: \"_waitForTransaction\",\n    value: function _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        var _this9 = this;\n        var receipt;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return this.getTransactionReceipt(transactionHash);\n            case 2:\n              receipt = _context13.sent;\n              if (!((receipt ? receipt.confirmations : 0) >= confirmations)) {\n                _context13.next = 5;\n                break;\n              }\n              return _context13.abrupt(\"return\", receipt);\n            case 5:\n              return _context13.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var cancelFuncs = [];\n                var done = false;\n                var alreadyDone = function alreadyDone() {\n                  if (done) {\n                    return true;\n                  }\n                  done = true;\n                  cancelFuncs.forEach(function (func) {\n                    func();\n                  });\n                  return false;\n                };\n                var minedHandler = function minedHandler(receipt) {\n                  if (receipt.confirmations < confirmations) {\n                    return;\n                  }\n                  if (alreadyDone()) {\n                    return;\n                  }\n                  resolve(receipt);\n                };\n                _this9.on(transactionHash, minedHandler);\n                cancelFuncs.push(function () {\n                  _this9.removeListener(transactionHash, minedHandler);\n                });\n                if (replaceable) {\n                  var lastBlockNumber = replaceable.startBlock;\n                  var scannedBlock = null;\n                  var replaceHandler = function replaceHandler(blockNumber) {\n                    return __awaiter(_this9, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n                      var _this10 = this;\n                      return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n                        while (1) switch (_context12.prev = _context12.next) {\n                          case 0:\n                            if (!done) {\n                              _context12.next = 2;\n                              break;\n                            }\n                            return _context12.abrupt(\"return\");\n                          case 2:\n                            _context12.next = 4;\n                            return stall(1000);\n                          case 4:\n                            this.getTransactionCount(replaceable.from).then(function (nonce) {\n                              return __awaiter(_this10, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n                                var mined, block, ti, tx, _receipt, reason;\n                                return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n                                  while (1) switch (_context11.prev = _context11.next) {\n                                    case 0:\n                                      if (!done) {\n                                        _context11.next = 2;\n                                        break;\n                                      }\n                                      return _context11.abrupt(\"return\");\n                                    case 2:\n                                      if (!(nonce <= replaceable.nonce)) {\n                                        _context11.next = 6;\n                                        break;\n                                      }\n                                      lastBlockNumber = blockNumber;\n                                      _context11.next = 41;\n                                      break;\n                                    case 6:\n                                      _context11.next = 8;\n                                      return this.getTransaction(transactionHash);\n                                    case 8:\n                                      mined = _context11.sent;\n                                      if (!(mined && mined.blockNumber != null)) {\n                                        _context11.next = 11;\n                                        break;\n                                      }\n                                      return _context11.abrupt(\"return\");\n                                    case 11:\n                                      // First time scanning. We start a little earlier for some\n                                      // wiggle room here to handle the eventually consistent nature\n                                      // of blockchain (e.g. the getTransactionCount was for a\n                                      // different block)\n                                      if (scannedBlock == null) {\n                                        scannedBlock = lastBlockNumber - 3;\n                                        if (scannedBlock < replaceable.startBlock) {\n                                          scannedBlock = replaceable.startBlock;\n                                        }\n                                      }\n                                    case 12:\n                                      if (!(scannedBlock <= blockNumber)) {\n                                        _context11.next = 41;\n                                        break;\n                                      }\n                                      if (!done) {\n                                        _context11.next = 15;\n                                        break;\n                                      }\n                                      return _context11.abrupt(\"return\");\n                                    case 15:\n                                      _context11.next = 17;\n                                      return this.getBlockWithTransactions(scannedBlock);\n                                    case 17:\n                                      block = _context11.sent;\n                                      ti = 0;\n                                    case 19:\n                                      if (!(ti < block.transactions.length)) {\n                                        _context11.next = 38;\n                                        break;\n                                      }\n                                      tx = block.transactions[ti]; // Successfully mined!\n                                      if (!(tx.hash === transactionHash)) {\n                                        _context11.next = 23;\n                                        break;\n                                      }\n                                      return _context11.abrupt(\"return\");\n                                    case 23:\n                                      if (!(tx.from === replaceable.from && tx.nonce === replaceable.nonce)) {\n                                        _context11.next = 35;\n                                        break;\n                                      }\n                                      if (!done) {\n                                        _context11.next = 26;\n                                        break;\n                                      }\n                                      return _context11.abrupt(\"return\");\n                                    case 26:\n                                      _context11.next = 28;\n                                      return this.waitForTransaction(tx.hash, confirmations);\n                                    case 28:\n                                      _receipt = _context11.sent;\n                                      if (!alreadyDone()) {\n                                        _context11.next = 31;\n                                        break;\n                                      }\n                                      return _context11.abrupt(\"return\");\n                                    case 31:\n                                      // The reason we were replaced\n                                      reason = \"replaced\";\n                                      if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                        reason = \"repriced\";\n                                      } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                        reason = \"cancelled\";\n                                      }\n                                      // Explain why we were replaced\n                                      reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                        cancelled: reason === \"replaced\" || reason === \"cancelled\",\n                                        reason: reason,\n                                        replacement: this._wrapTransaction(tx),\n                                        hash: transactionHash,\n                                        receipt: _receipt\n                                      }));\n                                      return _context11.abrupt(\"return\");\n                                    case 35:\n                                      ti++;\n                                      _context11.next = 19;\n                                      break;\n                                    case 38:\n                                      scannedBlock++;\n                                      _context11.next = 12;\n                                      break;\n                                    case 41:\n                                      if (!done) {\n                                        _context11.next = 43;\n                                        break;\n                                      }\n                                      return _context11.abrupt(\"return\");\n                                    case 43:\n                                      this.once(\"block\", replaceHandler);\n                                    case 44:\n                                    case \"end\":\n                                      return _context11.stop();\n                                  }\n                                }, _callee11, this);\n                              }));\n                            }, function (error) {\n                              if (done) {\n                                return;\n                              }\n                              _this10.once(\"block\", replaceHandler);\n                            });\n                          case 5:\n                          case \"end\":\n                            return _context12.stop();\n                        }\n                      }, _callee12, this);\n                    }));\n                  };\n                  if (done) {\n                    return;\n                  }\n                  _this9.once(\"block\", replaceHandler);\n                  cancelFuncs.push(function () {\n                    _this9.removeListener(\"block\", replaceHandler);\n                  });\n                }\n                if (typeof timeout === \"number\" && timeout > 0) {\n                  var timer = setTimeout(function () {\n                    if (alreadyDone()) {\n                      return;\n                    }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, {\n                      timeout: timeout\n                    }));\n                  }, timeout);\n                  if (timer.unref) {\n                    timer.unref();\n                  }\n                  cancelFuncs.push(function () {\n                    clearTimeout(timer);\n                  });\n                }\n              }));\n            case 6:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n    }\n  }, {\n    key: \"getBlockNumber\",\n    value: function getBlockNumber() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              return _context14.abrupt(\"return\", this._getInternalBlockNumber(0));\n            case 1:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }));\n    }\n  }, {\n    key: \"getGasPrice\",\n    value: function getGasPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              _context15.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context15.next = 4;\n              return this.perform(\"getGasPrice\", {});\n            case 4:\n              result = _context15.sent;\n              _context15.prev = 5;\n              return _context15.abrupt(\"return\", BigNumber.from(result));\n            case 9:\n              _context15.prev = 9;\n              _context15.t0 = _context15[\"catch\"](5);\n              return _context15.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result: result,\n                error: _context15.t0\n              }));\n            case 12:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15, this, [[5, 9]]);\n      }));\n    }\n  }, {\n    key: \"getBalance\",\n    value: function getBalance(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context16.next = 4;\n              return resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n              });\n            case 4:\n              params = _context16.sent;\n              _context16.next = 7;\n              return this.perform(\"getBalance\", params);\n            case 7:\n              result = _context16.sent;\n              _context16.prev = 8;\n              return _context16.abrupt(\"return\", BigNumber.from(result));\n            case 12:\n              _context16.prev = 12;\n              _context16.t0 = _context16[\"catch\"](8);\n              return _context16.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params: params,\n                result: result,\n                error: _context16.t0\n              }));\n            case 15:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee16, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getTransactionCount\",\n    value: function getTransactionCount(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context17.next = 4;\n              return resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n              });\n            case 4:\n              params = _context17.sent;\n              _context17.next = 7;\n              return this.perform(\"getTransactionCount\", params);\n            case 7:\n              result = _context17.sent;\n              _context17.prev = 8;\n              return _context17.abrupt(\"return\", BigNumber.from(result).toNumber());\n            case 12:\n              _context17.prev = 12;\n              _context17.t0 = _context17[\"catch\"](8);\n              return _context17.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params: params,\n                result: result,\n                error: _context17.t0\n              }));\n            case 15:\n            case \"end\":\n              return _context17.stop();\n          }\n        }, _callee17, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getCode\",\n    value: function getCode(addressOrName, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context18.next = 4;\n              return resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag)\n              });\n            case 4:\n              params = _context18.sent;\n              _context18.next = 7;\n              return this.perform(\"getCode\", params);\n            case 7:\n              result = _context18.sent;\n              _context18.prev = 8;\n              return _context18.abrupt(\"return\", hexlify(result));\n            case 12:\n              _context18.prev = 12;\n              _context18.t0 = _context18[\"catch\"](8);\n              return _context18.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params: params,\n                result: result,\n                error: _context18.t0\n              }));\n            case 15:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"getStorageAt\",\n    value: function getStorageAt(addressOrName, position, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              _context19.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context19.next = 4;\n              return resolveProperties({\n                address: this._getAddress(addressOrName),\n                blockTag: this._getBlockTag(blockTag),\n                position: Promise.resolve(position).then(function (p) {\n                  return hexValue(p);\n                })\n              });\n            case 4:\n              params = _context19.sent;\n              _context19.next = 7;\n              return this.perform(\"getStorageAt\", params);\n            case 7:\n              result = _context19.sent;\n              _context19.prev = 8;\n              return _context19.abrupt(\"return\", hexlify(result));\n            case 12:\n              _context19.prev = 12;\n              _context19.t0 = _context19[\"catch\"](8);\n              return _context19.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params: params,\n                result: result,\n                error: _context19.t0\n              }));\n            case 15:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19, this, [[8, 12]]);\n      }));\n    }\n    // This should be called by any subclass wrapping a TransactionResponse\n  }, {\n    key: \"_wrapTransaction\",\n    value: function _wrapTransaction(tx, hash, startBlock) {\n      var _this11 = this;\n      if (hash != null && hexDataLength(hash) !== 32) {\n        throw new Error(\"invalid response - sendTransaction\");\n      }\n      var result = tx;\n      // Check the hash we expect is the same as the hash the server reported\n      if (hash != null && tx.hash !== hash) {\n        logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, {\n          expectedHash: tx.hash,\n          returnedHash: hash\n        });\n      }\n      result.wait = function (confirms, timeout) {\n        return __awaiter(_this11, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n          var replacement, receipt;\n          return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n            while (1) switch (_context20.prev = _context20.next) {\n              case 0:\n                if (confirms == null) {\n                  confirms = 1;\n                }\n                if (timeout == null) {\n                  timeout = 0;\n                }\n                // Get the details to detect replacement\n                replacement = undefined;\n                if (confirms !== 0 && startBlock != null) {\n                  replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock: startBlock\n                  };\n                }\n                _context20.next = 6;\n                return this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n              case 6:\n                receipt = _context20.sent;\n                if (!(receipt == null && confirms === 0)) {\n                  _context20.next = 9;\n                  break;\n                }\n                return _context20.abrupt(\"return\", null);\n              case 9:\n                // No longer pending, allow the polling loop to garbage collect this\n                this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n                if (receipt.status === 0) {\n                  logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                  });\n                }\n                return _context20.abrupt(\"return\", receipt);\n              case 12:\n              case \"end\":\n                return _context20.stop();\n            }\n          }, _callee20, this);\n        }));\n      };\n      return result;\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(signedTransaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n        var hexTx, tx, blockNumber, hash;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context21.next = 4;\n              return Promise.resolve(signedTransaction).then(function (t) {\n                return hexlify(t);\n              });\n            case 4:\n              hexTx = _context21.sent;\n              tx = this.formatter.transaction(signedTransaction);\n              _context21.next = 8;\n              return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            case 8:\n              blockNumber = _context21.sent;\n              _context21.prev = 9;\n              _context21.next = 12;\n              return this.perform(\"sendTransaction\", {\n                signedTransaction: hexTx\n              });\n            case 12:\n              hash = _context21.sent;\n              return _context21.abrupt(\"return\", this._wrapTransaction(tx, hash, blockNumber));\n            case 16:\n              _context21.prev = 16;\n              _context21.t0 = _context21[\"catch\"](9);\n              _context21.t0.transaction = tx;\n              _context21.t0.transactionHash = tx.hash;\n              throw _context21.t0;\n            case 21:\n            case \"end\":\n              return _context21.stop();\n          }\n        }, _callee21, this, [[9, 16]]);\n      }));\n    }\n  }, {\n    key: \"_getTransactionRequest\",\n    value: function _getTransactionRequest(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {\n        var _this12 = this;\n        var values, tx;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.next = 2;\n              return transaction;\n            case 2:\n              values = _context22.sent;\n              tx = {};\n              [\"from\", \"to\"].forEach(function (key) {\n                if (values[key] == null) {\n                  return;\n                }\n                tx[key] = Promise.resolve(values[key]).then(function (v) {\n                  return v ? _this12._getAddress(v) : null;\n                });\n              });\n              [\"gasLimit\", \"gasPrice\", \"value\"].forEach(function (key) {\n                if (values[key] == null) {\n                  return;\n                }\n                tx[key] = Promise.resolve(values[key]).then(function (v) {\n                  return v ? BigNumber.from(v) : null;\n                });\n              });\n              [\"type\"].forEach(function (key) {\n                if (values[key] == null) {\n                  return;\n                }\n                tx[key] = Promise.resolve(values[key]).then(function (v) {\n                  return v != null ? v : null;\n                });\n              });\n              if (values.accessList) {\n                tx.accessList = this.formatter.accessList(values.accessList);\n              }\n              [\"data\"].forEach(function (key) {\n                if (values[key] == null) {\n                  return;\n                }\n                tx[key] = Promise.resolve(values[key]).then(function (v) {\n                  return v ? hexlify(v) : null;\n                });\n              });\n              _context22.t0 = this.formatter;\n              _context22.next = 12;\n              return resolveProperties(tx);\n            case 12:\n              _context22.t1 = _context22.sent;\n              return _context22.abrupt(\"return\", _context22.t0.transactionRequest.call(_context22.t0, _context22.t1));\n            case 14:\n            case \"end\":\n              return _context22.stop();\n          }\n        }, _callee22, this);\n      }));\n    }\n  }, {\n    key: \"_getFilter\",\n    value: function _getFilter(filter) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n        var _this13 = this;\n        var result;\n        return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n          while (1) switch (_context23.prev = _context23.next) {\n            case 0:\n              _context23.next = 2;\n              return filter;\n            case 2:\n              filter = _context23.sent;\n              result = {};\n              if (filter.address != null) {\n                result.address = this._getAddress(filter.address);\n              }\n              [\"blockHash\", \"topics\"].forEach(function (key) {\n                if (filter[key] == null) {\n                  return;\n                }\n                result[key] = filter[key];\n              });\n              [\"fromBlock\", \"toBlock\"].forEach(function (key) {\n                if (filter[key] == null) {\n                  return;\n                }\n                result[key] = _this13._getBlockTag(filter[key]);\n              });\n              _context23.t0 = this.formatter;\n              _context23.next = 10;\n              return resolveProperties(result);\n            case 10:\n              _context23.t1 = _context23.sent;\n              return _context23.abrupt(\"return\", _context23.t0.filter.call(_context23.t0, _context23.t1));\n            case 12:\n            case \"end\":\n              return _context23.stop();\n          }\n        }, _callee23, this);\n      }));\n    }\n  }, {\n    key: \"call\",\n    value: function call(transaction, blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) switch (_context24.prev = _context24.next) {\n            case 0:\n              _context24.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context24.next = 4;\n              return resolveProperties({\n                transaction: this._getTransactionRequest(transaction),\n                blockTag: this._getBlockTag(blockTag)\n              });\n            case 4:\n              params = _context24.sent;\n              _context24.next = 7;\n              return this.perform(\"call\", params);\n            case 7:\n              result = _context24.sent;\n              _context24.prev = 8;\n              return _context24.abrupt(\"return\", hexlify(result));\n            case 12:\n              _context24.prev = 12;\n              _context24.t0 = _context24[\"catch\"](8);\n              return _context24.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params: params,\n                result: result,\n                error: _context24.t0\n              }));\n            case 15:\n            case \"end\":\n              return _context24.stop();\n          }\n        }, _callee24, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"estimateGas\",\n    value: function estimateGas(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) switch (_context25.prev = _context25.next) {\n            case 0:\n              _context25.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context25.next = 4;\n              return resolveProperties({\n                transaction: this._getTransactionRequest(transaction)\n              });\n            case 4:\n              params = _context25.sent;\n              _context25.next = 7;\n              return this.perform(\"estimateGas\", params);\n            case 7:\n              result = _context25.sent;\n              _context25.prev = 8;\n              return _context25.abrupt(\"return\", BigNumber.from(result));\n            case 12:\n              _context25.prev = 12;\n              _context25.t0 = _context25[\"catch\"](8);\n              return _context25.abrupt(\"return\", logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params: params,\n                result: result,\n                error: _context25.t0\n              }));\n            case 15:\n            case \"end\":\n              return _context25.stop();\n          }\n        }, _callee25, this, [[8, 12]]);\n      }));\n    }\n  }, {\n    key: \"_getAddress\",\n    value: function _getAddress(addressOrName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {\n        var address;\n        return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n          while (1) switch (_context26.prev = _context26.next) {\n            case 0:\n              _context26.next = 2;\n              return this.resolveName(addressOrName);\n            case 2:\n              address = _context26.sent;\n              if (address == null) {\n                logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"resolveName(\".concat(JSON.stringify(addressOrName), \")\")\n                });\n              }\n              return _context26.abrupt(\"return\", address);\n            case 5:\n            case \"end\":\n              return _context26.stop();\n          }\n        }, _callee26, this);\n      }));\n    }\n  }, {\n    key: \"_getBlock\",\n    value: function _getBlock(blockHashOrBlockTag, includeTransactions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {\n        var _this14 = this;\n        var blockNumber, params;\n        return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n          while (1) switch (_context28.prev = _context28.next) {\n            case 0:\n              _context28.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context28.next = 4;\n              return blockHashOrBlockTag;\n            case 4:\n              blockHashOrBlockTag = _context28.sent;\n              // If blockTag is a number (not \"latest\", etc), this is the block number\n              blockNumber = -128;\n              params = {\n                includeTransactions: !!includeTransactions\n              };\n              if (!isHexString(blockHashOrBlockTag, 32)) {\n                _context28.next = 11;\n                break;\n              }\n              params.blockHash = blockHashOrBlockTag;\n              _context28.next = 23;\n              break;\n            case 11:\n              _context28.prev = 11;\n              _context28.t0 = this.formatter;\n              _context28.next = 15;\n              return this._getBlockTag(blockHashOrBlockTag);\n            case 15:\n              _context28.t1 = _context28.sent;\n              params.blockTag = _context28.t0.blockTag.call(_context28.t0, _context28.t1);\n              if (isHexString(params.blockTag)) {\n                blockNumber = parseInt(params.blockTag.substring(2), 16);\n              }\n              _context28.next = 23;\n              break;\n            case 20:\n              _context28.prev = 20;\n              _context28.t2 = _context28[\"catch\"](11);\n              logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            case 23:\n              return _context28.abrupt(\"return\", poll(function () {\n                return __awaiter(_this14, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {\n                  var block, _blockNumber, i, tx, confirmations;\n                  return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n                    while (1) switch (_context27.prev = _context27.next) {\n                      case 0:\n                        _context27.next = 2;\n                        return this.perform(\"getBlock\", params);\n                      case 2:\n                        block = _context27.sent;\n                        if (!(block == null)) {\n                          _context27.next = 11;\n                          break;\n                        }\n                        if (!(params.blockHash != null)) {\n                          _context27.next = 7;\n                          break;\n                        }\n                        if (!(this._emitted[\"b:\" + params.blockHash] == null)) {\n                          _context27.next = 7;\n                          break;\n                        }\n                        return _context27.abrupt(\"return\", null);\n                      case 7:\n                        if (!(params.blockTag != null)) {\n                          _context27.next = 10;\n                          break;\n                        }\n                        if (!(blockNumber > this._emitted.block)) {\n                          _context27.next = 10;\n                          break;\n                        }\n                        return _context27.abrupt(\"return\", null);\n                      case 10:\n                        return _context27.abrupt(\"return\", undefined);\n                      case 11:\n                        if (!includeTransactions) {\n                          _context27.next = 32;\n                          break;\n                        }\n                        _blockNumber = null;\n                        i = 0;\n                      case 14:\n                        if (!(i < block.transactions.length)) {\n                          _context27.next = 31;\n                          break;\n                        }\n                        tx = block.transactions[i];\n                        if (!(tx.blockNumber == null)) {\n                          _context27.next = 20;\n                          break;\n                        }\n                        tx.confirmations = 0;\n                        _context27.next = 28;\n                        break;\n                      case 20:\n                        if (!(tx.confirmations == null)) {\n                          _context27.next = 28;\n                          break;\n                        }\n                        if (!(_blockNumber == null)) {\n                          _context27.next = 25;\n                          break;\n                        }\n                        _context27.next = 24;\n                        return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                      case 24:\n                        _blockNumber = _context27.sent;\n                      case 25:\n                        // Add the confirmations using the fast block number (pessimistic)\n                        confirmations = _blockNumber - tx.blockNumber + 1;\n                        if (confirmations <= 0) {\n                          confirmations = 1;\n                        }\n                        tx.confirmations = confirmations;\n                      case 28:\n                        i++;\n                        _context27.next = 14;\n                        break;\n                      case 31:\n                        return _context27.abrupt(\"return\", this.formatter.blockWithTransactions(block));\n                      case 32:\n                        return _context27.abrupt(\"return\", this.formatter.block(block));\n                      case 33:\n                      case \"end\":\n                        return _context27.stop();\n                    }\n                  }, _callee27, this);\n                }));\n              }, {\n                oncePoll: this\n              }));\n            case 24:\n            case \"end\":\n              return _context28.stop();\n          }\n        }, _callee28, this, [[11, 20]]);\n      }));\n    }\n  }, {\n    key: \"getBlock\",\n    value: function getBlock(blockHashOrBlockTag) {\n      return this._getBlock(blockHashOrBlockTag, false);\n    }\n  }, {\n    key: \"getBlockWithTransactions\",\n    value: function getBlockWithTransactions(blockHashOrBlockTag) {\n      return this._getBlock(blockHashOrBlockTag, true);\n    }\n  }, {\n    key: \"getTransaction\",\n    value: function getTransaction(transactionHash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {\n        var _this15 = this;\n        var params;\n        return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n          while (1) switch (_context30.prev = _context30.next) {\n            case 0:\n              _context30.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context30.next = 4;\n              return transactionHash;\n            case 4:\n              transactionHash = _context30.sent;\n              params = {\n                transactionHash: this.formatter.hash(transactionHash, true)\n              };\n              return _context30.abrupt(\"return\", poll(function () {\n                return __awaiter(_this15, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {\n                  var result, tx, blockNumber, confirmations;\n                  return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n                    while (1) switch (_context29.prev = _context29.next) {\n                      case 0:\n                        _context29.next = 2;\n                        return this.perform(\"getTransaction\", params);\n                      case 2:\n                        result = _context29.sent;\n                        if (!(result == null)) {\n                          _context29.next = 7;\n                          break;\n                        }\n                        if (!(this._emitted[\"t:\" + transactionHash] == null)) {\n                          _context29.next = 6;\n                          break;\n                        }\n                        return _context29.abrupt(\"return\", null);\n                      case 6:\n                        return _context29.abrupt(\"return\", undefined);\n                      case 7:\n                        tx = this.formatter.transactionResponse(result);\n                        if (!(tx.blockNumber == null)) {\n                          _context29.next = 12;\n                          break;\n                        }\n                        tx.confirmations = 0;\n                        _context29.next = 19;\n                        break;\n                      case 12:\n                        if (!(tx.confirmations == null)) {\n                          _context29.next = 19;\n                          break;\n                        }\n                        _context29.next = 15;\n                        return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                      case 15:\n                        blockNumber = _context29.sent;\n                        // Add the confirmations using the fast block number (pessimistic)\n                        confirmations = blockNumber - tx.blockNumber + 1;\n                        if (confirmations <= 0) {\n                          confirmations = 1;\n                        }\n                        tx.confirmations = confirmations;\n                      case 19:\n                        return _context29.abrupt(\"return\", this._wrapTransaction(tx));\n                      case 20:\n                      case \"end\":\n                        return _context29.stop();\n                    }\n                  }, _callee29, this);\n                }));\n              }, {\n                oncePoll: this\n              }));\n            case 7:\n            case \"end\":\n              return _context30.stop();\n          }\n        }, _callee30, this);\n      }));\n    }\n  }, {\n    key: \"getTransactionReceipt\",\n    value: function getTransactionReceipt(transactionHash) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {\n        var _this16 = this;\n        var params;\n        return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n          while (1) switch (_context32.prev = _context32.next) {\n            case 0:\n              _context32.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context32.next = 4;\n              return transactionHash;\n            case 4:\n              transactionHash = _context32.sent;\n              params = {\n                transactionHash: this.formatter.hash(transactionHash, true)\n              };\n              return _context32.abrupt(\"return\", poll(function () {\n                return __awaiter(_this16, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {\n                  var result, receipt, blockNumber, confirmations;\n                  return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n                    while (1) switch (_context31.prev = _context31.next) {\n                      case 0:\n                        _context31.next = 2;\n                        return this.perform(\"getTransactionReceipt\", params);\n                      case 2:\n                        result = _context31.sent;\n                        if (!(result == null)) {\n                          _context31.next = 7;\n                          break;\n                        }\n                        if (!(this._emitted[\"t:\" + transactionHash] == null)) {\n                          _context31.next = 6;\n                          break;\n                        }\n                        return _context31.abrupt(\"return\", null);\n                      case 6:\n                        return _context31.abrupt(\"return\", undefined);\n                      case 7:\n                        if (!(result.blockHash == null)) {\n                          _context31.next = 9;\n                          break;\n                        }\n                        return _context31.abrupt(\"return\", undefined);\n                      case 9:\n                        receipt = this.formatter.receipt(result);\n                        if (!(receipt.blockNumber == null)) {\n                          _context31.next = 14;\n                          break;\n                        }\n                        receipt.confirmations = 0;\n                        _context31.next = 21;\n                        break;\n                      case 14:\n                        if (!(receipt.confirmations == null)) {\n                          _context31.next = 21;\n                          break;\n                        }\n                        _context31.next = 17;\n                        return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                      case 17:\n                        blockNumber = _context31.sent;\n                        // Add the confirmations using the fast block number (pessimistic)\n                        confirmations = blockNumber - receipt.blockNumber + 1;\n                        if (confirmations <= 0) {\n                          confirmations = 1;\n                        }\n                        receipt.confirmations = confirmations;\n                      case 21:\n                        return _context31.abrupt(\"return\", receipt);\n                      case 22:\n                      case \"end\":\n                        return _context31.stop();\n                    }\n                  }, _callee31, this);\n                }));\n              }, {\n                oncePoll: this\n              }));\n            case 7:\n            case \"end\":\n              return _context32.stop();\n          }\n        }, _callee32, this);\n      }));\n    }\n  }, {\n    key: \"getLogs\",\n    value: function getLogs(filter) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {\n        var params, logs;\n        return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n          while (1) switch (_context33.prev = _context33.next) {\n            case 0:\n              _context33.next = 2;\n              return this.getNetwork();\n            case 2:\n              _context33.next = 4;\n              return resolveProperties({\n                filter: this._getFilter(filter)\n              });\n            case 4:\n              params = _context33.sent;\n              _context33.next = 7;\n              return this.perform(\"getLogs\", params);\n            case 7:\n              logs = _context33.sent;\n              logs.forEach(function (log) {\n                if (log.removed == null) {\n                  log.removed = false;\n                }\n              });\n              return _context33.abrupt(\"return\", Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs));\n            case 10:\n            case \"end\":\n              return _context33.stop();\n          }\n        }, _callee33, this);\n      }));\n    }\n  }, {\n    key: \"getEtherPrice\",\n    value: function getEtherPrice() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {\n        return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n          while (1) switch (_context34.prev = _context34.next) {\n            case 0:\n              _context34.next = 2;\n              return this.getNetwork();\n            case 2:\n              return _context34.abrupt(\"return\", this.perform(\"getEtherPrice\", {}));\n            case 3:\n            case \"end\":\n              return _context34.stop();\n          }\n        }, _callee34, this);\n      }));\n    }\n  }, {\n    key: \"_getBlockTag\",\n    value: function _getBlockTag(blockTag) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {\n        var blockNumber;\n        return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n          while (1) switch (_context35.prev = _context35.next) {\n            case 0:\n              _context35.next = 2;\n              return blockTag;\n            case 2:\n              blockTag = _context35.sent;\n              if (!(typeof blockTag === \"number\" && blockTag < 0)) {\n                _context35.next = 11;\n                break;\n              }\n              if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n              }\n              _context35.next = 7;\n              return this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            case 7:\n              blockNumber = _context35.sent;\n              blockNumber += blockTag;\n              if (blockNumber < 0) {\n                blockNumber = 0;\n              }\n              return _context35.abrupt(\"return\", this.formatter.blockTag(blockNumber));\n            case 11:\n              return _context35.abrupt(\"return\", this.formatter.blockTag(blockTag));\n            case 12:\n            case \"end\":\n              return _context35.stop();\n          }\n        }, _callee35, this);\n      }));\n    }\n  }, {\n    key: \"getResolver\",\n    value: function getResolver(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {\n        var address;\n        return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n          while (1) switch (_context36.prev = _context36.next) {\n            case 0:\n              _context36.prev = 0;\n              _context36.next = 3;\n              return this._getResolver(name);\n            case 3:\n              address = _context36.sent;\n              if (!(address == null)) {\n                _context36.next = 6;\n                break;\n              }\n              return _context36.abrupt(\"return\", null);\n            case 6:\n              return _context36.abrupt(\"return\", new Resolver(this, address, name));\n            case 9:\n              _context36.prev = 9;\n              _context36.t0 = _context36[\"catch\"](0);\n              if (!(_context36.t0.code === Logger.errors.CALL_EXCEPTION)) {\n                _context36.next = 13;\n                break;\n              }\n              return _context36.abrupt(\"return\", null);\n            case 13:\n              return _context36.abrupt(\"return\", null);\n            case 14:\n            case \"end\":\n              return _context36.stop();\n          }\n        }, _callee36, this, [[0, 9]]);\n      }));\n    }\n  }, {\n    key: \"_getResolver\",\n    value: function _getResolver(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {\n        var network, transaction;\n        return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n          while (1) switch (_context37.prev = _context37.next) {\n            case 0:\n              _context37.next = 2;\n              return this.getNetwork();\n            case 2:\n              network = _context37.sent;\n              // No ENS...\n              if (!network.ensAddress) {\n                logger.throwError(\"network does not support ENS\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: \"ENS\",\n                  network: network.name\n                });\n              }\n              // keccak256(\"resolver(bytes32)\")\n              transaction = {\n                to: network.ensAddress,\n                data: \"0x0178b8bf\" + namehash(name).substring(2)\n              };\n              _context37.prev = 5;\n              _context37.t0 = this.formatter;\n              _context37.next = 9;\n              return this.call(transaction);\n            case 9:\n              _context37.t1 = _context37.sent;\n              return _context37.abrupt(\"return\", _context37.t0.callAddress.call(_context37.t0, _context37.t1));\n            case 13:\n              _context37.prev = 13;\n              _context37.t2 = _context37[\"catch\"](5);\n              if (!(_context37.t2.code === Logger.errors.CALL_EXCEPTION)) {\n                _context37.next = 17;\n                break;\n              }\n              return _context37.abrupt(\"return\", null);\n            case 17:\n              throw _context37.t2;\n            case 18:\n            case \"end\":\n              return _context37.stop();\n          }\n        }, _callee37, this, [[5, 13]]);\n      }));\n    }\n  }, {\n    key: \"resolveName\",\n    value: function resolveName(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {\n        var resolver;\n        return _regeneratorRuntime().wrap(function _callee38$(_context38) {\n          while (1) switch (_context38.prev = _context38.next) {\n            case 0:\n              _context38.next = 2;\n              return name;\n            case 2:\n              name = _context38.sent;\n              _context38.prev = 3;\n              return _context38.abrupt(\"return\", Promise.resolve(this.formatter.address(name)));\n            case 7:\n              _context38.prev = 7;\n              _context38.t0 = _context38[\"catch\"](3);\n              if (!isHexString(name)) {\n                _context38.next = 11;\n                break;\n              }\n              throw _context38.t0;\n            case 11:\n              if (typeof name !== \"string\") {\n                logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n              }\n              // Get the addr from the resovler\n              _context38.next = 14;\n              return this.getResolver(name);\n            case 14:\n              resolver = _context38.sent;\n              if (resolver) {\n                _context38.next = 17;\n                break;\n              }\n              return _context38.abrupt(\"return\", null);\n            case 17:\n              _context38.next = 19;\n              return resolver.getAddress();\n            case 19:\n              return _context38.abrupt(\"return\", _context38.sent);\n            case 20:\n            case \"end\":\n              return _context38.stop();\n          }\n        }, _callee38, this, [[3, 7]]);\n      }));\n    }\n  }, {\n    key: \"lookupAddress\",\n    value: function lookupAddress(address) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {\n        var reverseName, resolverAddress, bytes, length, name, addr;\n        return _regeneratorRuntime().wrap(function _callee39$(_context39) {\n          while (1) switch (_context39.prev = _context39.next) {\n            case 0:\n              _context39.next = 2;\n              return address;\n            case 2:\n              address = _context39.sent;\n              address = this.formatter.address(address);\n              reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n              _context39.next = 7;\n              return this._getResolver(reverseName);\n            case 7:\n              resolverAddress = _context39.sent;\n              if (resolverAddress) {\n                _context39.next = 10;\n                break;\n              }\n              return _context39.abrupt(\"return\", null);\n            case 10:\n              _context39.t0 = arrayify;\n              _context39.next = 13;\n              return this.call({\n                to: resolverAddress,\n                data: \"0x691f3431\" + namehash(reverseName).substring(2)\n              });\n            case 13:\n              _context39.t1 = _context39.sent;\n              bytes = (0, _context39.t0)(_context39.t1);\n              if (!(bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32))) {\n                _context39.next = 17;\n                break;\n              }\n              return _context39.abrupt(\"return\", null);\n            case 17:\n              bytes = bytes.slice(32);\n              // Not a length-prefixed string\n              if (!(bytes.length < 32)) {\n                _context39.next = 20;\n                break;\n              }\n              return _context39.abrupt(\"return\", null);\n            case 20:\n              // Get the length of the string (from the length-prefix)\n              length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n              bytes = bytes.slice(32);\n              // Length longer than available data\n              if (!(length > bytes.length)) {\n                _context39.next = 24;\n                break;\n              }\n              return _context39.abrupt(\"return\", null);\n            case 24:\n              name = toUtf8String(bytes.slice(0, length)); // Make sure the reverse record matches the foward record\n              _context39.next = 27;\n              return this.resolveName(name);\n            case 27:\n              addr = _context39.sent;\n              if (!(addr != address)) {\n                _context39.next = 30;\n                break;\n              }\n              return _context39.abrupt(\"return\", null);\n            case 30:\n              return _context39.abrupt(\"return\", name);\n            case 31:\n            case \"end\":\n              return _context39.stop();\n          }\n        }, _callee39, this);\n      }));\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n        operation: method\n      });\n    }\n  }, {\n    key: \"_startEvent\",\n    value: function _startEvent(event) {\n      this.polling = this._events.filter(function (e) {\n        return e.pollable();\n      }).length > 0;\n    }\n  }, {\n    key: \"_stopEvent\",\n    value: function _stopEvent(event) {\n      this.polling = this._events.filter(function (e) {\n        return e.pollable();\n      }).length > 0;\n    }\n  }, {\n    key: \"_addEventListener\",\n    value: function _addEventListener(eventName, listener, once) {\n      var event = new Event(getEventTag(eventName), listener, once);\n      this._events.push(event);\n      this._startEvent(event);\n      return this;\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventName, listener) {\n      return this._addEventListener(eventName, listener, false);\n    }\n  }, {\n    key: \"once\",\n    value: function once(eventName, listener) {\n      return this._addEventListener(eventName, listener, true);\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName) {\n      var _this17 = this;\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      var result = false;\n      var stopped = [];\n      var eventTag = getEventTag(eventName);\n      this._events = this._events.filter(function (event) {\n        if (event.tag !== eventTag) {\n          return true;\n        }\n        setTimeout(function () {\n          event.listener.apply(_this17, args);\n        }, 0);\n        result = true;\n        if (event.once) {\n          stopped.push(event);\n          return false;\n        }\n        return true;\n      });\n      stopped.forEach(function (event) {\n        _this17._stopEvent(event);\n      });\n      return result;\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventName) {\n      if (!eventName) {\n        return this._events.length;\n      }\n      var eventTag = getEventTag(eventName);\n      return this._events.filter(function (event) {\n        return event.tag === eventTag;\n      }).length;\n    }\n  }, {\n    key: \"listeners\",\n    value: function listeners(eventName) {\n      if (eventName == null) {\n        return this._events.map(function (event) {\n          return event.listener;\n        });\n      }\n      var eventTag = getEventTag(eventName);\n      return this._events.filter(function (event) {\n        return event.tag === eventTag;\n      }).map(function (event) {\n        return event.listener;\n      });\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventName, listener) {\n      var _this18 = this;\n      if (listener == null) {\n        return this.removeAllListeners(eventName);\n      }\n      var stopped = [];\n      var found = false;\n      var eventTag = getEventTag(eventName);\n      this._events = this._events.filter(function (event) {\n        if (event.tag !== eventTag || event.listener != listener) {\n          return true;\n        }\n        if (found) {\n          return true;\n        }\n        found = true;\n        stopped.push(event);\n        return false;\n      });\n      stopped.forEach(function (event) {\n        _this18._stopEvent(event);\n      });\n      return this;\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventName) {\n      var _this19 = this;\n      var stopped = [];\n      if (eventName == null) {\n        stopped = this._events;\n        this._events = [];\n      } else {\n        var eventTag = getEventTag(eventName);\n        this._events = this._events.filter(function (event) {\n          if (event.tag !== eventTag) {\n            return true;\n          }\n          stopped.push(event);\n          return false;\n        });\n      }\n      stopped.forEach(function (event) {\n        _this19._stopEvent(event);\n      });\n      return this;\n    }\n  }], [{\n    key: \"getFormatter\",\n    value: function getFormatter() {\n      if (defaultFormatter == null) {\n        defaultFormatter = new Formatter();\n      }\n      return defaultFormatter;\n    }\n    // @TODO: Remove this and just use getNetwork\n  }, {\n    key: \"getNetwork\",\n    value: function getNetwork(network) {\n      return _getNetwork(network == null ? \"homestead\" : network);\n    }\n  }]);\n  return BaseProvider;\n}(Provider);","map":{"version":3,"names":["_assertThisInitialized","_inherits","_createSuper","_regeneratorRuntime","_classCallCheck","_createClass","ForkEvent","Provider","Base58","BigNumber","arrayify","concat","hexConcat","hexDataLength","hexDataSlice","hexlify","hexValue","hexZeroPad","isHexString","HashZero","namehash","getNetwork","defineReadOnly","getStatic","resolveProperties","sha256","toUtf8Bytes","toUtf8String","poll","bech32","Logger","version","logger","Formatter","checkTopic","topic","throwArgumentError","toLowerCase","serializeTopics","topics","slice","length","pop","map","Array","isArray","unique","forEach","sorted","Object","keys","sort","join","deserializeTopics","data","split","comps","getEventTag","eventName","indexOf","isForkEvent","warn","Error","address","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","tag","listener","once","key","get","type","hash","filter","value","pollable","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","from","toHexString","base58Encode","encode","Resolver","provider","name","formatter","_fetchBytes","selector","parameters","transaction","to","_context","prev","next","call","result","sent","abrupt","offset","toNumber","t0","code","errors","CALL_EXCEPTION","stop","_callee","_getAddress","coinType","hexBytes","coinInfo","String","throwError","UNSUPPORTED_OPERATION","operation","bytes","match","parseInt","words","toWords","unshift","getAddress","_context2","substring","callAddress","_callee2","getContentHash","_context3","ipfs","swarm","_callee3","getText","keyBytes","_context4","_callee4","defaultFormatter","nextPollId","BaseProvider","_Provider","_super","network","_this","checkNew","constructor","_events","_emitted","block","getFormatter","anyNetwork","detectNetwork","_networkPromise","catch","error","_ready","knownNetwork","emit","_maxInternalBlockNumber","_lastBlockNumber","_pollingInterval","_fastQueryDate","_network","_context5","UNKNOWN_ERROR","_callee5","_this2","then","NETWORK_ERROR","event","undefined","_getInternalBlockNumber","maxAge","_context6","_internalBlockNumber","internalBlockNumber","respTime","blockNumber","reqTime","checkInternalBlockNumber","perform","networkError","_ref","_this3","_setFastBlockNumber","_callee6","pollId","runners","_context7","pollingInterval","Math","abs","makeError","previousBlockNumber","i","eventBlockNumber","_this4","runner","getTransactionReceipt","receipt","push","fromBlock","toBlock","getLogs","logs","log","blockHash","transactionHash","all","_callee7","resetEventsBlock","polling","_context8","_callee8","_context9","currentNetwork","chainId","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_callee9","_this5","_poller","set","_this6","setInterval","_bootstrapPoll","clearInterval","_this7","_getFastBlockNumber","_this8","now","getBlockNumber","waitForTransaction","confirmations","timeout","_waitForTransaction","_context10","_callee10","replaceable","_context13","reject","cancelFuncs","done","alreadyDone","func","minedHandler","_this9","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","mark","_callee12","_this10","wrap","_callee12$","_context12","getTransactionCount","nonce","_callee11","mined","ti","tx","_receipt","reason","_callee11$","_context11","getTransaction","getBlockWithTransactions","transactions","eq","isZero","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","_callee13","_context14","_callee14","getGasPrice","_context15","SERVER_ERROR","method","_callee15","getBalance","addressOrName","blockTag","_context16","_getBlockTag","params","_callee16","_context17","_callee17","getCode","_context18","_callee18","getStorageAt","position","_context19","p","_callee19","_this11","expectedHash","returnedHash","wait","confirms","_callee20","_callee20$","_context20","status","sendTransaction","signedTransaction","_context21","t","hexTx","_callee21","_getTransactionRequest","values","_context22","v","_this12","accessList","t1","transactionRequest","_callee22","_getFilter","_context23","_this13","_callee23","_context24","_callee24","estimateGas","_context25","_callee25","resolveName","_context26","JSON","stringify","_callee26","_getBlock","blockHashOrBlockTag","includeTransactions","_context28","t2","_this14","_callee27","_blockNumber","_callee27$","_context27","blockWithTransactions","oncePoll","_callee28","getBlock","_context30","_this15","_callee29","_callee29$","_context29","transactionResponse","_callee30","_context32","_this16","_callee31","_callee31$","_context31","_callee32","_context33","removed","arrayOf","filterLog","bind","_callee33","getEtherPrice","_context34","_callee34","_context35","_callee35","getResolver","_getResolver","_context36","_callee36","_context37","ensAddress","_callee37","_context38","resolver","_callee38","lookupAddress","_context39","reverseName","resolverAddress","addr","_callee39","NOT_IMPLEMENTED","_startEvent","e","_stopEvent","_addEventListener","_this17","_len","arguments","args","_key","stopped","eventTag","apply","listenerCount","listeners","off","_this18","removeAllListeners","found","_this19"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\providers\\src.ts\\base-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<string>;\n    lookupAddress(address: string): Promise<string>;\n    getResolver(name: string): Promise<EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    constructor(provider: BaseProvider, address: string, name: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<string> {\n        // keccak256(\"addr(bytes32,uint256)\")\n        const transaction = {\n            to: this.address,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        try {\n            const result = await this.provider.call(transaction);\n            if (result === \"0x\") { return null; }\n\n            const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n            const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n            return hexDataSlice(result, offset + 32, offset + 32 + length);\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            return null;\n        }\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const transaction = {\n                    to: this.address,\n                    data: (\"0x3b3b57de\" + namehash(this.name).substring(2))\n                };\n                const hexBytes = await this.provider.call(transaction);\n\n                // No address\n                if (hexBytes === \"0x\" || hexBytes === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(hexBytes);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        logger.checkNew(new.target, Provider);\n\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is refelcted); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    const filter = event.filter;\n                    filter.fromBlock = this._lastBlockNumber + 1;\n                    filter.toBlock = blockNumber;\n\n                    const runner = this.getLogs(filter).then((logs) => {\n                        if (logs.length === 0) { return; }\n                        logs.forEach((log: Log) => {\n                            this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                            this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                            this.emit(filter, log);\n                        });\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n                    runners.push(runner);\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"call\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params, result, error\n            });\n        }\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = this.formatter.blockTag(await this._getBlockTag(blockHashOrBlockTag));\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n                return this.formatter.blockWithTransactions(block);\n            }\n\n            return this.formatter.block(block);\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<Resolver> {\n        try {\n            const address = await this._getResolver(name);\n            if (address == null) { return null; }\n            return new Resolver(this, address, name);\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            return null;\n        }\n    }\n\n    async _getResolver(name: string): Promise<string> {\n        // Get the resolver from the blockchain\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation: \"ENS\", network: network.name }\n            );\n        }\n\n        // keccak256(\"resolver(bytes32)\")\n        const transaction = {\n            to: network.ensAddress,\n            data: (\"0x0178b8bf\" + namehash(name).substring(2))\n        };\n\n        try {\n            return this.formatter.callAddress(await this.call(transaction));\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resovler\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddress = await this._getResolver(reverseName);\n        if (!resolverAddress) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        let bytes = arrayify(await this.call({\n            to: resolverAddress,\n            data: (\"0x691f3431\" + namehash(reverseName).substring(2))\n        }));\n\n        // Strip off the dynamic string pointer (0x20)\n        if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) { return null; }\n        bytes = bytes.slice(32);\n\n        // Not a length-prefixed string\n        if (bytes.length < 32) { return null; }\n\n        // Get the length of the string (from the length-prefix)\n        const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n        bytes = bytes.slice(32);\n\n        // Length longer than available data\n        if (length > bytes.length) { return null; }\n\n        const name = toUtf8String(bytes.slice(0, length));\n\n        // Make sure the reverse record matches the foward record\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}