{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n  static getApiKey(apiKey) {\n    if (apiKey != null) {\n      logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n    }\n    return null;\n  }\n  static getUrl(network, apiKey) {\n    let host = null;\n    switch (network.name) {\n      case \"homestead\":\n        host = \"https://cloudflare-eth.com/\";\n        break;\n      default:\n        logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n    }\n    return host;\n  }\n  perform(method, params) {\n    const _super = Object.create(null, {\n      perform: {\n        get: () => super.perform\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      // The Cloudflare provider does not support eth_blockNumber,\n      // so we get the latest block and pull it from that\n      if (method === \"getBlockNumber\") {\n        const block = yield _super.perform.call(this, \"getBlock\", {\n          blockTag: \"latest\"\n        });\n        return block.number;\n      }\n      return _super.perform.call(this, method, params);\n    });\n  }\n}","map":{"version":3,"names":["UrlJsonRpcProvider","Logger","version","logger","CloudflareProvider","getApiKey","apiKey","throwArgumentError","getUrl","network","host","name","arguments","perform","method","params","block","_super","call","blockTag","number"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\providers\\src.ts\\cloudflare-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return host;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // The Cloudflare provider does not support eth_blockNumber,\n        // so we get the latest block and pull it from that\n        if (method === \"getBlockNumber\") {\n            const block = await super.perform(\"getBlock\", { blockTag: \"latest\" });\n            return block.number;\n        }\n\n        return super.perform(method, params);\n    }\n}\n"],"mappings":"AAAA,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGZ,SAASA,kBAAkB,QAAQ,yBAAyB;AAE5D,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAElC,OAAM,MAAOE,kBAAmB,SAAQJ,kBAAkB;EAEtD,OAAOK,SAASA,CAACC,MAAW;IACxB,IAAIA,MAAM,IAAI,IAAI,EAAE;MAChBH,MAAM,CAACI,kBAAkB,CAAC,qCAAqC,EAAE,QAAQ,EAAED,MAAM,CAAC;;IAEtF,OAAO,IAAI;EACf;EAEA,OAAOE,MAAMA,CAACC,OAAgB,EAAEH,MAAY;IACxC,IAAII,IAAI,GAAG,IAAI;IACf,QAAQD,OAAO,CAACE,IAAI;MAChB,KAAK,WAAW;QACZD,IAAI,GAAG,6BAA6B;QACpC;MACJ;QACGP,MAAM,CAACI,kBAAkB,CAAC,qBAAqB,EAAE,SAAS,EAAEK,SAAS,CAAC,CAAC,CAAC,CAAC;;IAGhF,OAAOF,IAAI;EACf;EAEMG,OAAOA,CAACC,MAAc,EAAEC,MAAW;;;;;;;MACrC;MACA;MACA,IAAID,MAAM,KAAK,gBAAgB,EAAE;QAC7B,MAAME,KAAK,GAAG,MAAMC,MAAA,CAAMJ,OAAO,CAAAK,IAAA,OAAC,UAAU,EAAE;UAAEC,QAAQ,EAAE;QAAQ,CAAE,CAAC;QACrE,OAAOH,KAAK,CAACI,MAAM;;MAGvB,OAAOH,MAAA,CAAMJ,OAAO,CAAAK,IAAA,OAACJ,MAAM,EAAEC,MAAM;IACvC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}