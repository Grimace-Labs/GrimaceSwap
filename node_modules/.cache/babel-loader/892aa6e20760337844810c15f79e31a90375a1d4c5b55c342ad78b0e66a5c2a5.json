{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { getUrl } from \"./geturl\";\nfunction staller(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\nfunction bodyify(value, type) {\n  if (value == null) {\n    return null;\n  }\n  if (typeof value === \"string\") {\n    return value;\n  }\n  if (isBytesLike(value)) {\n    if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n      try {\n        return toUtf8String(value);\n      } catch (error) {}\n      ;\n    }\n    return hexlify(value);\n  }\n  return value;\n}\nfunction unpercent(value) {\n  return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n    return String.fromCharCode(parseInt(code, 16));\n  }));\n}\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData(connection, body, processFunc) {\n  // How many times to retry in the event of a throttle\n  const attemptLimit = typeof connection === \"object\" && connection.throttleLimit != null ? connection.throttleLimit : 12;\n  logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n  const throttleCallback = typeof connection === \"object\" ? connection.throttleCallback : null;\n  const throttleSlotInterval = typeof connection === \"object\" && typeof connection.throttleSlotInterval === \"number\" ? connection.throttleSlotInterval : 100;\n  logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n  const errorPassThrough = typeof connection === \"object\" ? !!connection.errorPassThrough : false;\n  const headers = {};\n  let url = null;\n  // @TODO: Allow ConnectionInfo to override some of these values\n  const options = {\n    method: \"GET\"\n  };\n  let allow304 = false;\n  let timeout = 2 * 60 * 1000;\n  if (typeof connection === \"string\") {\n    url = connection;\n  } else if (typeof connection === \"object\") {\n    if (connection == null || connection.url == null) {\n      logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n    }\n    url = connection.url;\n    if (typeof connection.timeout === \"number\" && connection.timeout > 0) {\n      timeout = connection.timeout;\n    }\n    if (connection.headers) {\n      for (const key in connection.headers) {\n        headers[key.toLowerCase()] = {\n          key: key,\n          value: String(connection.headers[key])\n        };\n        if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n          allow304 = true;\n        }\n      }\n    }\n    options.allowGzip = !!connection.allowGzip;\n    if (connection.user != null && connection.password != null) {\n      if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n        logger.throwError(\"basic authentication requires a secure https url\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"url\",\n          url: url,\n          user: connection.user,\n          password: \"[REDACTED]\"\n        });\n      }\n      const authorization = connection.user + \":\" + connection.password;\n      headers[\"authorization\"] = {\n        key: \"Authorization\",\n        value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n      };\n    }\n    if (connection.skipFetchSetup != null) {\n      options.skipFetchSetup = !!connection.skipFetchSetup;\n    }\n    if (connection.fetchOptions != null) {\n      options.fetchOptions = shallowCopy(connection.fetchOptions);\n    }\n  }\n  const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n  const dataMatch = url ? url.match(reData) : null;\n  if (dataMatch) {\n    try {\n      const response = {\n        statusCode: 200,\n        statusMessage: \"OK\",\n        headers: {\n          \"content-type\": dataMatch[1] || \"text/plain\"\n        },\n        body: dataMatch[2] ? base64Decode(dataMatch[3]) : unpercent(dataMatch[3])\n      };\n      let result = response.body;\n      if (processFunc) {\n        result = processFunc(response.body, response);\n      }\n      return Promise.resolve(result);\n    } catch (error) {\n      logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n        body: bodyify(dataMatch[1], dataMatch[2]),\n        error: error,\n        requestBody: null,\n        requestMethod: \"GET\",\n        url: url\n      });\n    }\n  }\n  if (body) {\n    options.method = \"POST\";\n    options.body = body;\n    if (headers[\"content-type\"] == null) {\n      headers[\"content-type\"] = {\n        key: \"Content-Type\",\n        value: \"application/octet-stream\"\n      };\n    }\n    if (headers[\"content-length\"] == null) {\n      headers[\"content-length\"] = {\n        key: \"Content-Length\",\n        value: String(body.length)\n      };\n    }\n  }\n  const flatHeaders = {};\n  Object.keys(headers).forEach(key => {\n    const header = headers[key];\n    flatHeaders[header.key] = header.value;\n  });\n  options.headers = flatHeaders;\n  const runningTimeout = function () {\n    let timer = null;\n    const promise = new Promise(function (resolve, reject) {\n      if (timeout) {\n        timer = setTimeout(() => {\n          if (timer == null) {\n            return;\n          }\n          timer = null;\n          reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            timeout: timeout,\n            url: url\n          }));\n        }, timeout);\n      }\n    });\n    const cancel = function () {\n      if (timer == null) {\n        return;\n      }\n      clearTimeout(timer);\n      timer = null;\n    };\n    return {\n      promise,\n      cancel\n    };\n  }();\n  const runningFetch = function () {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (let attempt = 0; attempt < attemptLimit; attempt++) {\n        let response = null;\n        try {\n          response = yield getUrl(url, options);\n          if (attempt < attemptLimit) {\n            if (response.statusCode === 301 || response.statusCode === 302) {\n              // Redirection; for now we only support absolute locataions\n              const location = response.headers.location || \"\";\n              if (options.method === \"GET\" && location.match(/^https:/)) {\n                url = response.headers.location;\n                continue;\n              }\n            } else if (response.statusCode === 429) {\n              // Exponential back-off throttling\n              let tryAgain = true;\n              if (throttleCallback) {\n                tryAgain = yield throttleCallback(attempt, url);\n              }\n              if (tryAgain) {\n                let stall = 0;\n                const retryAfter = response.headers[\"retry-after\"];\n                if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                  stall = parseInt(retryAfter) * 1000;\n                } else {\n                  stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                }\n                //console.log(\"Stalling 429\");\n                yield staller(stall);\n                continue;\n              }\n            }\n          }\n        } catch (error) {\n          response = error.response;\n          if (response == null) {\n            runningTimeout.cancel();\n            logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n              requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n              requestMethod: options.method,\n              serverError: error,\n              url: url\n            });\n          }\n        }\n        let body = response.body;\n        if (allow304 && response.statusCode === 304) {\n          body = null;\n        } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n          runningTimeout.cancel();\n          logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n            status: response.statusCode,\n            headers: response.headers,\n            body: bodyify(body, response.headers ? response.headers[\"content-type\"] : null),\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n          });\n        }\n        if (processFunc) {\n          try {\n            const result = yield processFunc(body, response);\n            runningTimeout.cancel();\n            return result;\n          } catch (error) {\n            // Allow the processFunc to trigger a throttle\n            if (error.throttleRetry && attempt < attemptLimit) {\n              let tryAgain = true;\n              if (throttleCallback) {\n                tryAgain = yield throttleCallback(attempt, url);\n              }\n              if (tryAgain) {\n                const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                //console.log(\"Stalling callback\");\n                yield staller(timeout);\n                continue;\n              }\n            }\n            runningTimeout.cancel();\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n              body: bodyify(body, response.headers ? response.headers[\"content-type\"] : null),\n              error: error,\n              requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n              requestMethod: options.method,\n              url: url\n            });\n          }\n        }\n        runningTimeout.cancel();\n        // If we had a processFunc, it either returned a T or threw above.\n        // The \"body\" is now a Uint8Array.\n        return body;\n      }\n      return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n        requestMethod: options.method,\n        url: url\n      });\n    });\n  }();\n  return Promise.race([runningTimeout.promise, runningFetch]);\n}\nexport function fetchJson(connection, json, processFunc) {\n  let processJsonFunc = (value, response) => {\n    let result = null;\n    if (value != null) {\n      try {\n        result = JSON.parse(toUtf8String(value));\n      } catch (error) {\n        logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n          body: value,\n          error: error\n        });\n      }\n    }\n    if (processFunc) {\n      result = processFunc(result, response);\n    }\n    return result;\n  };\n  // If we have json to send, we must\n  // - add content-type of application/json (unless already overridden)\n  // - convert the json to bytes\n  let body = null;\n  if (json != null) {\n    body = toUtf8Bytes(json);\n    // Create a connection with the content-type set for JSON\n    const updated = typeof connection === \"string\" ? {\n      url: connection\n    } : shallowCopy(connection);\n    if (updated.headers) {\n      const hasContentType = Object.keys(updated.headers).filter(k => k.toLowerCase() === \"content-type\").length !== 0;\n      if (!hasContentType) {\n        updated.headers = shallowCopy(updated.headers);\n        updated.headers[\"content-type\"] = \"application/json\";\n      }\n    } else {\n      updated.headers = {\n        \"content-type\": \"application/json\"\n      };\n    }\n    connection = updated;\n  }\n  return _fetchData(connection, body, processJsonFunc);\n}\nexport function poll(func, options) {\n  if (!options) {\n    options = {};\n  }\n  options = shallowCopy(options);\n  if (options.floor == null) {\n    options.floor = 0;\n  }\n  if (options.ceiling == null) {\n    options.ceiling = 10000;\n  }\n  if (options.interval == null) {\n    options.interval = 250;\n  }\n  return new Promise(function (resolve, reject) {\n    let timer = null;\n    let done = false;\n    // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n    const cancel = () => {\n      if (done) {\n        return false;\n      }\n      done = true;\n      if (timer) {\n        clearTimeout(timer);\n      }\n      return true;\n    };\n    if (options.timeout) {\n      timer = setTimeout(() => {\n        if (cancel()) {\n          reject(new Error(\"timeout\"));\n        }\n      }, options.timeout);\n    }\n    const retryLimit = options.retryLimit;\n    let attempt = 0;\n    function check() {\n      return func().then(function (result) {\n        // If we have a result, or are allowed null then we're done\n        if (result !== undefined) {\n          if (cancel()) {\n            resolve(result);\n          }\n        } else if (options.oncePoll) {\n          options.oncePoll.once(\"poll\", check);\n        } else if (options.onceBlock) {\n          options.onceBlock.once(\"block\", check);\n          // Otherwise, exponential back-off (up to 10s) our next request\n        } else if (!done) {\n          attempt++;\n          if (attempt > retryLimit) {\n            if (cancel()) {\n              reject(new Error(\"retry limit reached\"));\n            }\n            return;\n          }\n          let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n          if (timeout < options.floor) {\n            timeout = options.floor;\n          }\n          if (timeout > options.ceiling) {\n            timeout = options.ceiling;\n          }\n          setTimeout(check, timeout);\n        }\n        return null;\n      }, function (error) {\n        if (cancel()) {\n          reject(error);\n        }\n      });\n    }\n    check();\n  });\n}","map":{"version":3,"names":["decode","base64Decode","encode","base64Encode","hexlify","isBytesLike","shallowCopy","toUtf8Bytes","toUtf8String","Logger","version","logger","getUrl","staller","duration","Promise","resolve","setTimeout","bodyify","value","type","split","trim","error","unpercent","replace","all","code","String","fromCharCode","parseInt","_fetchData","connection","body","processFunc","attemptLimit","throttleLimit","assertArgument","throttleCallback","throttleSlotInterval","errorPassThrough","headers","url","options","method","allow304","timeout","throwArgumentError","key","toLowerCase","indexOf","allowGzip","user","password","substring","allowInsecureAuthentication","throwError","errors","INVALID_ARGUMENT","argument","authorization","skipFetchSetup","fetchOptions","reData","RegExp","dataMatch","match","response","statusCode","statusMessage","result","SERVER_ERROR","requestBody","requestMethod","length","flatHeaders","Object","keys","forEach","header","runningTimeout","timer","promise","reject","makeError","TIMEOUT","cancel","clearTimeout","runningFetch","attempt","location","tryAgain","stall","retryAfter","Math","random","pow","serverError","status","throttleRetry","race","fetchJson","json","processJsonFunc","JSON","parse","updated","hasContentType","filter","k","poll","func","floor","ceiling","interval","done","Error","retryLimit","check","then","undefined","oncePoll","once","onceBlock"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\web\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { getUrl, GetUrlResponse, Options } from \"./geturl\";\n\nfunction staller(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\nfunction bodyify(value: any, type: string): string {\n    if (value == null) { return null; }\n\n    if (typeof(value) === \"string\") { return value; }\n\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            } catch (error) { };\n        }\n        return hexlify(value);\n    }\n\n    return value;\n}\n\n// Exported Types\nexport type ConnectionInfo = {\n    url: string,\n    headers?: { [key: string]: string | number }\n\n    user?: string,\n    password?: string,\n\n    allowInsecureAuthentication?: boolean,\n    allowGzip?: boolean,\n\n    throttleLimit?: number,\n    throttleSlotInterval?: number;\n    throttleCallback?: (attempt: number, url: string) => Promise<boolean>,\n\n    skipFetchSetup?: boolean;\n    fetchOptions?: Record<string, string>;\n    errorPassThrough?: boolean;\n\n    timeout?: number,\n};\n\nexport interface OnceBlockable {\n    once(eventName: \"block\", handler: () => void): void;\n}\n\nexport interface OncePollable {\n    once(eventName: \"poll\", handler: () => void): void;\n}\n\nexport type PollOptions = {\n    timeout?: number,\n    floor?: number,\n    ceiling?: number,\n    interval?: number,\n    retryLimit?: number,\n    onceBlock?: OnceBlockable\n    oncePoll?: OncePollable\n};\n\nexport type FetchJsonResponse = {\n    statusCode: number;\n    headers: { [ header: string ]: string };\n};\n\n\ntype Header = { key: string, value: string };\n\nfunction unpercent(value: string): Uint8Array {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData<T = Uint8Array>(connection: string | ConnectionInfo, body?: Uint8Array, processFunc?: (value: Uint8Array, response: FetchJsonResponse) => T): Promise<T> {\n\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof(connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit: 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0),\n        \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n\n    const throttleCallback = ((typeof(connection) === \"object\") ? connection.throttleCallback: null);\n    const throttleSlotInterval = ((typeof(connection) === \"object\" && typeof(connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval: 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0),\n        \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n\n    const errorPassThrough = ((typeof(connection) === \"object\") ? !!(connection.errorPassThrough): false);\n\n    const headers: { [key: string]: Header } = { };\n\n    let url: string = null;\n\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options: Options = {\n        method: \"GET\",\n    };\n\n    let allow304 = false;\n\n    let timeout = 2 * 60 * 1000;\n\n    if (typeof(connection) === \"string\") {\n        url = connection;\n\n    } else if (typeof(connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n\n        url = connection.url;\n\n        if (typeof(connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n\n        options.allowGzip = !!connection.allowGzip;\n\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\n                    \"basic authentication requires a secure https url\",\n                    Logger.errors.INVALID_ARGUMENT,\n                    { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" }\n                );\n            }\n\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n\n        if (connection.fetchOptions != null) {\n            options.fetchOptions = shallowCopy(connection.fetchOptions);\n        }\n    }\n\n    const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData): null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": (dataMatch[1] || \"text/plain\")},\n                body: (dataMatch[2] ? base64Decode(dataMatch[3]): unpercent(dataMatch[3]))\n            };\n\n            let result: T = <T><unknown>response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(<T><unknown>result);\n\n        } catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n\n    const flatHeaders: { [ key: string ]: string } = { };\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n\n    const runningTimeout = (function() {\n        let timer: NodeJS.Timer = null;\n        const promise: Promise<never> = new Promise(function(resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) { return; }\n                    timer = null;\n\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n\n        const cancel = function() {\n            if (timer == null) { return; }\n            clearTimeout(timer);\n            timer = null;\n        }\n\n        return { promise, cancel };\n    })();\n\n    const runningFetch = (async function() {\n\n        for (let attempt = 0; attempt < attemptLimit; attempt++) {\n            let response: GetUrlResponse = null;\n\n            try {\n                response = await getUrl(url, options);\n\n                if (attempt < attemptLimit) {\n                    if (response.statusCode === 301 || response.statusCode === 302) {\n                        // Redirection; for now we only support absolute locataions\n                        const location = response.headers.location || \"\";\n                        if (options.method === \"GET\" && location.match(/^https:/)) {\n                            url = response.headers.location;\n                            continue;\n                        }\n\n                    } else if (response.statusCode === 429) {\n                        // Exponential back-off throttling\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            let stall = 0;\n\n                            const retryAfter = response.headers[\"retry-after\"];\n                            if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                stall = parseInt(retryAfter) * 1000;\n                            } else {\n                                stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            }\n\n                            //console.log(\"Stalling 429\");\n                            await staller(stall);\n                            continue;\n                        }\n                    }\n                }\n\n            } catch (error) {\n                response = (<any>error).response;\n                if (response == null) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        serverError: error,\n                        url: url\n                    });\n                }\n            }\n\n\n            let body = response.body;\n\n            if (allow304 && response.statusCode === 304) {\n                body = null;\n            } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                runningTimeout.cancel();\n                logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                    status: response.statusCode,\n                    headers: response.headers,\n                    body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                    requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                    requestMethod: options.method,\n                    url: url\n                });\n            }\n\n            if (processFunc) {\n                try {\n                    const result = await processFunc(body, response);\n                    runningTimeout.cancel();\n                    return result;\n\n                } catch (error) {\n                    // Allow the processFunc to trigger a throttle\n                    if (error.throttleRetry && attempt < attemptLimit) {\n                        let tryAgain = true;\n                        if (throttleCallback) {\n                            tryAgain = await throttleCallback(attempt, url);\n                        }\n\n                        if (tryAgain) {\n                            const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                            //console.log(\"Stalling callback\");\n                            await staller(timeout);\n                            continue;\n                        }\n                    }\n\n                    runningTimeout.cancel();\n                    logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"]: null)),\n                        error: error,\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n            }\n\n            runningTimeout.cancel();\n\n            // If we had a processFunc, it either returned a T or threw above.\n            // The \"body\" is now a Uint8Array.\n            return <T>(<unknown>body);\n        }\n\n        return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n        });\n    })();\n\n    return Promise.race([ runningTimeout.promise, runningFetch ]);\n}\n\nexport function fetchJson(connection: string | ConnectionInfo, json?: string, processFunc?: (value: any, response: FetchJsonResponse) => any): Promise<any> {\n    let processJsonFunc = (value: Uint8Array, response: FetchJsonResponse) => {\n        let result: any = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            } catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n\n        return result;\n    }\n\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body: Uint8Array = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n\n        // Create a connection with the content-type set for JSON\n        const updated: ConnectionInfo = (typeof(connection) === \"string\") ? ({ url: connection }): shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        } else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n\n    return _fetchData<any>(connection, body, processJsonFunc);\n}\n\nexport function poll<T>(func: () => Promise<T>, options?: PollOptions): Promise<T> {\n    if (!options) { options = {}; }\n    options = shallowCopy(options);\n    if (options.floor == null) { options.floor = 0; }\n    if (options.ceiling == null) { options.ceiling = 10000; }\n    if (options.interval == null) { options.interval = 250; }\n\n    return new Promise(function(resolve, reject) {\n\n        let timer: NodeJS.Timer = null;\n        let done: boolean = false;\n\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = (): boolean => {\n            if (done) { return false; }\n            done = true;\n            if (timer) { clearTimeout(timer); }\n            return true;\n        };\n\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) { reject(new Error(\"timeout\")); }\n            }, options.timeout)\n        }\n\n        const retryLimit = options.retryLimit;\n\n        let attempt = 0;\n        function check() {\n            return func().then(function(result) {\n\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) { resolve(result); }\n\n                } else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n\n                } else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n\n                // Otherwise, exponential back-off (up to 10s) our next request\n                } else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) { reject(new Error(\"retry limit reached\")); }\n                        return;\n                    }\n\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) { timeout = options.floor; }\n                    if (timeout > options.ceiling) { timeout = options.ceiling; }\n\n                    setTimeout(check, timeout);\n                }\n\n                return null;\n            }, function(error) {\n                if (cancel()) { reject(error); }\n            });\n        }\n        check();\n    });\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}