{"ast":null,"code":"\"use strict\";\n\n// This gets overridden by rollup\nimport _classCallCheck from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar exportWordlist = false;\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport var logger = new Logger(version);\nexport var Wordlist = /*#__PURE__*/function () {\n  function Wordlist(locale) {\n    _classCallCheck(this, Wordlist);\n    logger.checkAbstract(this instanceof Wordlist ? this.constructor : void 0, Wordlist);\n    defineReadOnly(this, \"locale\", locale);\n  }\n  // Subclasses may override this\n  _createClass(Wordlist, [{\n    key: \"split\",\n    value: function split(mnemonic) {\n      return mnemonic.toLowerCase().split(/ +/g);\n    }\n    // Subclasses may override this\n  }, {\n    key: \"join\",\n    value: function join(words) {\n      return words.join(\" \");\n    }\n  }], [{\n    key: \"check\",\n    value: function check(wordlist) {\n      var words = [];\n      for (var i = 0; i < 2048; i++) {\n        var word = wordlist.getWord(i);\n        /* istanbul ignore if */\n        if (i !== wordlist.getWordIndex(word)) {\n          return \"0x\";\n        }\n        words.push(word);\n      }\n      return id(words.join(\"\\n\") + \"\\n\");\n    }\n  }, {\n    key: \"register\",\n    value: function register(lang, name) {\n      if (!name) {\n        name = lang.locale;\n      }\n      /* istanbul ignore if */\n      if (exportWordlist) {\n        try {\n          var anyGlobal = window;\n          if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n            if (!anyGlobal._ethers.wordlists[name]) {\n              defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n            }\n          }\n        } catch (error) {}\n      }\n    }\n  }]);\n  return Wordlist;\n}();","map":{"version":3,"names":["_classCallCheck","_createClass","exportWordlist","id","defineReadOnly","Logger","version","logger","Wordlist","locale","checkAbstract","constructor","key","value","split","mnemonic","toLowerCase","join","words","check","wordlist","i","word","getWord","getWordIndex","push","register","lang","name","anyGlobal","window","_ethers","wordlists","error"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\wordlists\\src.ts\\wordlist.ts"],"sourcesContent":["\"use strict\";\n\n// This gets overridden by rollup\nconst exportWordlist = false;\n\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport const logger = new Logger(version);\n\nexport abstract class Wordlist {\n    readonly locale: string;\n\n    constructor(locale: string) {\n        logger.checkAbstract(new.target, Wordlist);\n        defineReadOnly(this, \"locale\", locale);\n    }\n\n    abstract getWord(index: number): string;\n    abstract getWordIndex(word: string): number;\n\n    // Subclasses may override this\n    split(mnemonic: string): Array<string> {\n        return mnemonic.toLowerCase().split(/ +/g)\n    }\n\n    // Subclasses may override this\n    join(words: Array<string>): string {\n        return words.join(\" \");\n    }\n\n    static check(wordlist: Wordlist): string {\n        const words = [];\n        for (let i = 0; i < 2048; i++) {\n            const word = wordlist.getWord(i);\n            /* istanbul ignore if */\n            if (i !== wordlist.getWordIndex(word)) { return \"0x\"; }\n            words.push(word);\n        }\n        return id(words.join(\"\\n\") + \"\\n\");\n    }\n\n    static register(lang: Wordlist, name?: string): void {\n        if (!name) { name = lang.locale; }\n\n        /* istanbul ignore if */\n        if (exportWordlist) {\n            try {\n                const anyGlobal = (window as any)\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n                    if (!anyGlobal._ethers.wordlists[name]) {\n                         defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n                    }\n                }\n            } catch (error) { }\n        }\n    }\n\n}\n\n"],"mappings":"AAAA,YAAY;;AAEZ;AAAA,OAAAA,eAAA;AAAA,OAAAC,YAAA;AACA,IAAMC,cAAc,GAAG,KAAK;AAE5B,SAASC,EAAE,QAAQ,qBAAqB;AACxC,SAASC,cAAc,QAAQ,2BAA2B;AAE1D,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,OAAO,IAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAEzC,WAAsBE,QAAQ;EAG1B,SAAAA,SAAYC,MAAc;IAAAT,eAAA,OAAAQ,QAAA;IACtBD,MAAM,CAACG,aAAa,iBAAAF,QAAA,QAAAG,WAAA,WAAaH,QAAQ,CAAC;IAC1CJ,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAEK,MAAM,CAAC;EAC1C;EAKA;EAAAR,YAAA,CAAAO,QAAA;IAAAI,GAAA;IAAAC,KAAA,EACA,SAAAC,MAAMC,QAAgB;MAClB,OAAOA,QAAQ,CAACC,WAAW,EAAE,CAACF,KAAK,CAAC,KAAK,CAAC;IAC9C;IAEA;EAAA;IAAAF,GAAA;IAAAC,KAAA,EACA,SAAAI,KAAKC,KAAoB;MACrB,OAAOA,KAAK,CAACD,IAAI,CAAC,GAAG,CAAC;IAC1B;EAAC;IAAAL,GAAA;IAAAC,KAAA,EAED,SAAAM,MAAaC,QAAkB;MAC3B,IAAMF,KAAK,GAAG,EAAE;MAChB,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,EAAEA,CAAC,EAAE,EAAE;QAC3B,IAAMC,IAAI,GAAGF,QAAQ,CAACG,OAAO,CAACF,CAAC,CAAC;QAChC;QACA,IAAIA,CAAC,KAAKD,QAAQ,CAACI,YAAY,CAACF,IAAI,CAAC,EAAE;UAAE,OAAO,IAAI;;QACpDJ,KAAK,CAACO,IAAI,CAACH,IAAI,CAAC;;MAEpB,OAAOnB,EAAE,CAACe,KAAK,CAACD,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;IACtC;EAAC;IAAAL,GAAA;IAAAC,KAAA,EAED,SAAAa,SAAgBC,IAAc,EAAEC,IAAa;MACzC,IAAI,CAACA,IAAI,EAAE;QAAEA,IAAI,GAAGD,IAAI,CAAClB,MAAM;;MAE/B;MACA,IAAIP,cAAc,EAAE;QAChB,IAAI;UACA,IAAM2B,SAAS,GAAIC,MAAc;UACjC,IAAID,SAAS,CAACE,OAAO,IAAIF,SAAS,CAACE,OAAO,CAACC,SAAS,EAAE;YAClD,IAAI,CAACH,SAAS,CAACE,OAAO,CAACC,SAAS,CAACJ,IAAI,CAAC,EAAE;cACnCxB,cAAc,CAACyB,SAAS,CAACE,OAAO,CAACC,SAAS,EAAEJ,IAAI,EAAED,IAAI,CAAC;;;SAGnE,CAAC,OAAOM,KAAK,EAAE;;IAExB;EAAC;EAAA,OAAAzB,QAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}