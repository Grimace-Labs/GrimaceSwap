{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _get from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _classCallCheck from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\nvar defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport var AlchemyWebSocketProvider = /*#__PURE__*/function (_WebSocketProvider) {\n  _inherits(AlchemyWebSocketProvider, _WebSocketProvider);\n  var _super2 = _createSuper(AlchemyWebSocketProvider);\n  function AlchemyWebSocketProvider(network, apiKey) {\n    var _this;\n    _classCallCheck(this, AlchemyWebSocketProvider);\n    var provider = new AlchemyProvider(network, apiKey);\n    var url = provider.connection.url.replace(/^http/i, \"ws\").replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n    _this = _super2.call(this, url, provider.network);\n    defineReadOnly(_assertThisInitialized(_this), \"apiKey\", provider.apiKey);\n    return _this;\n  }\n  _createClass(AlchemyWebSocketProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey === defaultApiKey;\n    }\n  }]);\n  return AlchemyWebSocketProvider;\n}(WebSocketProvider);\nexport var AlchemyProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(AlchemyProvider, _UrlJsonRpcProvider);\n  var _super3 = _createSuper(AlchemyProvider);\n  function AlchemyProvider() {\n    _classCallCheck(this, AlchemyProvider);\n    return _super3.apply(this, arguments);\n  }\n  _createClass(AlchemyProvider, [{\n    key: \"perform\",\n    value: function perform(method, params) {\n      var _this2 = this;\n      var _super = Object.create(null, {\n        perform: {\n          get: function get() {\n            return _get(_getPrototypeOf(AlchemyProvider.prototype), \"perform\", _this2);\n          }\n        }\n      });\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (method === \"estimateGas\" && params.transaction.type === 2 || method === \"sendTransaction\" && params.signedTransaction.substring(0, 4) === \"0x02\") {\n                logger.throwError(\"AlchemyProvider does not currently support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                  operation: method,\n                  transaction: params.transaction\n                });\n              }\n              return _context.abrupt(\"return\", _super.perform.call(this, method, params));\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey === defaultApiKey;\n    }\n  }], [{\n    key: \"getWebSocketProvider\",\n    value: function getWebSocketProvider(network, apiKey) {\n      return new AlchemyWebSocketProvider(network, apiKey);\n    }\n  }, {\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      if (apiKey == null) {\n        return defaultApiKey;\n      }\n      if (apiKey && typeof apiKey !== \"string\") {\n        logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n      }\n      return apiKey;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n      switch (network.name) {\n        case \"homestead\":\n          host = \"eth-mainnet.alchemyapi.io/v2/\";\n          break;\n        case \"ropsten\":\n          host = \"eth-ropsten.alchemyapi.io/v2/\";\n          break;\n        case \"rinkeby\":\n          host = \"eth-rinkeby.alchemyapi.io/v2/\";\n          break;\n        case \"goerli\":\n          host = \"eth-goerli.alchemyapi.io/v2/\";\n          break;\n        case \"kovan\":\n          host = \"eth-kovan.alchemyapi.io/v2/\";\n          break;\n        default:\n          logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n      }\n      return {\n        allowGzip: true,\n        url: \"https:/\" + \"/\" + host + apiKey,\n        throttleCallback: function throttleCallback(attempt, url) {\n          if (apiKey === defaultApiKey) {\n            showThrottleMessage();\n          }\n          return Promise.resolve(true);\n        }\n      };\n    }\n  }]);\n  return AlchemyProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"names":["_regeneratorRuntime","_get","_getPrototypeOf","_classCallCheck","_createClass","_assertThisInitialized","_inherits","_createSuper","defineReadOnly","showThrottleMessage","WebSocketProvider","Logger","version","logger","UrlJsonRpcProvider","defaultApiKey","AlchemyWebSocketProvider","_WebSocketProvider","_super2","network","apiKey","_this","provider","AlchemyProvider","url","connection","replace","call","key","value","isCommunityResource","_UrlJsonRpcProvider","_super3","apply","arguments","perform","method","params","_this2","transaction","type","signedTransaction","substring","throwError","errors","UNSUPPORTED_OPERATION","operation","_context","abrupt","_super","stop","_callee","getWebSocketProvider","getApiKey","throwArgumentError","getUrl","host","name","allowGzip","throttleCallback","attempt","Promise","resolve"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\providers\\src.ts\\alchemy-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nexport class AlchemyWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new AlchemyProvider(network, apiKey);\n\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n                                           .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): AlchemyWebSocketProvider {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: string): ConnectionInfo {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.alchemyapi.io/v2/\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.alchemyapi.io/v2/\";\n                break;\n            case \"kovan\":\n                host = \"eth-kovan.alchemyapi.io/v2/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        if ((method === \"estimateGas\" && params.transaction.type === 2) || (method === \"sendTransaction\" && params.signedTransaction.substring(0, 4) === \"0x02\")) {\n            logger.throwError(\"AlchemyProvider does not currently support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: method,\n                transaction: params.transaction\n            });\n        }\n\n        return super.perform(method, params);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}