{"ast":null,"code":"/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array, depth) {\n  if (depth == null) {\n    depth = 1;\n  }\n  const result = [];\n  const forEach = result.forEach;\n  const flatDeep = function (arr, depth) {\n    forEach.call(arr, function (val) {\n      if (depth > 0 && Array.isArray(val)) {\n        flatDeep(val, depth - 1);\n      } else {\n        result.push(val);\n      }\n    });\n  };\n  flatDeep(array, depth);\n  return result;\n}\nfunction fromEntries(array) {\n  const result = {};\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    result[value[0]] = value[1];\n  }\n  return result;\n}\nexport function decode_arithmetic(bytes) {\n  let pos = 0;\n  function u16() {\n    return bytes[pos++] << 8 | bytes[pos++];\n  }\n  // decode the frequency table\n  let symbol_count = u16();\n  let total = 1;\n  let acc = [0, 1]; // first symbol has frequency 1\n  for (let i = 1; i < symbol_count; i++) {\n    acc.push(total += u16());\n  }\n  // skip the sized-payload that the last 3 symbols index into\n  let skip = u16();\n  let pos_payload = pos;\n  pos += skip;\n  let read_width = 0;\n  let read_buffer = 0;\n  function read_bit() {\n    if (read_width == 0) {\n      // this will read beyond end of buffer\n      // but (undefined|0) => zero pad\n      read_buffer = read_buffer << 8 | bytes[pos++];\n      read_width = 8;\n    }\n    return read_buffer >> --read_width & 1;\n  }\n  const N = 31;\n  const FULL = Math.pow(2, N);\n  const HALF = FULL >>> 1;\n  const QRTR = HALF >> 1;\n  const MASK = FULL - 1;\n  // fill register\n  let register = 0;\n  for (let i = 0; i < N; i++) register = register << 1 | read_bit();\n  let symbols = [];\n  let low = 0;\n  let range = FULL; // treat like a float\n  while (true) {\n    let value = Math.floor(((register - low + 1) * total - 1) / range);\n    let start = 0;\n    let end = symbol_count;\n    while (end - start > 1) {\n      // binary search\n      let mid = start + end >>> 1;\n      if (value < acc[mid]) {\n        end = mid;\n      } else {\n        start = mid;\n      }\n    }\n    if (start == 0) break; // first symbol is end mark\n    symbols.push(start);\n    let a = low + Math.floor(range * acc[start] / total);\n    let b = low + Math.floor(range * acc[start + 1] / total) - 1;\n    while (((a ^ b) & HALF) == 0) {\n      register = register << 1 & MASK | read_bit();\n      a = a << 1 & MASK;\n      b = b << 1 & MASK | 1;\n    }\n    while (a & ~b & QRTR) {\n      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();\n      a = a << 1 ^ HALF;\n      b = (b ^ HALF) << 1 | HALF | 1;\n    }\n    low = a;\n    range = 1 + b - a;\n  }\n  let offset = symbol_count - 4;\n  return symbols.map(x => {\n    switch (x - offset) {\n      case 3:\n        return offset + 0x10100 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n      case 2:\n        return offset + 0x100 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n      case 1:\n        return offset + bytes[pos_payload++];\n      default:\n        return x - 1;\n    }\n  });\n}\n// returns an iterator which returns the next symbol\nexport function read_payload(v) {\n  let pos = 0;\n  return () => v[pos++];\n}\nexport function read_compressed_payload(bytes) {\n  return read_payload(decode_arithmetic(bytes));\n}\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nexport function signed(i) {\n  return i & 1 ? ~i >> 1 : i >> 1;\n}\nfunction read_counts(n, next) {\n  let v = Array(n);\n  for (let i = 0; i < n; i++) v[i] = 1 + next();\n  return v;\n}\nfunction read_ascending(n, next) {\n  let v = Array(n);\n  for (let i = 0, x = -1; i < n; i++) v[i] = x += 1 + next();\n  return v;\n}\nfunction read_deltas(n, next) {\n  let v = Array(n);\n  for (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\n  return v;\n}\nexport function read_member_array(next, lookup) {\n  let v = read_ascending(next(), next);\n  let n = next();\n  let vX = read_ascending(n, next);\n  let vN = read_counts(n, next);\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < vN[i]; j++) {\n      v.push(vX[i] + j);\n    }\n  }\n  return lookup ? v.map(x => lookup[x]) : v;\n}\n// returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\nexport function read_mapped_map(next) {\n  let ret = [];\n  while (true) {\n    let w = next();\n    if (w == 0) break;\n    ret.push(read_linear_table(w, next));\n  }\n  while (true) {\n    let w = next() - 1;\n    if (w < 0) break;\n    ret.push(read_replacement_table(w, next));\n  }\n  return fromEntries(flat(ret));\n}\nexport function read_zero_terminated_array(next) {\n  let v = [];\n  while (true) {\n    let i = next();\n    if (i == 0) break;\n    v.push(i);\n  }\n  return v;\n}\nfunction read_transposed(n, w, next) {\n  let m = Array(n).fill(undefined).map(() => []);\n  for (let i = 0; i < w; i++) {\n    read_deltas(n, next).forEach((x, j) => m[j].push(x));\n  }\n  return m;\n}\nfunction read_linear_table(w, next) {\n  let dx = 1 + next();\n  let dy = next();\n  let vN = read_zero_terminated_array(next);\n  let m = read_transposed(vN.length, 1 + w, next);\n  return flat(m.map((v, i) => {\n    const x = v[0],\n      ys = v.slice(1);\n    //let [x, ...ys] = v;\n    //return Array(vN[i]).fill().map((_, j) => {\n    return Array(vN[i]).fill(undefined).map((_, j) => {\n      let j_dy = j * dy;\n      return [x + j * dx, ys.map(y => y + j_dy)];\n    });\n  }));\n}\nfunction read_replacement_table(w, next) {\n  let n = 1 + next();\n  let m = read_transposed(n, 1 + w, next);\n  return m.map(v => [v[0], v.slice(1)]);\n}\nexport function read_emoji_trie(next) {\n  let sorted = read_member_array(next).sort((a, b) => a - b);\n  return read();\n  function read() {\n    let branches = [];\n    while (true) {\n      let keys = read_member_array(next, sorted);\n      if (keys.length == 0) break;\n      branches.push({\n        set: new Set(keys),\n        node: read()\n      });\n    }\n    branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood\n    let temp = next();\n    let valid = temp % 3;\n    temp = temp / 3 | 0;\n    let fe0f = !!(temp & 1);\n    temp >>= 1;\n    let save = temp == 1;\n    let check = temp == 2;\n    return {\n      branches,\n      valid,\n      fe0f,\n      save,\n      check\n    };\n  }\n}","map":{"version":3,"names":["flat","array","depth","result","forEach","flatDeep","arr","call","val","Array","isArray","push","fromEntries","i","length","value","decode_arithmetic","bytes","pos","u16","symbol_count","total","acc","skip","pos_payload","read_width","read_buffer","read_bit","N","FULL","Math","pow","HALF","QRTR","MASK","register","symbols","low","range","floor","start","end","mid","a","b","offset","map","x","read_payload","v","read_compressed_payload","signed","read_counts","n","next","read_ascending","read_deltas","read_member_array","lookup","vX","vN","j","read_mapped_map","ret","w","read_linear_table","read_replacement_table","read_zero_terminated_array","read_transposed","m","fill","undefined","dx","dy","ys","slice","_","j_dy","y","read_emoji_trie","sorted","sort","read","branches","keys","set","Set","node","size","temp","valid","fe0f","save","check"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\hash\\src.ts\\ens-normalize\\decoder.ts"],"sourcesContent":["/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n\nexport type Numbers = Uint8Array | Array<number>;\nexport type NextFunc = (...args: Array<any>) => number;\n\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array: Array<any>, depth?: number): Array<any> {\n    if (depth == null) { depth = 1; }\n    const result: Array<any> = [];\n\n    const forEach = result.forEach;\n\n    const flatDeep = function (arr: Array<any>, depth: number) {\n        forEach.call(arr, function (val: any) {\n            if (depth > 0 && Array.isArray(val)) {\n                flatDeep(val, depth - 1);\n            } else {\n               result.push(val);\n            }\n        });\n    };\n\n    flatDeep(array, depth);\n    return result;\n}\n\nfunction fromEntries<T extends string | number | symbol = string | number | symbol, U = any>(array: Array<[T, U]>): Record<T, U> {\n    const result: Record<T, U> = <Record<T, U>>{ };\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        result[value[0]] = value[1];\n    }\n    return result;\n}\n\nexport function decode_arithmetic(bytes: Numbers): Array<number> {\n\tlet pos = 0;\n\tfunction u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\n\t\n\t// decode the frequency table\n\tlet symbol_count = u16();\n\tlet total = 1;\n\tlet acc = [0, 1]; // first symbol has frequency 1\n\tfor (let i = 1; i < symbol_count; i++) {\n\t\tacc.push(total += u16());\n\t}\n\n\t// skip the sized-payload that the last 3 symbols index into\n\tlet skip = u16();\n\tlet pos_payload = pos;\n\tpos += skip;\n\n\tlet read_width = 0;\n\tlet read_buffer = 0; \n\tfunction read_bit() {\n\t\tif (read_width == 0) {\n\t\t\t// this will read beyond end of buffer\n\t\t\t// but (undefined|0) => zero pad\n\t\t\tread_buffer = (read_buffer << 8) | bytes[pos++];\n\t\t\tread_width = 8;\n\t\t}\n\t\treturn (read_buffer >> --read_width) & 1;\n\t}\n\n\tconst N = 31;\n\tconst FULL = 2**N;\n\tconst HALF = FULL >>> 1;\n\tconst QRTR = HALF >> 1;\n\tconst MASK = FULL - 1;\n\n\t// fill register\n\tlet register = 0;\n\tfor (let i = 0; i < N; i++) register = (register << 1) | read_bit();\n\n\tlet symbols = [];\n\tlet low = 0;\n\tlet range = FULL; // treat like a float\n\twhile (true) {\n\t\tlet value = Math.floor((((register - low + 1) * total) - 1) / range);\n\t\tlet start = 0;\n\t\tlet end = symbol_count;\n\t\twhile (end - start > 1) { // binary search\n\t\t\tlet mid = (start + end) >>> 1;\n\t\t\tif (value < acc[mid]) {\n\t\t\t\tend = mid;\n\t\t\t} else {\n\t\t\t\tstart = mid;\n\t\t\t}\n\t\t}\n\t\tif (start == 0) break; // first symbol is end mark\n\t\tsymbols.push(start);\n\t\tlet a = low + Math.floor(range * acc[start]   / total);\n\t\tlet b = low + Math.floor(range * acc[start+1] / total) - 1\n\t\twhile (((a ^ b) & HALF) == 0) {\n\t\t\tregister = (register << 1) & MASK | read_bit();\n\t\t\ta = (a << 1) & MASK;\n\t\t\tb = (b << 1) & MASK | 1;\n\t\t}\n\t\twhile (a & ~b & QRTR) {\n\t\t\tregister = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\n\t\t\ta = (a << 1) ^ HALF;\n\t\t\tb = ((b ^ HALF) << 1) | HALF | 1;\n\t\t}\n\t\tlow = a;\n\t\trange = 1 + b - a;\n\t}\n\tlet offset = symbol_count - 4;\n\treturn symbols.map(x => { // index into payload\n\t\tswitch (x - offset) {\n\t\t\tcase 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n\t\t\tcase 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n\t\t\tcase 1: return offset + bytes[pos_payload++];\n\t\t\tdefault: return x - 1;\n\t\t}\n\t});\n}\t\n\n\n// returns an iterator which returns the next symbol\nexport function read_payload(v: Numbers): NextFunc {\n\tlet pos = 0;\n\treturn () => v[pos++];\n}\nexport function read_compressed_payload(bytes: Numbers): NextFunc {\n\treturn read_payload(decode_arithmetic(bytes));\n}\n\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nexport function signed(i: number): number { \n\treturn (i & 1) ? (~i >> 1) : (i >> 1);\n}\n\nfunction read_counts(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0; i < n; i++) v[i] = 1 + next();\n\treturn v;\n}\n\nfunction read_ascending(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0, x = -1; i < n; i++) v[i] = x += 1 + next();\n\treturn v;\n}\n\nfunction read_deltas(n: number, next: NextFunc): Array<number> {\n\tlet v = Array(n);\n\tfor (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\n\treturn v;\n}\n\nexport function read_member_array(next: NextFunc, lookup?: Record<number, number>) {\n    let v = read_ascending(next(), next);\n    let n = next();\n    let vX = read_ascending(n, next);\n    let vN = read_counts(n, next);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < vN[i]; j++) {\n            v.push(vX[i] + j);\n        }\n    }\n    return lookup ? v.map(x => lookup[x]) : v;\n}\n\n// returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\nexport function read_mapped_map(next: NextFunc): Record<number, Array<number>> {\n\tlet ret = [];\n\twhile (true) {\n\t\tlet w = next();\n\t\tif (w == 0) break;\n\t\tret.push(read_linear_table(w, next));\n\t}\n\twhile (true) {\n\t\tlet w = next() - 1;\n\t\tif (w < 0) break;\n\t\tret.push(read_replacement_table(w, next));\n\t}\n\treturn fromEntries<number, Array<number>>(flat(ret));\n}\n\nexport function read_zero_terminated_array(next: NextFunc): Array<number> {\n\tlet v = [];\n\twhile (true) {\n\t\tlet i = next();\n\t\tif (i == 0) break;\n\t\tv.push(i);\n\t}\n\treturn v;\n}\n\nfunction read_transposed(n: number, w: number, next: NextFunc): Array<Array<number>> {\n    let m = Array(n).fill(undefined).map(() => []);\n    for (let i = 0; i < w; i++) {\n        read_deltas(n, next).forEach((x, j) => m[j].push(x));\n    }\n    return m;\n}\n\n\nfunction read_linear_table(w: number, next: NextFunc): Array<Array<number | Array<number>>> {\n\tlet dx = 1 + next();\n\tlet dy = next();\n\tlet vN = read_zero_terminated_array(next);\n\tlet m = read_transposed(vN.length, 1+w, next);\n\treturn flat(m.map((v, i) => {\n\t  const x = v[0], ys = v.slice(1);\n\t\t//let [x, ...ys] = v;\n\t\t//return Array(vN[i]).fill().map((_, j) => {\n\t\treturn Array(vN[i]).fill(undefined).map((_, j) => {\n\t\t\tlet j_dy = j * dy;\n\t\t\treturn [x + j * dx, ys.map(y => y + j_dy)];\n\t\t});\n\t}));\n}\n\nfunction read_replacement_table(w: number, next: NextFunc): Array<[ number, Array<number> ]> {\n\tlet n = 1 + next();\n\tlet m = read_transposed(n, 1+w, next);\n\treturn m.map(v => [v[0], v.slice(1)]);\n}\n\nexport type Branch = {\n    set: Set<number>;\n    node: Node;\n};\n\nexport type Node = {\n    branches: Array<Branch>;\n    valid: number;\n    fe0f: boolean;\n    save: boolean;\n    check: boolean;\n};\n\nexport function read_emoji_trie(next: NextFunc): Node {\n\tlet sorted = read_member_array(next).sort((a, b) => a - b);\n\treturn read();\n\tfunction read(): Node {\n\t\tlet branches = [];\n\t\twhile (true) {\n\t\t\tlet keys = read_member_array(next, sorted);\n\t\t\tif (keys.length == 0) break;\n\t\t\tbranches.push({set: new Set(keys), node: read()});\n\t\t}\n    branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood\n \t\tlet temp = next();\n \t\tlet valid = temp % 3;\n \t\ttemp = (temp / 3)|0;\n \t\tlet fe0f = !!(temp & 1);\n \t\ttemp >>= 1;\n \t\tlet save = temp == 1;\n \t\tlet check = temp == 2;\n \t\treturn {branches, valid, fe0f, save, check};\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}