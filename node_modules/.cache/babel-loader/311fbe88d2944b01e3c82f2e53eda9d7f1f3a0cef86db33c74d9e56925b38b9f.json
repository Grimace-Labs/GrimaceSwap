{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\nimport { Coder } from \"./abstract-coder\";\nexport var AddressCoder = /*#__PURE__*/function (_Coder) {\n  _inherits(AddressCoder, _Coder);\n  var _super = _createSuper(AddressCoder);\n  function AddressCoder(localName) {\n    _classCallCheck(this, AddressCoder);\n    return _super.call(this, \"address\", \"address\", localName, false);\n  }\n  _createClass(AddressCoder, [{\n    key: \"defaultValue\",\n    value: function defaultValue() {\n      return \"0x0000000000000000000000000000000000000000\";\n    }\n  }, {\n    key: \"encode\",\n    value: function encode(writer, value) {\n      try {\n        value = getAddress(value);\n      } catch (error) {\n        this._throwError(error.message, value);\n      }\n      return writer.writeValue(value);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(reader) {\n      return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));\n    }\n  }]);\n  return AddressCoder;\n}(Coder);","map":{"version":3,"names":["_classCallCheck","_createClass","_inherits","_createSuper","getAddress","hexZeroPad","Coder","AddressCoder","_Coder","_super","localName","call","key","value","defaultValue","encode","writer","error","_throwError","message","writeValue","decode","reader","readValue","toHexString"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\abi\\src.ts\\coders\\address.ts"],"sourcesContent":["\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { hexZeroPad } from \"@ethersproject/bytes\";\n\nimport { Coder, Reader, Writer } from \"./abstract-coder\";\n\nexport class AddressCoder extends Coder {\n\n    constructor(localName: string) {\n        super(\"address\", \"address\", localName, false);\n    }\n\n    defaultValue(): string {\n        return \"0x0000000000000000000000000000000000000000\";\n    }\n\n    encode(writer: Writer, value: string): number {\n        try {\n            value = getAddress(value)\n        } catch (error) {\n            this._throwError(error.message, value);\n        }\n        return writer.writeValue(value);\n    }\n\n    decode(reader: Reader): any {\n        return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));\n    }\n}\n\n"],"mappings":"AAAA,YAAY;;AAAC,OAAAA,eAAA;AAAA,OAAAC,YAAA;AAAA,OAAAC,SAAA;AAAA,OAAAC,YAAA;AAEb,SAASC,UAAU,QAAQ,wBAAwB;AACnD,SAASC,UAAU,QAAQ,sBAAsB;AAEjD,SAASC,KAAK,QAAwB,kBAAkB;AAExD,WAAaC,YAAa,0BAAAC,MAAA;EAAAN,SAAA,CAAAK,YAAA,EAAAC,MAAA;EAAA,IAAAC,MAAA,GAAAN,YAAA,CAAAI,YAAA;EAEtB,SAAAA,aAAYG,SAAiB;IAAAV,eAAA,OAAAO,YAAA;IAAA,OAAAE,MAAA,CAAAE,IAAA,OACnB,SAAS,EAAE,SAAS,EAAED,SAAS,EAAE,KAAK;EAChD;EAACT,YAAA,CAAAM,YAAA;IAAAK,GAAA;IAAAC,KAAA,EAED,SAAAC,aAAA,EAAY;MACR,OAAO,4CAA4C;IACvD;EAAC;IAAAF,GAAA;IAAAC,KAAA,EAED,SAAAE,OAAOC,MAAc,EAAEH,KAAa;MAChC,IAAI;QACAA,KAAK,GAAGT,UAAU,CAACS,KAAK,CAAC;OAC5B,CAAC,OAAOI,KAAK,EAAE;QACZ,IAAI,CAACC,WAAW,CAACD,KAAK,CAACE,OAAO,EAAEN,KAAK,CAAC;;MAE1C,OAAOG,MAAM,CAACI,UAAU,CAACP,KAAK,CAAC;IACnC;EAAC;IAAAD,GAAA;IAAAC,KAAA,EAED,SAAAQ,OAAOC,MAAc;MACjB,OAAOlB,UAAU,CAACC,UAAU,CAACiB,MAAM,CAACC,SAAS,EAAE,CAACC,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC;IACvE;EAAC;EAAA,OAAAjB,YAAA;AAAA,EArB6BD,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}