{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\";\nexport class AlchemyWebSocketProvider extends WebSocketProvider {\n  constructor(network, apiKey) {\n    const provider = new AlchemyProvider(network, apiKey);\n    const url = provider.connection.url.replace(/^http/i, \"ws\").replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n    super(url, provider.network);\n    defineReadOnly(this, \"apiKey\", provider.apiKey);\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n}\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n  static getWebSocketProvider(network, apiKey) {\n    return new AlchemyWebSocketProvider(network, apiKey);\n  }\n  static getApiKey(apiKey) {\n    if (apiKey == null) {\n      return defaultApiKey;\n    }\n    if (apiKey && typeof apiKey !== \"string\") {\n      logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n    }\n    return apiKey;\n  }\n  static getUrl(network, apiKey) {\n    let host = null;\n    switch (network.name) {\n      case \"homestead\":\n        host = \"eth-mainnet.alchemyapi.io/v2/\";\n        break;\n      case \"ropsten\":\n        host = \"eth-ropsten.alchemyapi.io/v2/\";\n        break;\n      case \"rinkeby\":\n        host = \"eth-rinkeby.alchemyapi.io/v2/\";\n        break;\n      case \"goerli\":\n        host = \"eth-goerli.alchemyapi.io/v2/\";\n        break;\n      case \"kovan\":\n        host = \"eth-kovan.alchemyapi.io/v2/\";\n        break;\n      default:\n        logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n    }\n    return {\n      allowGzip: true,\n      url: \"https:/\" + \"/\" + host + apiKey,\n      throttleCallback: (attempt, url) => {\n        if (apiKey === defaultApiKey) {\n          showThrottleMessage();\n        }\n        return Promise.resolve(true);\n      }\n    };\n  }\n  perform(method, params) {\n    const _super = Object.create(null, {\n      perform: {\n        get: () => super.perform\n      }\n    });\n    return __awaiter(this, void 0, void 0, function* () {\n      if (method === \"estimateGas\" && params.transaction.type === 2 || method === \"sendTransaction\" && params.signedTransaction.substring(0, 4) === \"0x02\") {\n        logger.throwError(\"AlchemyProvider does not currently support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: method,\n          transaction: params.transaction\n        });\n      }\n      return _super.perform.call(this, method, params);\n    });\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n}","map":{"version":3,"names":["defineReadOnly","showThrottleMessage","WebSocketProvider","Logger","version","logger","UrlJsonRpcProvider","defaultApiKey","AlchemyWebSocketProvider","constructor","network","apiKey","provider","AlchemyProvider","url","connection","replace","isCommunityResource","getWebSocketProvider","getApiKey","throwArgumentError","getUrl","host","name","arguments","allowGzip","throttleCallback","attempt","Promise","resolve","perform","method","params","transaction","type","signedTransaction","substring","throwError","errors","UNSUPPORTED_OPERATION","operation","_super","call"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\providers\\src.ts\\alchemy-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nexport class AlchemyWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new AlchemyProvider(network, apiKey);\n\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n                                           .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): AlchemyWebSocketProvider {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: string): ConnectionInfo {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.alchemyapi.io/v2/\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.alchemyapi.io/v2/\";\n                break;\n            case \"kovan\":\n                host = \"eth-kovan.alchemyapi.io/v2/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        if ((method === \"estimateGas\" && params.transaction.type === 2) || (method === \"sendTransaction\" && params.signedTransaction.substring(0, 4) === \"0x02\")) {\n            logger.throwError(\"AlchemyProvider does not currently support EIP-1559\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: method,\n                transaction: params.transaction\n            });\n        }\n\n        return super.perform(method, params);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}