{"ast":null,"code":"\"use strict\";\n\nimport aes from \"aes-js\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { Description } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { getPassword, looseArrayify, searchPath } from \"./utils\";\nexport class CrowdsaleAccount extends Description {\n  isCrowdsaleAccount(value) {\n    return !!(value && value._isCrowdsaleAccount);\n  }\n}\n// See: https://github.com/ethereum/pyethsaletool\nexport function decrypt(json, password) {\n  const data = JSON.parse(json);\n  password = getPassword(password);\n  // Ethereum Address\n  const ethaddr = getAddress(searchPath(data, \"ethaddr\"));\n  // Encrypted Seed\n  const encseed = looseArrayify(searchPath(data, \"encseed\"));\n  if (!encseed || encseed.length % 16 !== 0) {\n    logger.throwArgumentError(\"invalid encseed\", \"json\", json);\n  }\n  const key = arrayify(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n  const iv = encseed.slice(0, 16);\n  const encryptedSeed = encseed.slice(16);\n  // Decrypt the seed\n  const aesCbc = new aes.ModeOfOperation.cbc(key, iv);\n  const seed = aes.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));\n  // This wallet format is weird... Convert the binary encoded hex to a string.\n  let seedHex = \"\";\n  for (let i = 0; i < seed.length; i++) {\n    seedHex += String.fromCharCode(seed[i]);\n  }\n  const seedHexBytes = toUtf8Bytes(seedHex);\n  const privateKey = keccak256(seedHexBytes);\n  return new CrowdsaleAccount({\n    _isCrowdsaleAccount: true,\n    address: ethaddr,\n    privateKey: privateKey\n  });\n}","map":{"version":3,"names":["aes","getAddress","arrayify","keccak256","pbkdf2","toUtf8Bytes","Description","Logger","version","logger","getPassword","looseArrayify","searchPath","CrowdsaleAccount","isCrowdsaleAccount","value","_isCrowdsaleAccount","decrypt","json","password","data","JSON","parse","ethaddr","encseed","length","throwArgumentError","key","slice","iv","encryptedSeed","aesCbc","ModeOfOperation","cbc","seed","padding","pkcs7","strip","seedHex","i","String","fromCharCode","seedHexBytes","privateKey","address"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\json-wallets\\src.ts\\crowdsale.ts"],"sourcesContent":["\"use strict\";\n\nimport aes from \"aes-js\";\n\nimport { ExternallyOwnedAccount } from \"@ethersproject/abstract-signer\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify, Bytes } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { Description } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { getPassword, looseArrayify, searchPath } from \"./utils\";\n\nexport interface _CrowdsaleAccount {\n    address: string;\n    privateKey: string;\n\n    _isCrowdsaleAccount: boolean;\n}\n\nexport class CrowdsaleAccount extends Description<_CrowdsaleAccount> implements ExternallyOwnedAccount {\n    readonly address: string;\n    readonly privateKey: string;\n    readonly mnemonic?: string;\n    readonly path?: string;\n\n    readonly _isCrowdsaleAccount: boolean;\n\n    isCrowdsaleAccount(value: any): value is CrowdsaleAccount {\n        return !!(value && value._isCrowdsaleAccount);\n    }\n}\n\n// See: https://github.com/ethereum/pyethsaletool\nexport function decrypt(json: string, password: Bytes | string): ExternallyOwnedAccount {\n    const data = JSON.parse(json);\n\n    password = getPassword(password);\n\n    // Ethereum Address\n    const ethaddr = getAddress(searchPath(data, \"ethaddr\"));\n\n    // Encrypted Seed\n    const encseed = looseArrayify(searchPath(data, \"encseed\"));\n    if (!encseed || (encseed.length % 16) !== 0) {\n        logger.throwArgumentError(\"invalid encseed\", \"json\", json);\n    }\n\n    const key = arrayify(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n\n    const iv = encseed.slice(0, 16);\n    const encryptedSeed = encseed.slice(16);\n\n    // Decrypt the seed\n    const aesCbc = new aes.ModeOfOperation.cbc(key, iv);\n    const seed = aes.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));\n\n    // This wallet format is weird... Convert the binary encoded hex to a string.\n    let seedHex = \"\";\n    for (let i = 0; i < seed.length; i++) {\n        seedHex += String.fromCharCode(seed[i]);\n    }\n\n    const seedHexBytes = toUtf8Bytes(seedHex);\n\n    const privateKey = keccak256(seedHexBytes);\n\n    return new CrowdsaleAccount ({\n        _isCrowdsaleAccount: true,\n        address: ethaddr,\n        privateKey: privateKey\n    });\n}\n\n"],"mappings":"AAAA,YAAY;;AAEZ,OAAOA,GAAG,MAAM,QAAQ;AAGxB,SAASC,UAAU,QAAQ,wBAAwB;AACnD,SAASC,QAAQ,QAAe,sBAAsB;AACtD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,WAAW,QAAQ,2BAA2B;AAEvD,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAElC,SAASE,WAAW,EAAEC,aAAa,EAAEC,UAAU,QAAQ,SAAS;AAShE,OAAM,MAAOC,gBAAiB,SAAQP,WAA8B;EAQhEQ,kBAAkBA,CAACC,KAAU;IACzB,OAAO,CAAC,EAAEA,KAAK,IAAIA,KAAK,CAACC,mBAAmB,CAAC;EACjD;;AAGJ;AACA,OAAM,SAAUC,OAAOA,CAACC,IAAY,EAAEC,QAAwB;EAC1D,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAAC;EAE7BC,QAAQ,GAAGT,WAAW,CAACS,QAAQ,CAAC;EAEhC;EACA,MAAMI,OAAO,GAAGtB,UAAU,CAACW,UAAU,CAACQ,IAAI,EAAE,SAAS,CAAC,CAAC;EAEvD;EACA,MAAMI,OAAO,GAAGb,aAAa,CAACC,UAAU,CAACQ,IAAI,EAAE,SAAS,CAAC,CAAC;EAC1D,IAAI,CAACI,OAAO,IAAKA,OAAO,CAACC,MAAM,GAAG,EAAE,KAAM,CAAC,EAAE;IACzChB,MAAM,CAACiB,kBAAkB,CAAC,iBAAiB,EAAE,MAAM,EAAER,IAAI,CAAC;;EAG9D,MAAMS,GAAG,GAAGzB,QAAQ,CAACE,MAAM,CAACe,QAAQ,EAAEA,QAAQ,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC,CAACS,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAEjF,MAAMC,EAAE,GAAGL,OAAO,CAACI,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EAC/B,MAAME,aAAa,GAAGN,OAAO,CAACI,KAAK,CAAC,EAAE,CAAC;EAEvC;EACA,MAAMG,MAAM,GAAG,IAAI/B,GAAG,CAACgC,eAAe,CAACC,GAAG,CAACN,GAAG,EAAEE,EAAE,CAAC;EACnD,MAAMK,IAAI,GAAGlC,GAAG,CAACmC,OAAO,CAACC,KAAK,CAACC,KAAK,CAACnC,QAAQ,CAAC6B,MAAM,CAACd,OAAO,CAACa,aAAa,CAAC,CAAC,CAAC;EAE7E;EACA,IAAIQ,OAAO,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,CAACT,MAAM,EAAEc,CAAC,EAAE,EAAE;IAClCD,OAAO,IAAIE,MAAM,CAACC,YAAY,CAACP,IAAI,CAACK,CAAC,CAAC,CAAC;;EAG3C,MAAMG,YAAY,GAAGrC,WAAW,CAACiC,OAAO,CAAC;EAEzC,MAAMK,UAAU,GAAGxC,SAAS,CAACuC,YAAY,CAAC;EAE1C,OAAO,IAAI7B,gBAAgB,CAAE;IACzBG,mBAAmB,EAAE,IAAI;IACzB4B,OAAO,EAAErB,OAAO;IAChBoB,UAAU,EAAEA;GACf,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}