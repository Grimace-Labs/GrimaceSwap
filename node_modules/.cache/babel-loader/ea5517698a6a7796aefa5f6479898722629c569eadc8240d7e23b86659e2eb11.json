{"ast":null,"code":"import * as chains from './chains';\nconst MAINNETCoins = [{\n  name: \"Ether\",\n  abbr: \"ETH\",\n  address: \"\" // Weth address is fetched from the router\n}, {\n  name: \"Dai\",\n  abbr: \"DAI\",\n  address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\"\n}, {\n  name: \"Tether USD\",\n  abbr: \"USDT\",\n  address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\"\n}, {\n  name: \"Ampleforth\",\n  abbr: \"AMPL\",\n  address: \"0xD46bA6D942050d489DBd938a2C909A5d5039A161\"\n}, {\n  name: \"Wrapped BTC\",\n  abbr: \"WBTC\",\n  address: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\"\n}, {\n  name: \"Fei USD\",\n  abbr: \"FEI\",\n  address: \"0x956F47F50A910163D8BF957Cf5846D573E7f87CA\"\n}, {\n  name: \"frax\",\n  abbr: \"FRAX\",\n  address: \"0x853d955aCEf822Db058eb8505911ED77F175b99e\"\n}, {\n  name: \"Frax Share\",\n  abbr: \"FXS\",\n  address: \"0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0\"\n}, {\n  name: \"renBTC\",\n  abbr: \"renBTC\",\n  address: \"0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D\"\n}, {\n  name: \"StakeWise\",\n  abbr: \"SWISE\",\n  address: \"0x48C3399719B582dD63eB5AADf12A40B4C3f52FA2\"\n}];\nconst GÖRLICoins = [{\n  name: \"Ether\",\n  abbr: \"ETH\",\n  address: \"\" // Weth address is fetched from the router\n}, {\n  name: \"Dai\",\n  abbr: \"DAI\",\n  address: \"0x73967c6a0904aa032c103b4104747e88c566b1a2\"\n}, {\n  name: \"Tether USD\",\n  abbr: \"USDT\",\n  address: \"0x509ee0d083ddf8ac028f2a56731412edd63223b9\"\n}];\nexport const GRIMACE = {\n  name: \"Grimace\",\n  abbr: \"Grimace\",\n  symbol: \"GRIMACE\",\n  address: \"0x2f90907fD1DC1B7a484b6f31Ddf012328c2baB28\"\n};\nexport const DOGE = {\n  name: \"Doge\",\n  abbr: \"DOGE\",\n  symbol: \"DOGE\",\n  address: \"\" // eth address is fetched from the router\n};\n\nconst DOGECHAINCoins = [DOGE, GRIMACE];\nconst COINS = new Map();\nCOINS.set(chains.ChainId.MAINNET, MAINNETCoins);\nCOINS.set(chains.ChainId.GÖRLI, GÖRLICoins);\nCOINS.set(chains.ChainId.DOGECHAIN, DOGECHAINCoins);\nexport default COINS;","map":{"version":3,"names":["chains","MAINNETCoins","name","abbr","address","GÖRLICoins","GRIMACE","symbol","DOGE","DOGECHAINCoins","COINS","Map","set","ChainId","MAINNET","GÖRLI","DOGECHAIN"],"sources":["D:/temki/grimace/GrimaceSwap/src/constants/coins.js"],"sourcesContent":["import * as chains from './chains';\r\n\r\nconst MAINNETCoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Dai\",\r\n    abbr: \"DAI\",\r\n    address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\r\n  },\r\n  {\r\n    name: \"Tether USD\",\r\n    abbr: \"USDT\",\r\n    address: \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\r\n  },\r\n  {\r\n    name: \"Ampleforth\",\r\n    abbr: \"AMPL\",\r\n    address: \"0xD46bA6D942050d489DBd938a2C909A5d5039A161\",\r\n  },\r\n  {\r\n    name: \"Wrapped BTC\",\r\n    abbr: \"WBTC\",\r\n    address: \"0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599\",\r\n  },\r\n  {\r\n    name: \"Fei USD\",\r\n    abbr: \"FEI\",\r\n    address: \"0x956F47F50A910163D8BF957Cf5846D573E7f87CA\",\r\n  },\r\n  {\r\n    name: \"frax\",\r\n    abbr: \"FRAX\",\r\n    address: \"0x853d955aCEf822Db058eb8505911ED77F175b99e\",\r\n  },\r\n  {\r\n    name: \"Frax Share\",\r\n    abbr: \"FXS\",\r\n    address: \"0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0\",\r\n  },\r\n  {\r\n    name: \"renBTC\",\r\n    abbr: \"renBTC\",\r\n    address: \"0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D\",\r\n  },\r\n  {\r\n    name: \"StakeWise\",\r\n    abbr: \"SWISE\",\r\n    address: \"0x48C3399719B582dD63eB5AADf12A40B4C3f52FA2\",\r\n  },\r\n]\r\n\r\nconst GÖRLICoins = [\r\n  {\r\n    name: \"Ether\",\r\n    abbr: \"ETH\",\r\n    address: \"\", // Weth address is fetched from the router\r\n  },\r\n  {\r\n    name: \"Dai\",\r\n    abbr: \"DAI\",\r\n    address: \"0x73967c6a0904aa032c103b4104747e88c566b1a2\",\r\n  },\r\n  {\r\n    name: \"Tether USD\",\r\n    abbr: \"USDT\",\r\n    address: \"0x509ee0d083ddf8ac028f2a56731412edd63223b9\",\r\n  },\r\n]\r\n\r\nexport const GRIMACE = {\r\n  name: \"Grimace\",\r\n  abbr: \"Grimace\",\r\n  symbol: \"GRIMACE\",\r\n  address: \"0x2f90907fD1DC1B7a484b6f31Ddf012328c2baB28\",\r\n}\r\n\r\nexport const DOGE = {\r\n  name: \"Doge\",\r\n  abbr: \"DOGE\",\r\n  symbol: \"DOGE\",\r\n  address: \"\", // eth address is fetched from the router\r\n}\r\n\r\nconst DOGECHAINCoins = [\r\n  DOGE,\r\n  GRIMACE\r\n]\r\n\r\nconst COINS = new Map();\r\nCOINS.set(chains.ChainId.MAINNET, MAINNETCoins);\r\nCOINS.set(chains.ChainId.GÖRLI, GÖRLICoins);\r\nCOINS.set(chains.ChainId.DOGECHAIN, DOGECHAINCoins)\r\nexport default COINS\r\n"],"mappings":"AAAA,OAAO,KAAKA,MAAM,MAAM,UAAU;AAElC,MAAMC,YAAY,GAAG,CACnB;EACEC,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,KAAK;EACXC,OAAO,EAAE,EAAE,CAAE;AACf,CAAC,EACD;EACEF,IAAI,EAAE,KAAK;EACXC,IAAI,EAAE,KAAK;EACXC,OAAO,EAAE;AACX,CAAC,EACD;EACEF,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,MAAM;EACZC,OAAO,EAAE;AACX,CAAC,EACD;EACEF,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,MAAM;EACZC,OAAO,EAAE;AACX,CAAC,EACD;EACEF,IAAI,EAAE,aAAa;EACnBC,IAAI,EAAE,MAAM;EACZC,OAAO,EAAE;AACX,CAAC,EACD;EACEF,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,KAAK;EACXC,OAAO,EAAE;AACX,CAAC,EACD;EACEF,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,MAAM;EACZC,OAAO,EAAE;AACX,CAAC,EACD;EACEF,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,KAAK;EACXC,OAAO,EAAE;AACX,CAAC,EACD;EACEF,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,QAAQ;EACdC,OAAO,EAAE;AACX,CAAC,EACD;EACEF,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,OAAO;EACbC,OAAO,EAAE;AACX,CAAC,CACF;AAED,MAAMC,UAAU,GAAG,CACjB;EACEH,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,KAAK;EACXC,OAAO,EAAE,EAAE,CAAE;AACf,CAAC,EACD;EACEF,IAAI,EAAE,KAAK;EACXC,IAAI,EAAE,KAAK;EACXC,OAAO,EAAE;AACX,CAAC,EACD;EACEF,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,MAAM;EACZC,OAAO,EAAE;AACX,CAAC,CACF;AAED,OAAO,MAAME,OAAO,GAAG;EACrBJ,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,SAAS;EACfI,MAAM,EAAE,SAAS;EACjBH,OAAO,EAAE;AACX,CAAC;AAED,OAAO,MAAMI,IAAI,GAAG;EAClBN,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,MAAM;EACZI,MAAM,EAAE,MAAM;EACdH,OAAO,EAAE,EAAE,CAAE;AACf,CAAC;;AAED,MAAMK,cAAc,GAAG,CACrBD,IAAI,EACJF,OAAO,CACR;AAED,MAAMI,KAAK,GAAG,IAAIC,GAAG,CAAC,CAAC;AACvBD,KAAK,CAACE,GAAG,CAACZ,MAAM,CAACa,OAAO,CAACC,OAAO,EAAEb,YAAY,CAAC;AAC/CS,KAAK,CAACE,GAAG,CAACZ,MAAM,CAACa,OAAO,CAACE,KAAK,EAAEV,UAAU,CAAC;AAC3CK,KAAK,CAACE,GAAG,CAACZ,MAAM,CAACa,OAAO,CAACG,SAAS,EAAEP,cAAc,CAAC;AACnD,eAAeC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}