{"ast":null,"code":"import _regeneratorRuntime from\"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{Contract,ethers}from\"ethers\";import*as chains from\"./constants/chains\";import COINS from\"./constants/coins\";var ROUTER=require(\"./build/UniswapV2Router02.json\");var ERC20=require(\"./build/ERC20.json\");var FACTORY=require(\"./build/IUniswapV2Factory.json\");var PAIR=require(\"./build/IUniswapV2Pair.json\");export function getProvider(){return new ethers.providers.Web3Provider(window.ethereum);}export function getSigner(provider){return provider.getSigner();}export function getNetwork(_x){return _getNetwork.apply(this,arguments);}function _getNetwork(){_getNetwork=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(provider){var network;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return provider.getNetwork();case 2:network=_context.sent;return _context.abrupt(\"return\",network.chainId);case 4:case\"end\":return _context.stop();}},_callee);}));return _getNetwork.apply(this,arguments);}export function getRouter(address,signer){return new Contract(address,ROUTER.abi,signer);}export function checkNetwork(_x2){return _checkNetwork.apply(this,arguments);}function _checkNetwork(){_checkNetwork=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(provider){var chainId;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:chainId=getNetwork(provider);if(!chains.networks.includes(chainId)){_context2.next=3;break;}return _context2.abrupt(\"return\",true);case 3:return _context2.abrupt(\"return\",false);case 4:case\"end\":return _context2.stop();}},_callee2);}));return _checkNetwork.apply(this,arguments);}export function getWeth(address,signer){return new Contract(address,ERC20.abi,signer);}export function getFactory(address,signer){return new Contract(address,FACTORY.abi,signer);}export function getAccount(){return _getAccount.apply(this,arguments);}//This function checks if a ERC20 token exists for a given address\n//    `address` - The Ethereum address to be checked\n//    `signer` - The current signer\nfunction _getAccount(){_getAccount=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(){var accounts;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:_context3.next=2;return window.ethereum.request({method:\"eth_requestAccounts\"});case 2:accounts=_context3.sent;return _context3.abrupt(\"return\",accounts[0]);case 4:case\"end\":return _context3.stop();}},_callee3);}));return _getAccount.apply(this,arguments);}export function doesTokenExist(address,signer){try{return new Contract(address,ERC20.abi,signer);}catch(err){return false;}}export function getDecimals(_x3){return _getDecimals.apply(this,arguments);}// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular token,\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `address` - An Ethereum address of the token to check for (either a token or AUT)\n//    `provider` - The current provider\n//    `signer` - The current signer\nfunction _getDecimals(){_getDecimals=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(token){var decimals;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:_context4.next=2;return token.decimals().then(function(result){return result;}).catch(function(error){console.log('No tokenDecimals function for this token, set to 0');return 0;});case 2:decimals=_context4.sent;return _context4.abrupt(\"return\",decimals);case 4:case\"end\":return _context4.stop();}},_callee4);}));return _getDecimals.apply(this,arguments);}export function getBalanceAndSymbol(_x4,_x5,_x6,_x7,_x8,_x9){return _getBalanceAndSymbol.apply(this,arguments);}// This function swaps two particular tokens / AUT, it can handle switching from AUT to ERC20 token, ERC20 token to AUT, and ERC20 token to ERC20 token.\n// No error handling is done, so any issues can be caught with the use of .catch()\n// To work correctly, there needs to be 7 arguments:\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `amount` - A float or similar number representing the value of address1's token to trade\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `signer` - The current signer\nfunction _getBalanceAndSymbol(){_getBalanceAndSymbol=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(accountAddress,address,provider,signer,weth_address,coins){var balanceRaw,token,tokenDecimals,_balanceRaw,symbol;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1)switch(_context5.prev=_context5.next){case 0:_context5.prev=0;if(!(address===weth_address)){_context5.next=8;break;}_context5.next=4;return provider.getBalance(accountAddress);case 4:balanceRaw=_context5.sent;return _context5.abrupt(\"return\",{balance:ethers.utils.formatEther(balanceRaw),symbol:coins[0].abbr});case 8:token=new Contract(address,ERC20.abi,signer);_context5.next=11;return getDecimals(token);case 11:tokenDecimals=_context5.sent;_context5.next=14;return token.balanceOf(accountAddress);case 14:_balanceRaw=_context5.sent;_context5.next=17;return token.symbol();case 17:symbol=_context5.sent;return _context5.abrupt(\"return\",{balance:_balanceRaw*Math.pow(10,-tokenDecimals),symbol:symbol});case 19:_context5.next=26;break;case 21:_context5.prev=21;_context5.t0=_context5[\"catch\"](0);console.log('The getBalanceAndSymbol function had an error!');console.log(_context5.t0);return _context5.abrupt(\"return\",false);case 26:case\"end\":return _context5.stop();}},_callee5,null,[[0,21]]);}));return _getBalanceAndSymbol.apply(this,arguments);}export function swapTokens(_x10,_x11,_x12,_x13,_x14,_x15){return _swapTokens.apply(this,arguments);}//This function returns the conversion rate between two token addresses\n//    `address1` - An Ethereum address of the token to swaped from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to swaped to (either a token or AUT)\n//    `amountIn` - Amount of the token at address 1 to be swaped from\n//    `routerContract` - The router contract to carry out this swap\nfunction _swapTokens(){_swapTokens=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(address1,address2,amount,routerContract,accountAddress,signer){var tokens,time,deadline,token1,tokenDecimals,amountIn,amountOut,wethAddress;return _regeneratorRuntime().wrap(function _callee6$(_context6){while(1)switch(_context6.prev=_context6.next){case 0:tokens=[address1,address2];time=Math.floor(Date.now()/1000)+200000;deadline=ethers.BigNumber.from(time);token1=new Contract(address1,ERC20.abi,signer);_context6.next=6;return getDecimals(token1);case 6:tokenDecimals=_context6.sent;amountIn=ethers.utils.parseUnits(amount,tokenDecimals);_context6.next=10;return routerContract.callStatic.getAmountsOut(amountIn,tokens);case 10:amountOut=_context6.sent;_context6.next=13;return routerContract.WETH();case 13:wethAddress=_context6.sent;if(!(address1===wethAddress)){_context6.next=19;break;}_context6.next=17;return routerContract.swapExactETHForTokens(amountOut[1],tokens,accountAddress,deadline,{value:amountIn});case 17:_context6.next=26;break;case 19:if(!(address2===wethAddress)){_context6.next=24;break;}_context6.next=22;return routerContract.swapExactTokensForETH(amountIn,amountOut[1],tokens,accountAddress,deadline);case 22:_context6.next=26;break;case 24:_context6.next=26;return routerContract.swapExactTokensForTokens(amountIn,amountOut[1],tokens,accountAddress,deadline);case 26:case\"end\":return _context6.stop();}},_callee6);}));return _swapTokens.apply(this,arguments);}export function getAmountOut(_x16,_x17,_x18,_x19,_x20){return _getAmountOut.apply(this,arguments);}// This function calls the pair contract to fetch the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\n//    `address1` - An Ethereum address of the token to trade from (either a ERC20 token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a ERC20 token or AUT)\n//    `pair` - The pair contract for the two tokens\nfunction _getAmountOut(){_getAmountOut=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7(address1,address2,amountIn,routerContract,signer){var token1,token1Decimals,token2,token2Decimals,values_out,amount_out;return _regeneratorRuntime().wrap(function _callee7$(_context7){while(1)switch(_context7.prev=_context7.next){case 0:_context7.prev=0;token1=new Contract(address1,ERC20.abi,signer);_context7.next=4;return getDecimals(token1);case 4:token1Decimals=_context7.sent;token2=new Contract(address2,ERC20.abi,signer);_context7.next=8;return getDecimals(token2);case 8:token2Decimals=_context7.sent;_context7.next=11;return routerContract.getAmountsOut(ethers.utils.parseUnits(String(amountIn),token1Decimals),[address1,address2]);case 11:values_out=_context7.sent;amount_out=values_out[1]*Math.pow(10,-token2Decimals);console.log('amount out: ',amount_out);return _context7.abrupt(\"return\",Number(amount_out));case 17:_context7.prev=17;_context7.t0=_context7[\"catch\"](0);return _context7.abrupt(\"return\",false);case 20:case\"end\":return _context7.stop();}},_callee7,null,[[0,17]]);}));return _getAmountOut.apply(this,arguments);}export function fetchReserves(_x21,_x22,_x23,_x24){return _fetchReserves.apply(this,arguments);}// This function returns the reserves stored in a the liquidity pool between the token of address1 and the token\n// of address2, as well as the liquidity tokens owned by accountAddress for that pair.\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\n//    `factory` - The current factory\n//    `signer` - The current signer\nfunction _fetchReserves(){_fetchReserves=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(address1,address2,pair,signer){var coin1,coin2,coin1Decimals,coin2Decimals,reservesRaw,results;return _regeneratorRuntime().wrap(function _callee8$(_context8){while(1)switch(_context8.prev=_context8.next){case 0:_context8.prev=0;// Get decimals for each coin\ncoin1=new Contract(address1,ERC20.abi,signer);coin2=new Contract(address2,ERC20.abi,signer);_context8.next=5;return getDecimals(coin1);case 5:coin1Decimals=_context8.sent;_context8.next=8;return getDecimals(coin2);case 8:coin2Decimals=_context8.sent;_context8.next=11;return pair.getReserves();case 11:reservesRaw=_context8.sent;_context8.next=14;return pair.token0();case 14:_context8.t0=_context8.sent;_context8.t1=address1;if(!(_context8.t0===_context8.t1)){_context8.next=20;break;}_context8.t2=reservesRaw[0];_context8.next=21;break;case 20:_context8.t2=reservesRaw[1];case 21:_context8.t3=_context8.t2;_context8.next=24;return pair.token1();case 24:_context8.t4=_context8.sent;_context8.t5=address2;if(!(_context8.t4===_context8.t5)){_context8.next=30;break;}_context8.t6=reservesRaw[1];_context8.next=31;break;case 30:_context8.t6=reservesRaw[0];case 31:_context8.t7=_context8.t6;results=[_context8.t3,_context8.t7];return _context8.abrupt(\"return\",[results[0]*Math.pow(10,-coin1Decimals),results[1]*Math.pow(10,-coin2Decimals)]);case 36:_context8.prev=36;_context8.t8=_context8[\"catch\"](0);console.log(\"error!\");console.log(_context8.t8);return _context8.abrupt(\"return\",[0,0]);case 41:case\"end\":return _context8.stop();}},_callee8,null,[[0,36]]);}));return _fetchReserves.apply(this,arguments);}export function getReserves(_x25,_x26,_x27,_x28,_x29){return _getReserves.apply(this,arguments);}function _getReserves(){_getReserves=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(address1,address2,factory,signer,accountAddress){var pairAddress,pair,reservesRaw,liquidityTokens_BN,liquidityTokens;return _regeneratorRuntime().wrap(function _callee9$(_context9){while(1)switch(_context9.prev=_context9.next){case 0:_context9.prev=0;_context9.next=3;return factory.getPair(address1,address2);case 3:pairAddress=_context9.sent;pair=new Contract(pairAddress,PAIR.abi,signer);if(!(pairAddress!=='0x0000000000000000000000000000000000000000')){_context9.next=16;break;}_context9.next=8;return fetchReserves(address1,address2,pair,signer);case 8:reservesRaw=_context9.sent;_context9.next=11;return pair.balanceOf(accountAddress);case 11:liquidityTokens_BN=_context9.sent;liquidityTokens=Number(ethers.utils.formatEther(liquidityTokens_BN));return _context9.abrupt(\"return\",[reservesRaw[0].toPrecision(6),reservesRaw[1].toPrecision(6),liquidityTokens]);case 16:console.log(\"no reserves yet\");return _context9.abrupt(\"return\",[0,0,0]);case 18:_context9.next=25;break;case 20:_context9.prev=20;_context9.t0=_context9[\"catch\"](0);console.log(\"error!\");console.log(_context9.t0);return _context9.abrupt(\"return\",[0,0,0]);case 25:case\"end\":return _context9.stop();}},_callee9,null,[[0,20]]);}));return _getReserves.apply(this,arguments);}","map":{"version":3,"names":["Contract","ethers","chains","COINS","ROUTER","require","ERC20","FACTORY","PAIR","getProvider","providers","Web3Provider","window","ethereum","getSigner","provider","getNetwork","_x","_getNetwork","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","network","wrap","_callee$","_context","prev","next","sent","abrupt","chainId","stop","getRouter","address","signer","abi","checkNetwork","_x2","_checkNetwork","_callee2","_callee2$","_context2","networks","includes","getWeth","getFactory","getAccount","_getAccount","_callee3","accounts","_callee3$","_context3","request","method","doesTokenExist","err","getDecimals","_x3","_getDecimals","_callee4","token","decimals","_callee4$","_context4","then","result","catch","error","console","log","getBalanceAndSymbol","_x4","_x5","_x6","_x7","_x8","_x9","_getBalanceAndSymbol","_callee5","accountAddress","weth_address","coins","balanceRaw","tokenDecimals","_balanceRaw","symbol","_callee5$","_context5","getBalance","balance","utils","formatEther","abbr","balanceOf","Math","pow","t0","swapTokens","_x10","_x11","_x12","_x13","_x14","_x15","_swapTokens","_callee6","address1","address2","amount","routerContract","tokens","time","deadline","token1","amountIn","amountOut","wethAddress","_callee6$","_context6","floor","Date","now","BigNumber","from","parseUnits","callStatic","getAmountsOut","WETH","swapExactETHForTokens","value","swapExactTokensForETH","swapExactTokensForTokens","getAmountOut","_x16","_x17","_x18","_x19","_x20","_getAmountOut","_callee7","token1Decimals","token2","token2Decimals","values_out","amount_out","_callee7$","_context7","String","Number","fetchReserves","_x21","_x22","_x23","_x24","_fetchReserves","_callee8","pair","coin1","coin2","coin1Decimals","coin2Decimals","reservesRaw","results","_callee8$","_context8","getReserves","token0","t1","t2","t3","t4","t5","t6","t7","t8","_x25","_x26","_x27","_x28","_x29","_getReserves","_callee9","factory","pairAddress","liquidityTokens_BN","liquidityTokens","_callee9$","_context9","getPair","toPrecision"],"sources":["D:/temki/grimace/GrimaceSwap/src/ethereumFunctions.js"],"sourcesContent":["import { Contract, ethers } from \"ethers\";\r\nimport * as chains from \"./constants/chains\";\r\nimport COINS from \"./constants/coins\";\r\n\r\nconst ROUTER = require(\"./build/UniswapV2Router02.json\");\r\nconst ERC20 = require(\"./build/ERC20.json\");\r\nconst FACTORY = require(\"./build/IUniswapV2Factory.json\");\r\nconst PAIR = require(\"./build/IUniswapV2Pair.json\");\r\n\r\nexport function getProvider() {\r\n  return new ethers.providers.Web3Provider(window.ethereum);\r\n}\r\n\r\nexport function getSigner(provider) {\r\n  return provider.getSigner();\r\n}\r\n\r\nexport async function getNetwork(provider) {\r\n  const network = await provider.getNetwork();\r\n  return network.chainId;\r\n}\r\n\r\nexport function getRouter(address, signer) {\r\n  return new Contract(address, ROUTER.abi, signer);\r\n}\r\n\r\nexport async function checkNetwork(provider) {\r\n  const chainId = getNetwork(provider);\r\n  if (chains.networks.includes(chainId)){\r\n    return true\r\n  }\r\n  return false;\r\n}\r\n\r\nexport function getWeth(address, signer) {\r\n  return new Contract(address, ERC20.abi, signer);\r\n}\r\n\r\nexport function getFactory(address, signer) {\r\n  return new Contract(address, FACTORY.abi, signer);\r\n}\r\n\r\nexport async function getAccount() {\r\n  const accounts = await window.ethereum.request({\r\n    method: \"eth_requestAccounts\",\r\n  });\r\n\r\n  return accounts[0];\r\n}\r\n\r\n//This function checks if a ERC20 token exists for a given address\r\n//    `address` - The Ethereum address to be checked\r\n//    `signer` - The current signer\r\nexport function doesTokenExist(address, signer) {\r\n  try {\r\n    return new Contract(address, ERC20.abi, signer);\r\n  } catch (err) {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport async function getDecimals(token) {\r\n  const decimals = await token.decimals().then((result) => {\r\n      return result;\r\n    }).catch((error) => {\r\n      console.log('No tokenDecimals function for this token, set to 0');\r\n      return 0;\r\n    });\r\n    return decimals;\r\n}\r\n\r\n// This function returns an object with 2 fields: `balance` which container's the account's balance in the particular token,\r\n// and `symbol` which is the abbreviation of the token name. To work correctly it must be provided with 4 arguments:\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `address` - An Ethereum address of the token to check for (either a token or AUT)\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function getBalanceAndSymbol(\r\n  accountAddress,\r\n  address,\r\n  provider,\r\n  signer,\r\n  weth_address,\r\n  coins\r\n) {\r\n  try {\r\n    if (address === weth_address) {\r\n      const balanceRaw = await provider.getBalance(accountAddress);\r\n\r\n      return {\r\n        balance: ethers.utils.formatEther(balanceRaw),\r\n        symbol: coins[0].abbr,\r\n      };\r\n    } else {\r\n      const token = new Contract(address, ERC20.abi, signer);\r\n      const tokenDecimals = await getDecimals(token);\r\n      const balanceRaw = await token.balanceOf(accountAddress);\r\n      const symbol = await token.symbol();\r\n\r\n      return {\r\n        balance: balanceRaw*10**(-tokenDecimals),\r\n        symbol: symbol,\r\n      };\r\n    }\r\n  } catch (error) {\r\n    console.log ('The getBalanceAndSymbol function had an error!');\r\n    console.log (error)\r\n    return false;\r\n  }\r\n}\r\n\r\n// This function swaps two particular tokens / AUT, it can handle switching from AUT to ERC20 token, ERC20 token to AUT, and ERC20 token to ERC20 token.\r\n// No error handling is done, so any issues can be caught with the use of .catch()\r\n// To work correctly, there needs to be 7 arguments:\r\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\r\n//    `amount` - A float or similar number representing the value of address1's token to trade\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `signer` - The current signer\r\nexport async function swapTokens(\r\n  address1,\r\n  address2,\r\n  amount,\r\n  routerContract,\r\n  accountAddress,\r\n  signer\r\n) {\r\n  const tokens = [address1, address2];\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const tokenDecimals = await getDecimals(token1);\r\n  \r\n  const amountIn = ethers.utils.parseUnits(amount, tokenDecimals);\r\n  const amountOut = await routerContract.callStatic.getAmountsOut(\r\n    amountIn,\r\n    tokens\r\n  );\r\n\r\n  // @todo\r\n  // await token1.approve(routerContract.address, amountIn);\r\n  const wethAddress = await routerContract.WETH();\r\n\r\n  if (address1 === wethAddress) {\r\n    // Eth -> Token\r\n    await routerContract.swapExactETHForTokens(\r\n      amountOut[1],\r\n      tokens,\r\n      accountAddress,\r\n      deadline,\r\n      { value: amountIn }\r\n    );\r\n  } else if (address2 === wethAddress) {\r\n    // Token -> Eth\r\n    await routerContract.swapExactTokensForETH(\r\n      amountIn,\r\n      amountOut[1],\r\n      tokens,\r\n      accountAddress,\r\n      deadline\r\n    );\r\n  } else {\r\n    await routerContract.swapExactTokensForTokens(\r\n      amountIn,\r\n      amountOut[1],\r\n      tokens,\r\n      accountAddress,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n\r\n//This function returns the conversion rate between two token addresses\r\n//    `address1` - An Ethereum address of the token to swaped from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the token to swaped to (either a token or AUT)\r\n//    `amountIn` - Amount of the token at address 1 to be swaped from\r\n//    `routerContract` - The router contract to carry out this swap\r\nexport async function getAmountOut(\r\n  address1,\r\n  address2,\r\n  amountIn,\r\n  routerContract,\r\n  signer\r\n) {\r\n  try {\r\n    const token1 = new Contract(address1, ERC20.abi, signer);\r\n    const token1Decimals = await getDecimals(token1);\r\n\r\n    const token2 = new Contract(address2, ERC20.abi, signer);\r\n    const token2Decimals = await getDecimals(token2);\r\n\r\n    const values_out = await routerContract.getAmountsOut(\r\n      ethers.utils.parseUnits(String(amountIn), token1Decimals),\r\n      [address1, address2]\r\n    );\r\n    const amount_out = values_out[1]*10**(-token2Decimals);\r\n    console.log('amount out: ', amount_out)\r\n    return Number(amount_out);\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\n// This function calls the pair contract to fetch the reserves stored in a the liquidity pool between the token of address1 and the token\r\n// of address2. Some extra logic was needed to make sure that the results were returned in the correct order, as\r\n// `pair.getReserves()` would always return the reserves in the same order regardless of which order the addresses were.\r\n//    `address1` - An Ethereum address of the token to trade from (either a ERC20 token or AUT)\r\n//    `address2` - An Ethereum address of the token to trade to (either a ERC20 token or AUT)\r\n//    `pair` - The pair contract for the two tokens\r\nexport async function fetchReserves(address1, address2, pair, signer) {\r\n  try {\r\n\r\n    // Get decimals for each coin\r\n    const coin1 = new Contract(address1, ERC20.abi, signer);\r\n    const coin2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n    const coin1Decimals = await getDecimals(coin1);\r\n    const coin2Decimals = await getDecimals(coin2);\r\n\r\n    // Get reserves\r\n    const reservesRaw = await pair.getReserves();\r\n\r\n    // Put the results in the right order\r\n    const results =  [\r\n      (await pair.token0()) === address1 ? reservesRaw[0] : reservesRaw[1],\r\n      (await pair.token1()) === address2 ? reservesRaw[1] : reservesRaw[0],\r\n    ];\r\n\r\n    // Scale each to the right decimal place\r\n    return [\r\n      (results[0]*10**(-coin1Decimals)),\r\n      (results[1]*10**(-coin2Decimals))\r\n    ]\r\n  } catch (err) {\r\n    console.log(\"error!\");\r\n    console.log(err);\r\n    return [0, 0];\r\n  }\r\n}\r\n\r\n// This function returns the reserves stored in a the liquidity pool between the token of address1 and the token\r\n// of address2, as well as the liquidity tokens owned by accountAddress for that pair.\r\n//    `address1` - An Ethereum address of the token to trade from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the token to trade to (either a token or AUT)\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\nexport async function getReserves(\r\n  address1,\r\n  address2,\r\n  factory,\r\n  signer,\r\n  accountAddress\r\n) {\r\n  try {\r\n    const pairAddress = await factory.getPair(address1, address2);\r\n    const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n  \r\n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\r\n  \r\n      const reservesRaw = await fetchReserves(address1, address2, pair, signer);\r\n      const liquidityTokens_BN = await pair.balanceOf(accountAddress);\r\n      const liquidityTokens = Number(\r\n        ethers.utils.formatEther(liquidityTokens_BN)\r\n      );\r\n    \r\n      return [\r\n        reservesRaw[0].toPrecision(6),\r\n        reservesRaw[1].toPrecision(6),\r\n        liquidityTokens,\r\n      ];\r\n    } else {\r\n      console.log(\"no reserves yet\");\r\n      return [0,0,0];\r\n    }\r\n  }catch (err) {\r\n    console.log(\"error!\");\r\n    console.log(err);\r\n    return [0, 0, 0];\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}