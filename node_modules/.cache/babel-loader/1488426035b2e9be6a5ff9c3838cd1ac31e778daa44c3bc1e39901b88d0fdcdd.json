{"ast":null,"code":"\"use strict\";\n\nimport { HashZero } from \"@ethersproject/constants\";\nimport { arrayify, concat, hexlify } from \"@ethersproject/bytes\";\nimport { toUtf8Bytes, toUtf8String } from \"./utf8\";\nexport function formatBytes32String(text) {\n  // Get the bytes\n  var bytes = toUtf8Bytes(text);\n  // Check we have room for null-termination\n  if (bytes.length > 31) {\n    throw new Error(\"bytes32 string must be less than 32 bytes\");\n  }\n  // Zero-pad (implicitly null-terminates)\n  return hexlify(concat([bytes, HashZero]).slice(0, 32));\n}\nexport function parseBytes32String(bytes) {\n  var data = arrayify(bytes);\n  // Must be 32 bytes with a null-termination\n  if (data.length !== 32) {\n    throw new Error(\"invalid bytes32 - not 32 bytes long\");\n  }\n  if (data[31] !== 0) {\n    throw new Error(\"invalid bytes32 string - no null terminator\");\n  }\n  // Find the null termination\n  var length = 31;\n  while (data[length - 1] === 0) {\n    length--;\n  }\n  // Determine the string value\n  return toUtf8String(data.slice(0, length));\n}","map":{"version":3,"names":["HashZero","arrayify","concat","hexlify","toUtf8Bytes","toUtf8String","formatBytes32String","text","bytes","length","Error","slice","parseBytes32String","data"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\ethers\\node_modules\\@ethersproject\\strings\\src.ts\\bytes32.ts"],"sourcesContent":["\"use strict\";\n\nimport { HashZero } from \"@ethersproject/constants\";\nimport { arrayify, BytesLike, concat, hexlify } from \"@ethersproject/bytes\";\n\nimport { toUtf8Bytes, toUtf8String } from \"./utf8\";\n\n\nexport function formatBytes32String(text: string): string {\n\n    // Get the bytes\n    const bytes = toUtf8Bytes(text);\n\n    // Check we have room for null-termination\n    if (bytes.length > 31) { throw new Error(\"bytes32 string must be less than 32 bytes\"); }\n\n    // Zero-pad (implicitly null-terminates)\n    return hexlify(concat([ bytes, HashZero ]).slice(0, 32));\n}\n\nexport function parseBytes32String(bytes: BytesLike): string {\n    const data = arrayify(bytes);\n\n    // Must be 32 bytes with a null-termination\n    if (data.length !== 32) { throw new Error(\"invalid bytes32 - not 32 bytes long\"); }\n    if (data[31] !== 0) { throw new Error(\"invalid bytes32 string - no null terminator\"); }\n\n    // Find the null termination\n    let length = 31;\n    while (data[length - 1] === 0) { length--; }\n\n    // Determine the string value\n    return toUtf8String(data.slice(0, length));\n}\n\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,QAAQ,EAAaC,MAAM,EAAEC,OAAO,QAAQ,sBAAsB;AAE3E,SAASC,WAAW,EAAEC,YAAY,QAAQ,QAAQ;AAGlD,OAAM,SAAUC,mBAAmBA,CAACC,IAAY;EAE5C;EACA,IAAMC,KAAK,GAAGJ,WAAW,CAACG,IAAI,CAAC;EAE/B;EACA,IAAIC,KAAK,CAACC,MAAM,GAAG,EAAE,EAAE;IAAE,MAAM,IAAIC,KAAK,CAAC,2CAA2C,CAAC;;EAErF;EACA,OAAOP,OAAO,CAACD,MAAM,CAAC,CAAEM,KAAK,EAAER,QAAQ,CAAE,CAAC,CAACW,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAC5D;AAEA,OAAM,SAAUC,kBAAkBA,CAACJ,KAAgB;EAC/C,IAAMK,IAAI,GAAGZ,QAAQ,CAACO,KAAK,CAAC;EAE5B;EACA,IAAIK,IAAI,CAACJ,MAAM,KAAK,EAAE,EAAE;IAAE,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;;EAChF,IAAIG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;IAAE,MAAM,IAAIH,KAAK,CAAC,6CAA6C,CAAC;;EAEpF;EACA,IAAID,MAAM,GAAG,EAAE;EACf,OAAOI,IAAI,CAACJ,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,EAAE;IAAEA,MAAM,EAAE;;EAEzC;EACA,OAAOJ,YAAY,CAACQ,IAAI,CAACF,KAAK,CAAC,CAAC,EAAEF,MAAM,CAAC,CAAC;AAC9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}