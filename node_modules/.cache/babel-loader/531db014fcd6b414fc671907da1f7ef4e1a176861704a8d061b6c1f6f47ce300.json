{"ast":null,"code":"\"use strict\";\n\nimport _inherits from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n;\nvar _constructorGuard = {};\nvar ModifiersBytes = {\n  calldata: true,\n  memory: true,\n  storage: true\n};\nvar ModifiersNest = {\n  calldata: true,\n  memory: true\n};\nfunction checkModifier(type, name) {\n  if (type === \"bytes\" || type === \"string\") {\n    if (ModifiersBytes[name]) {\n      return true;\n    }\n  } else if (type === \"address\") {\n    if (name === \"payable\") {\n      return true;\n    }\n  } else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n    if (ModifiersNest[name]) {\n      return true;\n    }\n  }\n  if (ModifiersBytes[name] || name === \"payable\") {\n    logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n  }\n  return false;\n}\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param, allowIndexed) {\n  var originalParam = param;\n  function throwError(i) {\n    logger.throwArgumentError(\"unexpected character at position \".concat(i), \"param\", param);\n  }\n  param = param.replace(/\\s/g, \" \");\n  function newNode(parent) {\n    var node = {\n      type: \"\",\n      name: \"\",\n      parent: parent,\n      state: {\n        allowType: true\n      }\n    };\n    if (allowIndexed) {\n      node.indexed = false;\n    }\n    return node;\n  }\n  var parent = {\n    type: \"\",\n    name: \"\",\n    state: {\n      allowType: true\n    }\n  };\n  var node = parent;\n  for (var i = 0; i < param.length; i++) {\n    var c = param[i];\n    switch (c) {\n      case \"(\":\n        if (node.state.allowType && node.type === \"\") {\n          node.type = \"tuple\";\n        } else if (!node.state.allowParams) {\n          throwError(i);\n        }\n        node.state.allowType = false;\n        node.type = verifyType(node.type);\n        node.components = [newNode(node)];\n        node = node.components[0];\n        break;\n      case \")\":\n        delete node.state;\n        if (node.name === \"indexed\") {\n          if (!allowIndexed) {\n            throwError(i);\n          }\n          node.indexed = true;\n          node.name = \"\";\n        }\n        if (checkModifier(node.type, node.name)) {\n          node.name = \"\";\n        }\n        node.type = verifyType(node.type);\n        var child = node;\n        node = node.parent;\n        if (!node) {\n          throwError(i);\n        }\n        delete child.parent;\n        node.state.allowParams = false;\n        node.state.allowName = true;\n        node.state.allowArray = true;\n        break;\n      case \",\":\n        delete node.state;\n        if (node.name === \"indexed\") {\n          if (!allowIndexed) {\n            throwError(i);\n          }\n          node.indexed = true;\n          node.name = \"\";\n        }\n        if (checkModifier(node.type, node.name)) {\n          node.name = \"\";\n        }\n        node.type = verifyType(node.type);\n        var sibling = newNode(node.parent);\n        //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n        node.parent.components.push(sibling);\n        delete node.parent;\n        node = sibling;\n        break;\n      // Hit a space...\n      case \" \":\n        // If reading type, the type is done and may read a param or name\n        if (node.state.allowType) {\n          if (node.type !== \"\") {\n            node.type = verifyType(node.type);\n            delete node.state.allowType;\n            node.state.allowName = true;\n            node.state.allowParams = true;\n          }\n        }\n        // If reading name, the name is done\n        if (node.state.allowName) {\n          if (node.name !== \"\") {\n            if (node.name === \"indexed\") {\n              if (!allowIndexed) {\n                throwError(i);\n              }\n              if (node.indexed) {\n                throwError(i);\n              }\n              node.indexed = true;\n              node.name = \"\";\n            } else if (checkModifier(node.type, node.name)) {\n              node.name = \"\";\n            } else {\n              node.state.allowName = false;\n            }\n          }\n        }\n        break;\n      case \"[\":\n        if (!node.state.allowArray) {\n          throwError(i);\n        }\n        node.type += c;\n        node.state.allowArray = false;\n        node.state.allowName = false;\n        node.state.readArray = true;\n        break;\n      case \"]\":\n        if (!node.state.readArray) {\n          throwError(i);\n        }\n        node.type += c;\n        node.state.readArray = false;\n        node.state.allowArray = true;\n        node.state.allowName = true;\n        break;\n      default:\n        if (node.state.allowType) {\n          node.type += c;\n          node.state.allowParams = true;\n          node.state.allowArray = true;\n        } else if (node.state.allowName) {\n          node.name += c;\n          delete node.state.allowArray;\n        } else if (node.state.readArray) {\n          node.type += c;\n        } else {\n          throwError(i);\n        }\n    }\n  }\n  if (node.parent) {\n    logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n  }\n  delete parent.state;\n  if (node.name === \"indexed\") {\n    if (!allowIndexed) {\n      throwError(originalParam.length - 7);\n    }\n    if (node.indexed) {\n      throwError(originalParam.length - 7);\n    }\n    node.indexed = true;\n    node.name = \"\";\n  } else if (checkModifier(node.type, node.name)) {\n    node.name = \"\";\n  }\n  parent.type = verifyType(parent.type);\n  return parent;\n}\nfunction populate(object, params) {\n  for (var key in params) {\n    defineReadOnly(object, key, params[key]);\n  }\n}\nexport var FormatTypes = Object.freeze({\n  // Bare formatting, as is needed for computing a sighash of an event or function\n  sighash: \"sighash\",\n  // Human-Readable with Minimal spacing and without names (compact human-readable)\n  minimal: \"minimal\",\n  // Human-Readable with nice spacing, including all names\n  full: \"full\",\n  // JSON-format a la Solidity\n  json: \"json\"\n});\nvar paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nexport var ParamType = /*#__PURE__*/function () {\n  function ParamType(constructorGuard, params) {\n    _classCallCheck(this, ParamType);\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new ParamType()\"\n      });\n    }\n    populate(this, params);\n    var match = this.type.match(paramTypeArray);\n    if (match) {\n      populate(this, {\n        arrayLength: parseInt(match[2] || \"-1\"),\n        arrayChildren: ParamType.fromObject({\n          type: match[1],\n          components: this.components\n        }),\n        baseType: \"array\"\n      });\n    } else {\n      populate(this, {\n        arrayLength: null,\n        arrayChildren: null,\n        baseType: this.components != null ? \"tuple\" : this.type\n      });\n    }\n    this._isParamType = true;\n    Object.freeze(this);\n  }\n  // Format the parameter fragment\n  //   - sighash: \"(uint256,address)\"\n  //   - minimal: \"tuple(uint256,address) indexed\"\n  //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n  _createClass(ParamType, [{\n    key: \"format\",\n    value: function format(_format) {\n      if (!_format) {\n        _format = FormatTypes.sighash;\n      }\n      if (!FormatTypes[_format]) {\n        logger.throwArgumentError(\"invalid format type\", \"format\", _format);\n      }\n      if (_format === FormatTypes.json) {\n        var _result = {\n          type: this.baseType === \"tuple\" ? \"tuple\" : this.type,\n          name: this.name || undefined\n        };\n        if (typeof this.indexed === \"boolean\") {\n          _result.indexed = this.indexed;\n        }\n        if (this.components) {\n          _result.components = this.components.map(function (comp) {\n            return JSON.parse(comp.format(_format));\n          });\n        }\n        return JSON.stringify(_result);\n      }\n      var result = \"\";\n      // Array\n      if (this.baseType === \"array\") {\n        result += this.arrayChildren.format(_format);\n        result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n      } else {\n        if (this.baseType === \"tuple\") {\n          if (_format !== FormatTypes.sighash) {\n            result += this.type;\n          }\n          result += \"(\" + this.components.map(function (comp) {\n            return comp.format(_format);\n          }).join(_format === FormatTypes.full ? \", \" : \",\") + \")\";\n        } else {\n          result += this.type;\n        }\n      }\n      if (_format !== FormatTypes.sighash) {\n        if (this.indexed === true) {\n          result += \" indexed\";\n        }\n        if (_format === FormatTypes.full && this.name) {\n          result += \" \" + this.name;\n        }\n      }\n      return result;\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value, allowIndexed) {\n      if (typeof value === \"string\") {\n        return ParamType.fromString(value, allowIndexed);\n      }\n      return ParamType.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (ParamType.isParamType(value)) {\n        return value;\n      }\n      return new ParamType(_constructorGuard, {\n        name: value.name || null,\n        type: verifyType(value.type),\n        indexed: value.indexed == null ? null : !!value.indexed,\n        components: value.components ? value.components.map(ParamType.fromObject) : null\n      });\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value, allowIndexed) {\n      function ParamTypify(node) {\n        return ParamType.fromObject({\n          name: node.name,\n          type: node.type,\n          indexed: node.indexed,\n          components: node.components\n        });\n      }\n      return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n  }, {\n    key: \"isParamType\",\n    value: function isParamType(value) {\n      return !!(value != null && value._isParamType);\n    }\n  }]);\n  return ParamType;\n}();\n;\nfunction parseParams(value, allowIndex) {\n  return splitNesting(value).map(function (param) {\n    return ParamType.fromString(param, allowIndex);\n  });\n}\nexport var Fragment = /*#__PURE__*/function () {\n  function Fragment(constructorGuard, params) {\n    _classCallCheck(this, Fragment);\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new Fragment()\"\n      });\n    }\n    populate(this, params);\n    this._isFragment = true;\n    Object.freeze(this);\n  }\n  _createClass(Fragment, null, [{\n    key: \"from\",\n    value: function from(value) {\n      if (Fragment.isFragment(value)) {\n        return value;\n      }\n      if (typeof value === \"string\") {\n        return Fragment.fromString(value);\n      }\n      return Fragment.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (Fragment.isFragment(value)) {\n        return value;\n      }\n      switch (value.type) {\n        case \"function\":\n          return FunctionFragment.fromObject(value);\n        case \"event\":\n          return EventFragment.fromObject(value);\n        case \"constructor\":\n          return ConstructorFragment.fromObject(value);\n        case \"error\":\n          return ErrorFragment.fromObject(value);\n        case \"fallback\":\n        case \"receive\":\n          // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n          return null;\n      }\n      return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n      value = value.replace(/\\s/g, \" \");\n      value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n      value = value.trim();\n      if (value.split(\" \")[0] === \"event\") {\n        return EventFragment.fromString(value.substring(5).trim());\n      } else if (value.split(\" \")[0] === \"function\") {\n        return FunctionFragment.fromString(value.substring(8).trim());\n      } else if (value.split(\"(\")[0].trim() === \"constructor\") {\n        return ConstructorFragment.fromString(value.trim());\n      } else if (value.split(\" \")[0] === \"error\") {\n        return ErrorFragment.fromString(value.substring(5).trim());\n      }\n      return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n  }, {\n    key: \"isFragment\",\n    value: function isFragment(value) {\n      return !!(value && value._isFragment);\n    }\n  }]);\n  return Fragment;\n}();\nexport var EventFragment = /*#__PURE__*/function (_Fragment) {\n  _inherits(EventFragment, _Fragment);\n  var _super = _createSuper(EventFragment);\n  function EventFragment() {\n    _classCallCheck(this, EventFragment);\n    return _super.apply(this, arguments);\n  }\n  _createClass(EventFragment, [{\n    key: \"format\",\n    value: function format(_format2) {\n      if (!_format2) {\n        _format2 = FormatTypes.sighash;\n      }\n      if (!FormatTypes[_format2]) {\n        logger.throwArgumentError(\"invalid format type\", \"format\", _format2);\n      }\n      if (_format2 === FormatTypes.json) {\n        return JSON.stringify({\n          type: \"event\",\n          anonymous: this.anonymous,\n          name: this.name,\n          inputs: this.inputs.map(function (input) {\n            return JSON.parse(input.format(_format2));\n          })\n        });\n      }\n      var result = \"\";\n      if (_format2 !== FormatTypes.sighash) {\n        result += \"event \";\n      }\n      result += this.name + \"(\" + this.inputs.map(function (input) {\n        return input.format(_format2);\n      }).join(_format2 === FormatTypes.full ? \", \" : \",\") + \") \";\n      if (_format2 !== FormatTypes.sighash) {\n        if (this.anonymous) {\n          result += \"anonymous \";\n        }\n      }\n      return result.trim();\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (typeof value === \"string\") {\n        return EventFragment.fromString(value);\n      }\n      return EventFragment.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (EventFragment.isEventFragment(value)) {\n        return value;\n      }\n      if (value.type !== \"event\") {\n        logger.throwArgumentError(\"invalid event object\", \"value\", value);\n      }\n      var params = {\n        name: verifyIdentifier(value.name),\n        anonymous: value.anonymous,\n        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n        type: \"event\"\n      };\n      return new EventFragment(_constructorGuard, params);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      var match = value.match(regexParen);\n      if (!match) {\n        logger.throwArgumentError(\"invalid event string\", \"value\", value);\n      }\n      var anonymous = false;\n      match[3].split(\" \").forEach(function (modifier) {\n        switch (modifier.trim()) {\n          case \"anonymous\":\n            anonymous = true;\n            break;\n          case \"\":\n            break;\n          default:\n            logger.warn(\"unknown modifier: \" + modifier);\n        }\n      });\n      return EventFragment.fromObject({\n        name: match[1].trim(),\n        anonymous: anonymous,\n        inputs: parseParams(match[2], true),\n        type: \"event\"\n      });\n    }\n  }, {\n    key: \"isEventFragment\",\n    value: function isEventFragment(value) {\n      return value && value._isFragment && value.type === \"event\";\n    }\n  }]);\n  return EventFragment;\n}(Fragment);\nfunction parseGas(value, params) {\n  params.gas = null;\n  var comps = value.split(\"@\");\n  if (comps.length !== 1) {\n    if (comps.length > 2) {\n      logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n    }\n    if (!comps[1].match(/^[0-9]+$/)) {\n      logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n    }\n    params.gas = BigNumber.from(comps[1]);\n    return comps[0];\n  }\n  return value;\n}\nfunction parseModifiers(value, params) {\n  params.constant = false;\n  params.payable = false;\n  params.stateMutability = \"nonpayable\";\n  value.split(\" \").forEach(function (modifier) {\n    switch (modifier.trim()) {\n      case \"constant\":\n        params.constant = true;\n        break;\n      case \"payable\":\n        params.payable = true;\n        params.stateMutability = \"payable\";\n        break;\n      case \"nonpayable\":\n        params.payable = false;\n        params.stateMutability = \"nonpayable\";\n        break;\n      case \"pure\":\n        params.constant = true;\n        params.stateMutability = \"pure\";\n        break;\n      case \"view\":\n        params.constant = true;\n        params.stateMutability = \"view\";\n        break;\n      case \"external\":\n      case \"public\":\n      case \"\":\n        break;\n      default:\n        console.log(\"unknown modifier: \" + modifier);\n    }\n  });\n}\nfunction verifyState(value) {\n  var result = {\n    constant: false,\n    payable: true,\n    stateMutability: \"payable\"\n  };\n  if (value.stateMutability != null) {\n    result.stateMutability = value.stateMutability;\n    // Set (and check things are consistent) the constant property\n    result.constant = result.stateMutability === \"view\" || result.stateMutability === \"pure\";\n    if (value.constant != null) {\n      if (!!value.constant !== result.constant) {\n        logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n      }\n    }\n    // Set (and check things are consistent) the payable property\n    result.payable = result.stateMutability === \"payable\";\n    if (value.payable != null) {\n      if (!!value.payable !== result.payable) {\n        logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n      }\n    }\n  } else if (value.payable != null) {\n    result.payable = !!value.payable;\n    // If payable we can assume non-constant; otherwise we can't assume\n    if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n      logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n    result.constant = !!value.constant;\n    if (result.constant) {\n      result.stateMutability = \"view\";\n    } else {\n      result.stateMutability = result.payable ? \"payable\" : \"nonpayable\";\n    }\n    if (result.payable && result.constant) {\n      logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n    }\n  } else if (value.constant != null) {\n    result.constant = !!value.constant;\n    result.payable = !result.constant;\n    result.stateMutability = result.constant ? \"view\" : \"payable\";\n  } else if (value.type !== \"constructor\") {\n    logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n  }\n  return result;\n}\nexport var ConstructorFragment = /*#__PURE__*/function (_Fragment2) {\n  _inherits(ConstructorFragment, _Fragment2);\n  var _super2 = _createSuper(ConstructorFragment);\n  function ConstructorFragment() {\n    _classCallCheck(this, ConstructorFragment);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(ConstructorFragment, [{\n    key: \"format\",\n    value: function format(_format3) {\n      if (!_format3) {\n        _format3 = FormatTypes.sighash;\n      }\n      if (!FormatTypes[_format3]) {\n        logger.throwArgumentError(\"invalid format type\", \"format\", _format3);\n      }\n      if (_format3 === FormatTypes.json) {\n        return JSON.stringify({\n          type: \"constructor\",\n          stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n          payable: this.payable,\n          gas: this.gas ? this.gas.toNumber() : undefined,\n          inputs: this.inputs.map(function (input) {\n            return JSON.parse(input.format(_format3));\n          })\n        });\n      }\n      if (_format3 === FormatTypes.sighash) {\n        logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"format(sighash)\"\n        });\n      }\n      var result = \"constructor(\" + this.inputs.map(function (input) {\n        return input.format(_format3);\n      }).join(_format3 === FormatTypes.full ? \", \" : \",\") + \") \";\n      if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n        result += this.stateMutability + \" \";\n      }\n      return result.trim();\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (typeof value === \"string\") {\n        return ConstructorFragment.fromString(value);\n      }\n      return ConstructorFragment.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (ConstructorFragment.isConstructorFragment(value)) {\n        return value;\n      }\n      if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n      }\n      var state = verifyState(value);\n      if (state.constant) {\n        logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n      }\n      var params = {\n        name: null,\n        type: value.type,\n        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n        payable: state.payable,\n        stateMutability: state.stateMutability,\n        gas: value.gas ? BigNumber.from(value.gas) : null\n      };\n      return new ConstructorFragment(_constructorGuard, params);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      var params = {\n        type: \"constructor\"\n      };\n      value = parseGas(value, params);\n      var parens = value.match(regexParen);\n      if (!parens || parens[1].trim() !== \"constructor\") {\n        logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n      }\n      params.inputs = parseParams(parens[2].trim(), false);\n      parseModifiers(parens[3].trim(), params);\n      return ConstructorFragment.fromObject(params);\n    }\n  }, {\n    key: \"isConstructorFragment\",\n    value: function isConstructorFragment(value) {\n      return value && value._isFragment && value.type === \"constructor\";\n    }\n  }]);\n  return ConstructorFragment;\n}(Fragment);\nexport var FunctionFragment = /*#__PURE__*/function (_ConstructorFragment) {\n  _inherits(FunctionFragment, _ConstructorFragment);\n  var _super3 = _createSuper(FunctionFragment);\n  function FunctionFragment() {\n    _classCallCheck(this, FunctionFragment);\n    return _super3.apply(this, arguments);\n  }\n  _createClass(FunctionFragment, [{\n    key: \"format\",\n    value: function format(_format4) {\n      if (!_format4) {\n        _format4 = FormatTypes.sighash;\n      }\n      if (!FormatTypes[_format4]) {\n        logger.throwArgumentError(\"invalid format type\", \"format\", _format4);\n      }\n      if (_format4 === FormatTypes.json) {\n        return JSON.stringify({\n          type: \"function\",\n          name: this.name,\n          constant: this.constant,\n          stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n          payable: this.payable,\n          gas: this.gas ? this.gas.toNumber() : undefined,\n          inputs: this.inputs.map(function (input) {\n            return JSON.parse(input.format(_format4));\n          }),\n          outputs: this.outputs.map(function (output) {\n            return JSON.parse(output.format(_format4));\n          })\n        });\n      }\n      var result = \"\";\n      if (_format4 !== FormatTypes.sighash) {\n        result += \"function \";\n      }\n      result += this.name + \"(\" + this.inputs.map(function (input) {\n        return input.format(_format4);\n      }).join(_format4 === FormatTypes.full ? \", \" : \",\") + \") \";\n      if (_format4 !== FormatTypes.sighash) {\n        if (this.stateMutability) {\n          if (this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n          }\n        } else if (this.constant) {\n          result += \"view \";\n        }\n        if (this.outputs && this.outputs.length) {\n          result += \"returns (\" + this.outputs.map(function (output) {\n            return output.format(_format4);\n          }).join(\", \") + \") \";\n        }\n        if (this.gas != null) {\n          result += \"@\" + this.gas.toString() + \" \";\n        }\n      }\n      return result.trim();\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (typeof value === \"string\") {\n        return FunctionFragment.fromString(value);\n      }\n      return FunctionFragment.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (FunctionFragment.isFunctionFragment(value)) {\n        return value;\n      }\n      if (value.type !== \"function\") {\n        logger.throwArgumentError(\"invalid function object\", \"value\", value);\n      }\n      var state = verifyState(value);\n      var params = {\n        type: value.type,\n        name: verifyIdentifier(value.name),\n        constant: state.constant,\n        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n        outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],\n        payable: state.payable,\n        stateMutability: state.stateMutability,\n        gas: value.gas ? BigNumber.from(value.gas) : null\n      };\n      return new FunctionFragment(_constructorGuard, params);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      var params = {\n        type: \"function\"\n      };\n      value = parseGas(value, params);\n      var comps = value.split(\" returns \");\n      if (comps.length > 2) {\n        logger.throwArgumentError(\"invalid function string\", \"value\", value);\n      }\n      var parens = comps[0].match(regexParen);\n      if (!parens) {\n        logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n      }\n      params.name = parens[1].trim();\n      if (params.name) {\n        verifyIdentifier(params.name);\n      }\n      params.inputs = parseParams(parens[2], false);\n      parseModifiers(parens[3].trim(), params);\n      // We have outputs\n      if (comps.length > 1) {\n        var returns = comps[1].match(regexParen);\n        if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n          logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n        }\n        params.outputs = parseParams(returns[2], false);\n      } else {\n        params.outputs = [];\n      }\n      return FunctionFragment.fromObject(params);\n    }\n  }, {\n    key: \"isFunctionFragment\",\n    value: function isFunctionFragment(value) {\n      return value && value._isFragment && value.type === \"function\";\n    }\n  }]);\n  return FunctionFragment;\n}(ConstructorFragment);\n//export class StructFragment extends Fragment {\n//}\nfunction checkForbidden(fragment) {\n  var sig = fragment.format();\n  if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n    logger.throwArgumentError(\"cannot specify user defined \".concat(sig, \" error\"), \"fragment\", fragment);\n  }\n  return fragment;\n}\nexport var ErrorFragment = /*#__PURE__*/function (_Fragment3) {\n  _inherits(ErrorFragment, _Fragment3);\n  var _super4 = _createSuper(ErrorFragment);\n  function ErrorFragment() {\n    _classCallCheck(this, ErrorFragment);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(ErrorFragment, [{\n    key: \"format\",\n    value: function format(_format5) {\n      if (!_format5) {\n        _format5 = FormatTypes.sighash;\n      }\n      if (!FormatTypes[_format5]) {\n        logger.throwArgumentError(\"invalid format type\", \"format\", _format5);\n      }\n      if (_format5 === FormatTypes.json) {\n        return JSON.stringify({\n          type: \"error\",\n          name: this.name,\n          inputs: this.inputs.map(function (input) {\n            return JSON.parse(input.format(_format5));\n          })\n        });\n      }\n      var result = \"\";\n      if (_format5 !== FormatTypes.sighash) {\n        result += \"error \";\n      }\n      result += this.name + \"(\" + this.inputs.map(function (input) {\n        return input.format(_format5);\n      }).join(_format5 === FormatTypes.full ? \", \" : \",\") + \") \";\n      return result.trim();\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (typeof value === \"string\") {\n        return ErrorFragment.fromString(value);\n      }\n      return ErrorFragment.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (ErrorFragment.isErrorFragment(value)) {\n        return value;\n      }\n      if (value.type !== \"error\") {\n        logger.throwArgumentError(\"invalid error object\", \"value\", value);\n      }\n      var params = {\n        type: value.type,\n        name: verifyIdentifier(value.name),\n        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []\n      };\n      return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      var params = {\n        type: \"error\"\n      };\n      var parens = value.match(regexParen);\n      if (!parens) {\n        logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n      }\n      params.name = parens[1].trim();\n      if (params.name) {\n        verifyIdentifier(params.name);\n      }\n      params.inputs = parseParams(parens[2], false);\n      return checkForbidden(ErrorFragment.fromObject(params));\n    }\n  }, {\n    key: \"isErrorFragment\",\n    value: function isErrorFragment(value) {\n      return value && value._isFragment && value.type === \"error\";\n    }\n  }]);\n  return ErrorFragment;\n}(Fragment);\nfunction verifyType(type) {\n  // These need to be transformed to their full description\n  if (type.match(/^uint($|[^1-9])/)) {\n    type = \"uint256\" + type.substring(4);\n  } else if (type.match(/^int($|[^1-9])/)) {\n    type = \"int256\" + type.substring(3);\n  }\n  // @TODO: more verification\n  return type;\n}\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nvar regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value) {\n  if (!value || !value.match(regexIdentifier)) {\n    logger.throwArgumentError(\"invalid identifier \\\"\".concat(value, \"\\\"\"), \"value\", value);\n  }\n  return value;\n}\nvar regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\nfunction splitNesting(value) {\n  value = value.trim();\n  var result = [];\n  var accum = \"\";\n  var depth = 0;\n  for (var offset = 0; offset < value.length; offset++) {\n    var c = value[offset];\n    if (c === \",\" && depth === 0) {\n      result.push(accum);\n      accum = \"\";\n    } else {\n      accum += c;\n      if (c === \"(\") {\n        depth++;\n      } else if (c === \")\") {\n        depth--;\n        if (depth === -1) {\n          logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n        }\n      }\n    }\n  }\n  if (accum) {\n    result.push(accum);\n  }\n  return result;\n}","map":{"version":3,"names":["_inherits","_createSuper","_classCallCheck","_createClass","BigNumber","defineReadOnly","Logger","version","logger","_constructorGuard","ModifiersBytes","calldata","memory","storage","ModifiersNest","checkModifier","type","name","indexOf","throwArgumentError","parseParamType","param","allowIndexed","originalParam","throwError","i","concat","replace","newNode","parent","node","state","allowType","indexed","length","c","allowParams","verifyType","components","child","allowName","allowArray","sibling","push","readArray","populate","object","params","key","FormatTypes","Object","freeze","sighash","minimal","full","json","paramTypeArray","RegExp","ParamType","constructorGuard","errors","UNSUPPORTED_OPERATION","operation","match","arrayLength","parseInt","arrayChildren","fromObject","baseType","_isParamType","value","format","result","undefined","map","comp","JSON","parse","stringify","String","join","from","fromString","isParamType","ParamTypify","parseParams","allowIndex","splitNesting","Fragment","_isFragment","isFragment","FunctionFragment","EventFragment","ConstructorFragment","ErrorFragment","trim","split","substring","_Fragment","_super","apply","arguments","anonymous","inputs","input","isEventFragment","verifyIdentifier","regexParen","forEach","modifier","warn","parseGas","gas","comps","parseModifiers","constant","payable","stateMutability","console","log","verifyState","_Fragment2","_super2","toNumber","isConstructorFragment","parens","_ConstructorFragment","_super3","outputs","output","toString","isFunctionFragment","returns","checkForbidden","fragment","sig","_Fragment3","_super4","isErrorFragment","regexIdentifier","accum","depth","offset"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\abi\\src.ts\\fragments.ts"],"sourcesContent":["\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport interface JsonFragmentType {\n    readonly name?: string;\n    readonly indexed?: boolean;\n    readonly type?: string;\n    readonly internalType?: any; // @TODO: in v6 reduce type\n    readonly components?: ReadonlyArray<JsonFragmentType>;\n}\n\nexport interface JsonFragment {\n    readonly name?: string;\n    readonly type?: string;\n\n    readonly anonymous?: boolean;\n\n    readonly payable?: boolean;\n    readonly constant?: boolean;\n    readonly stateMutability?: string;\n\n    readonly inputs?: ReadonlyArray<JsonFragmentType>;\n    readonly outputs?: ReadonlyArray<JsonFragmentType>;\n\n    readonly gas?: string;\n};\n\nconst _constructorGuard = { };\n\n// AST Node parser state\ntype ParseState = {\n    allowArray?: boolean,\n    allowName?: boolean,\n    allowParams?: boolean,\n    allowType?: boolean,\n    readArray?: boolean,\n};\n\n// AST Node\ntype ParseNode = {\n    parent?: any,\n    type?: string,\n    name?: string,\n    state?: ParseState,\n    indexed?: boolean,\n    components?: Array<ParseNode>\n};\n\nlet ModifiersBytes: { [ name: string ]: boolean } = { calldata: true, memory: true, storage: true };\nlet ModifiersNest: { [ name: string ]: boolean } = { calldata: true, memory: true };\nfunction checkModifier(type: string, name: string): boolean {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) { return true; }\n    } else if (type === \"address\") {\n        if (name === \"payable\") { return true; }\n    } else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) { return true; }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param: string, allowIndexed: boolean): ParseNode {\n\n    let originalParam = param;\n    function throwError(i: number) {\n        logger.throwArgumentError(`unexpected character at position ${ i }`, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n\n    function newNode(parent: ParseNode): ParseNode {\n        let node: ParseNode = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) { node.indexed = false; }\n        return node\n    }\n\n    let parent: ParseNode = { type: \"\", name: \"\", state: { allowType: true } };\n    let node = parent;\n\n    for (let i = 0; i < param.length; i++) {\n        let c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                } else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [ newNode(node) ];\n                node = node.components[0];\n                break;\n\n            case \")\":\n                delete node.state;\n\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) { throwError(i); }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n\n                if (checkModifier(node.type, node.name)) { node.name = \"\"; }\n\n                node.type = verifyType(node.type);\n\n                let child = node;\n                node = node.parent;\n                if (!node) { throwError(i); }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n\n            case \",\":\n                delete node.state;\n\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) { throwError(i); }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n\n                if (checkModifier(node.type, node.name)) { node.name = \"\"; }\n\n                node.type = verifyType(node.type);\n\n                let sibling: ParseNode = newNode(node.parent);\n                 //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n\n            // Hit a space...\n            case \" \":\n\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) { throwError(i); }\n                            if (node.indexed) { throwError(i); }\n                            node.indexed = true;\n                            node.name = \"\";\n                        } else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        } else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n\n                break;\n\n            case \"[\":\n                if (!node.state.allowArray) { throwError(i); }\n\n                node.type += c;\n\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n\n            case \"]\":\n                if (!node.state.readArray) { throwError(i); }\n\n                node.type += c;\n\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                } else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                } else if (node.state.readArray) {\n                    node.type += c;\n                } else {\n                    throwError(i);\n               }\n        }\n    }\n\n    if (node.parent) { logger.throwArgumentError(\"unexpected eof\", \"param\", param); }\n\n    delete parent.state;\n\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) { throwError(originalParam.length - 7); }\n        if (node.indexed) { throwError(originalParam.length - 7); }\n        node.indexed = true;\n        node.name = \"\";\n    } else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n\n    parent.type = verifyType(parent.type);\n\n    return parent;\n}\n\nfunction populate(object: any, params: any) {\n    for (let key in params) { defineReadOnly(object, key, params[key]); }\n}\n\nexport const FormatTypes: { [ name: string ]: string } = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n\n    // Human-Readable with nice spacing, including all names\n    full: \"full\",\n\n    // JSON-format a la Solidity\n    json: \"json\"\n});\n\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\n\nexport class ParamType {\n\n    // The local name of the parameter (of null if unbound)\n    readonly name: string;\n\n    // The fully qualified type (e.g. \"address\", \"tuple(address)\", \"uint256[3][]\"\n    readonly type: string;\n\n    // The base type (e.g. \"address\", \"tuple\", \"array\")\n    readonly baseType: string;\n\n    // Indexable Paramters ONLY (otherwise null)\n    readonly indexed: boolean;\n\n    // Tuples ONLY: (otherwise null)\n    //  - sub-components\n    readonly components: Array<ParamType>;\n\n    // Arrays ONLY: (otherwise null)\n    //  - length of the array (-1 for dynamic length)\n    //  - child type\n    readonly arrayLength: number;\n    readonly arrayChildren: ParamType;\n\n    readonly _isParamType: boolean;\n\n    constructor(constructorGuard: any, params: any) {\n        if (constructorGuard !== _constructorGuard) { logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new ParamType()\"\n        }); }\n        populate(this, params);\n\n        let match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        } else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\": this.type)\n            });\n        }\n\n        this._isParamType = true;\n\n        Object.freeze(this);\n    }\n\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            let result: any = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\": this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof(this.indexed) === \"boolean\") { result.indexed = this.indexed; }\n            if (this.components) {\n                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n\n        let result = \"\";\n\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\": String(this.arrayLength)) + \"]\";\n        } else {\n            if (this.baseType === \"tuple\") {\n                if (format !== FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map(\n                    (comp) => comp.format(format)\n                ).join((format === FormatTypes.full) ? \", \": \",\") + \")\";\n            } else {\n                result += this.type;\n            }\n        }\n\n        if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) { result += \" indexed\"; }\n            if (format === FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n\n        return result;\n    }\n\n    static from(value: string | JsonFragmentType | ParamType, allowIndexed?: boolean): ParamType {\n        if (typeof(value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    }\n\n    static fromObject(value: JsonFragmentType | ParamType): ParamType {\n        if (ParamType.isParamType(value)) { return value; }\n\n        return new ParamType(_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null: !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject): null)\n        });\n    }\n\n    static fromString(value: string, allowIndexed?: boolean): ParamType {\n        function ParamTypify(node: ParseNode): ParamType {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n\n    static isParamType(value: any): value is ParamType {\n        return !!(value != null && value._isParamType);\n    }\n};\n\nfunction parseParams(value: string, allowIndex: boolean): Array<ParamType> {\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\n}\n\ntype TypeCheck<T> = { -readonly [ K in keyof T ]: T[K] };\n\ninterface _Fragment {\n    readonly type: string;\n    readonly name: string;\n    readonly inputs: ReadonlyArray<ParamType>;\n}\n\nexport abstract class Fragment {\n\n    readonly type: string;\n    readonly name: string;\n    readonly inputs: Array<ParamType>;\n\n    readonly _isFragment: boolean;\n\n    constructor(constructorGuard: any, params: any) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n\n        this._isFragment = true;\n\n        Object.freeze(this);\n    }\n\n    abstract format(format?: string): string;\n\n    static from(value: Fragment | JsonFragment | string): Fragment {\n        if (Fragment.isFragment(value)) { return value; }\n\n        if (typeof(value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n\n        return Fragment.fromObject(value);\n    }\n\n    static fromObject(value: Fragment | JsonFragment): Fragment {\n        if (Fragment.isFragment(value)) { return value; }\n\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n                return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n\n    static fromString(value: string): Fragment {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n\n        if (value.split(\" \")[0] === \"event\") {\n           return EventFragment.fromString(value.substring(5).trim());\n        } else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        } else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        } else if (value.split(\" \")[0] === \"error\") {\n           return ErrorFragment.fromString(value.substring(5).trim());\n        }\n\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n\n    static isFragment(value: any): value is Fragment {\n        return !!(value && value._isFragment);\n    }\n}\n\ninterface _EventFragment extends _Fragment {\n    readonly anonymous: boolean;\n}\n\nexport class EventFragment extends Fragment {\n    readonly anonymous: boolean;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"event \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n\n        return result.trim();\n    }\n\n    static from(value: EventFragment | JsonFragment | string): EventFragment {\n        if (typeof(value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    }\n\n    static fromObject(value: JsonFragment | EventFragment): EventFragment {\n        if (EventFragment.isEventFragment(value)) { return value; }\n\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n\n        const params: TypeCheck<_EventFragment> = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n\n        return new EventFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): EventFragment {\n\n        let match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n\n        let anonymous = false;\n        match[3].split(\" \").forEach((modifier) => {\n            switch(modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    }\n\n    static isEventFragment(value: any): value is EventFragment {\n        return (value && value._isFragment && value.type === \"event\");\n    }\n}\n\nfunction parseGas(value: string, params: any): string {\n    params.gas = null;\n\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = BigNumber.from(comps[1]);\n        return comps[0];\n    }\n\n    return value;\n}\n\nfunction parseModifiers(value: string, params: any): void {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n\n    value.split(\" \").forEach((modifier) => {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\n\ntype StateInputValue = {\n    constant?: boolean;\n    payable?: boolean;\n    stateMutability?: string;\n    type?: string;\n};\n\ntype StateOutputValue = {\n    constant: boolean;\n    payable: boolean;\n    stateMutability: string;\n};\n\nfunction verifyState(value: StateInputValue): StateOutputValue {\n    let result: any = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n\n    } else if (value.payable != null) {\n        result.payable = !!value.payable;\n\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n\n        result.constant = !!value.constant;\n\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        } else {\n            result.stateMutability = (result.payable ? \"payable\": \"nonpayable\");\n        }\n\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n\n    } else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\": \"payable\");\n\n    } else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n\n    return result;\n}\n\ninterface _ConstructorFragment extends _Fragment {\n    stateMutability: string;\n    payable: boolean;\n    gas?: BigNumber;\n}\n\nexport class ConstructorFragment extends Fragment {\n    stateMutability: string;\n    payable: boolean;\n    gas?: BigNumber;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber(): undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n\n        if (format === FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n\n        let result = \"constructor(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n\n        return result.trim();\n    }\n\n    static from(value: ConstructorFragment | JsonFragment | string): ConstructorFragment {\n        if (typeof(value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    }\n\n    static fromObject(value: ConstructorFragment | JsonFragment): ConstructorFragment {\n        if (ConstructorFragment.isConstructorFragment(value)) { return value; }\n\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n\n        let state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n\n        const params: TypeCheck<_ConstructorFragment> = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas): null)\n        };\n\n        return new ConstructorFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): ConstructorFragment {\n        let params: any = { type: \"constructor\" };\n\n        value = parseGas(value, params);\n\n        let parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n\n        params.inputs = parseParams(parens[2].trim(), false);\n\n        parseModifiers(parens[3].trim(), params);\n\n        return ConstructorFragment.fromObject(params);\n    }\n\n    static isConstructorFragment(value: any): value is ConstructorFragment {\n        return (value && value._isFragment && value.type === \"constructor\");\n    }\n}\n\ninterface _FunctionFragment extends _ConstructorFragment {\n    constant: boolean;\n    outputs?: Array<ParamType>;\n}\n\nexport class FunctionFragment extends ConstructorFragment {\n    constant: boolean;\n    outputs?: Array<ParamType>;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber(): undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"function \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            } else if (this.constant) {\n                result += \"view \";\n            }\n\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map(\n                    (output) => output.format(format)\n                ).join(\", \") + \") \";\n            }\n\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n\n        return result.trim();\n    }\n\n    static from(value: FunctionFragment | JsonFragment | string): FunctionFragment {\n        if (typeof(value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    }\n\n    static fromObject(value: FunctionFragment | JsonFragment): FunctionFragment {\n        if (FunctionFragment.isFunctionFragment(value)) { return value; }\n\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n\n        let state = verifyState(value);\n\n        const params: TypeCheck<_FunctionFragment> = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject): [ ]),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas): null)\n        };\n\n        return new FunctionFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): FunctionFragment {\n        let params: any = { type: \"function\" };\n        value = parseGas(value, params);\n\n        let comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n\n        let parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n\n        params.name = parens[1].trim();\n        if (params.name) { verifyIdentifier(params.name); }\n\n        params.inputs = parseParams(parens[2], false);\n\n        parseModifiers(parens[3].trim(), params);\n\n        // We have outputs\n        if (comps.length > 1) {\n           let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        } else {\n            params.outputs = [ ];\n        }\n\n        return FunctionFragment.fromObject(params);\n    }\n\n    static isFunctionFragment(value: any): value is FunctionFragment {\n        return (value && value._isFragment && value.type === \"function\");\n    }\n}\n\n//export class StructFragment extends Fragment {\n//}\n\nfunction checkForbidden(fragment: ErrorFragment): ErrorFragment {\n    const sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n        logger.throwArgumentError(`cannot specify user defined ${ sig } error`, \"fragment\", fragment);\n    }\n    return fragment;\n}\n\nexport class ErrorFragment extends Fragment {\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"error \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        return result.trim();\n    }\n\n    static from(value: ErrorFragment | JsonFragment | string): ErrorFragment {\n        if (typeof(value) === \"string\") {\n            return ErrorFragment.fromString(value);\n        }\n        return ErrorFragment.fromObject(value);\n    }\n\n    static fromObject(value: ErrorFragment | JsonFragment): ErrorFragment {\n        if (ErrorFragment.isErrorFragment(value)) { return value; }\n\n        if (value.type !== \"error\") {\n            logger.throwArgumentError(\"invalid error object\", \"value\", value);\n        }\n\n        const params: TypeCheck<_Fragment> = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): [])\n        };\n\n        return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n\n    static fromString(value: string): ErrorFragment {\n        let params: any = { type: \"error\" };\n\n        let parens = value.match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n        }\n\n        params.name = parens[1].trim();\n        if (params.name) { verifyIdentifier(params.name); }\n\n        params.inputs = parseParams(parens[2], false);\n\n        return checkForbidden(ErrorFragment.fromObject(params));\n    }\n\n    static isErrorFragment(value: any): value is ErrorFragment {\n        return (value && value._isFragment && value.type === \"error\");\n    }\n}\n\nfunction verifyType(type: string): string {\n\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    } else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n\n    // @TODO: more verification\n\n    return type;\n}\n\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value: string): string {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(`invalid identifier \"${ value }\"`, \"value\", value);\n    }\n    return value;\n}\n\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\n\nfunction splitNesting(value: string): Array<any> {\n    value = value.trim();\n\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for (let offset = 0; offset < value.length; offset++) {\n        let c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        } else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            } else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) { result.push(accum); }\n\n    return result;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}