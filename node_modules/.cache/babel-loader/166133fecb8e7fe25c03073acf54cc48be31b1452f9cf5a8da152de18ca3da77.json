{"ast":null,"code":"\"use strict\";\n\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { BaseProvider, Resolver } from \"./base-provider\";\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n////////////////////////\n// Helper Functions\nfunction getDefaultProvider(network, options) {\n  if (network == null) {\n    network = \"homestead\";\n  }\n  // If passed a URL, figure out the right type of provider based on the scheme\n  if (typeof network === \"string\") {\n    // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n    // Handle http and ws (and their secure variants)\n    var match = network.match(/^(ws|http)s?:/i);\n    if (match) {\n      switch (match[1]) {\n        case \"http\":\n          return new JsonRpcProvider(network);\n        case \"ws\":\n          return new WebSocketProvider(network);\n        default:\n          logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n      }\n    }\n  }\n  var n = getNetwork(network);\n  if (!n || !n._defaultProvider) {\n    logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n      operation: \"getDefaultProvider\",\n      network: network\n    });\n  }\n  return n._defaultProvider({\n    FallbackProvider: FallbackProvider,\n    AlchemyProvider: AlchemyProvider,\n    CloudflareProvider: CloudflareProvider,\n    EtherscanProvider: EtherscanProvider,\n    InfuraProvider: InfuraProvider,\n    JsonRpcProvider: JsonRpcProvider,\n    NodesmithProvider: NodesmithProvider,\n    PocketProvider: PocketProvider,\n    Web3Provider: Web3Provider,\n    IpcProvider: IpcProvider\n  }, options);\n}\n////////////////////////\n// Exports\nexport {\n// Abstract Providers (or Abstract-ish)\nProvider, BaseProvider, Resolver, UrlJsonRpcProvider,\n///////////////////////\n// Concreate Providers\nFallbackProvider, AlchemyProvider, AlchemyWebSocketProvider, CloudflareProvider, EtherscanProvider, InfuraProvider, InfuraWebSocketProvider, JsonRpcProvider, JsonRpcBatchProvider, NodesmithProvider, PocketProvider, StaticJsonRpcProvider, Web3Provider, WebSocketProvider, IpcProvider,\n///////////////////////\n// Signer\nJsonRpcSigner,\n///////////////////////\n// Functions\ngetDefaultProvider, getNetwork, isCommunityResource, isCommunityResourcable, showThrottleMessage,\n///////////////////////\n// Objects\nFormatter };","map":{"version":3,"names":["Provider","getNetwork","BaseProvider","Resolver","AlchemyProvider","AlchemyWebSocketProvider","CloudflareProvider","EtherscanProvider","FallbackProvider","IpcProvider","InfuraProvider","InfuraWebSocketProvider","JsonRpcProvider","JsonRpcSigner","JsonRpcBatchProvider","NodesmithProvider","PocketProvider","StaticJsonRpcProvider","UrlJsonRpcProvider","Web3Provider","WebSocketProvider","Formatter","isCommunityResourcable","isCommunityResource","showThrottleMessage","Logger","version","logger","getDefaultProvider","network","options","match","throwArgumentError","n","_defaultProvider","throwError","errors","NETWORK_ERROR","operation"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\providers\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\n\nimport {\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    Provider,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse\n} from \"@ethersproject/abstract-provider\";\n\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\n\nimport { BaseProvider, EnsProvider, EnsResolver, Resolver } from \"./base-provider\";\n\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { ExternalProvider, JsonRpcFetchFunc } from \"./web3-provider\";\n\nimport { CommunityResourcable, Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network?: Network | string, options?: any): BaseProvider {\n    if (network == null) { network = \"homestead\"; }\n\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof(network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1]) {\n                case \"http\":\n                    return new JsonRpcProvider(network);\n                case \"ws\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n\n    return n._defaultProvider({\n        FallbackProvider,\n\n        AlchemyProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        PocketProvider,\n        Web3Provider,\n\n        IpcProvider,\n    }, options);\n}\n\n////////////////////////\n// Exports\n\nexport {\n\n    // Abstract Providers (or Abstract-ish)\n    Provider,\n    BaseProvider,\n\n    Resolver,\n\n    UrlJsonRpcProvider,\n\n    ///////////////////////\n    // Concreate Providers\n\n    FallbackProvider,\n\n    AlchemyProvider,\n    AlchemyWebSocketProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    InfuraWebSocketProvider,\n    JsonRpcProvider,\n    JsonRpcBatchProvider,\n    NodesmithProvider,\n    PocketProvider,\n    StaticJsonRpcProvider,\n    Web3Provider,\n    WebSocketProvider,\n\n    IpcProvider,\n\n\n    ///////////////////////\n    // Signer\n\n    JsonRpcSigner,\n\n\n    ///////////////////////\n    // Functions\n\n    getDefaultProvider,\n    getNetwork,\n    isCommunityResource,\n    isCommunityResourcable,\n    showThrottleMessage,\n\n\n    ///////////////////////\n    // Objects\n\n    Formatter,\n\n\n    ///////////////////////\n    // Types\n\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse,\n\n    ExternalProvider,\n    JsonRpcFetchFunc,\n\n    Network,\n    Networkish,\n\n    EnsProvider,\n    EnsResolver,\n\n    CommunityResourcable\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}