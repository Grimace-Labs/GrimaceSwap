{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, concat, hexDataLength, hexDataSlice, isHexString, stripZeros } from \"@ethersproject/bytes\";\nimport { BigNumber, _base16To36, _base36To16 } from \"@ethersproject/bignumber\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { encode } from \"@ethersproject/rlp\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nfunction getChecksumAddress(address) {\n  if (!isHexString(address, 20)) {\n    logger.throwArgumentError(\"invalid address\", \"address\", address);\n  }\n  address = address.toLowerCase();\n  var chars = address.substring(2).split(\"\");\n  var expanded = new Uint8Array(40);\n  for (var i = 0; i < 40; i++) {\n    expanded[i] = chars[i].charCodeAt(0);\n  }\n  var hashed = arrayify(keccak256(expanded));\n  for (var _i = 0; _i < 40; _i += 2) {\n    if (hashed[_i >> 1] >> 4 >= 8) {\n      chars[_i] = chars[_i].toUpperCase();\n    }\n    if ((hashed[_i >> 1] & 0x0f) >= 8) {\n      chars[_i + 1] = chars[_i + 1].toUpperCase();\n    }\n  }\n  return \"0x\" + chars.join(\"\");\n}\n// Shims for environments that are missing some required constants and functions\nvar MAX_SAFE_INTEGER = 0x1fffffffffffff;\nfunction log10(x) {\n  if (Math.log10) {\n    return Math.log10(x);\n  }\n  return Math.log(x) / Math.LN10;\n}\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n// Create lookup table\nvar ibanLookup = {};\nfor (var i = 0; i < 10; i++) {\n  ibanLookup[String(i)] = String(i);\n}\nfor (var _i2 = 0; _i2 < 26; _i2++) {\n  ibanLookup[String.fromCharCode(65 + _i2)] = String(10 + _i2);\n}\n// How many decimal digits can we process? (for 64-bit float, this is 15)\nvar safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\nfunction ibanChecksum(address) {\n  address = address.toUpperCase();\n  address = address.substring(4) + address.substring(0, 2) + \"00\";\n  var expanded = address.split(\"\").map(function (c) {\n    return ibanLookup[c];\n  }).join(\"\");\n  // Javascript can handle integers safely up to 15 (decimal) digits\n  while (expanded.length >= safeDigits) {\n    var block = expanded.substring(0, safeDigits);\n    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n  }\n  var checksum = String(98 - parseInt(expanded, 10) % 97);\n  while (checksum.length < 2) {\n    checksum = \"0\" + checksum;\n  }\n  return checksum;\n}\n;\nexport function getAddress(address) {\n  var result = null;\n  if (typeof address !== \"string\") {\n    logger.throwArgumentError(\"invalid address\", \"address\", address);\n  }\n  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n    // Missing the 0x prefix\n    if (address.substring(0, 2) !== \"0x\") {\n      address = \"0x\" + address;\n    }\n    result = getChecksumAddress(address);\n    // It is a checksummed address with a bad checksum\n    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n      logger.throwArgumentError(\"bad address checksum\", \"address\", address);\n    }\n    // Maybe ICAP? (we only support direct mode)\n  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n    // It is an ICAP address with a bad checksum\n    if (address.substring(2, 4) !== ibanChecksum(address)) {\n      logger.throwArgumentError(\"bad icap checksum\", \"address\", address);\n    }\n    result = _base36To16(address.substring(4));\n    while (result.length < 40) {\n      result = \"0\" + result;\n    }\n    result = getChecksumAddress(\"0x\" + result);\n  } else {\n    logger.throwArgumentError(\"invalid address\", \"address\", address);\n  }\n  return result;\n}\nexport function isAddress(address) {\n  try {\n    getAddress(address);\n    return true;\n  } catch (error) {}\n  return false;\n}\nexport function getIcapAddress(address) {\n  var base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n  while (base36.length < 30) {\n    base36 = \"0\" + base36;\n  }\n  return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\nexport function getContractAddress(transaction) {\n  var from = null;\n  try {\n    from = getAddress(transaction.from);\n  } catch (error) {\n    logger.throwArgumentError(\"missing from address\", \"transaction\", transaction);\n  }\n  var nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));\n  return getAddress(hexDataSlice(keccak256(encode([from, nonce])), 12));\n}\nexport function getCreate2Address(from, salt, initCodeHash) {\n  if (hexDataLength(salt) !== 32) {\n    logger.throwArgumentError(\"salt must be 32 bytes\", \"salt\", salt);\n  }\n  if (hexDataLength(initCodeHash) !== 32) {\n    logger.throwArgumentError(\"initCodeHash must be 32 bytes\", \"initCodeHash\", initCodeHash);\n  }\n  return getAddress(hexDataSlice(keccak256(concat([\"0xff\", getAddress(from), salt, initCodeHash])), 12));\n}","map":{"version":3,"names":["arrayify","concat","hexDataLength","hexDataSlice","isHexString","stripZeros","BigNumber","_base16To36","_base36To16","keccak256","encode","Logger","version","logger","getChecksumAddress","address","throwArgumentError","toLowerCase","chars","substring","split","expanded","Uint8Array","i","charCodeAt","hashed","toUpperCase","join","MAX_SAFE_INTEGER","log10","x","Math","log","LN10","ibanLookup","String","fromCharCode","safeDigits","floor","ibanChecksum","map","c","length","block","parseInt","checksum","getAddress","result","match","isAddress","error","getIcapAddress","base36","getContractAddress","transaction","from","nonce","toHexString","getCreate2Address","salt","initCodeHash"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\address\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify, BytesLike, concat, hexDataLength, hexDataSlice, isHexString, stripZeros } from \"@ethersproject/bytes\";\nimport { BigNumber, BigNumberish, _base16To36, _base36To16 } from \"@ethersproject/bignumber\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { encode } from \"@ethersproject/rlp\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction getChecksumAddress(address: string): string {\n    if (!isHexString(address, 20)) {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n\n    address = address.toLowerCase();\n\n    const chars = address.substring(2).split(\"\");\n\n    const expanded = new Uint8Array(40);\n    for (let i = 0; i < 40; i++) {\n        expanded[i] = chars[i].charCodeAt(0);\n    }\n\n    const hashed = arrayify(keccak256(expanded));\n\n    for (let i = 0; i < 40; i += 2) {\n        if ((hashed[i >> 1] >> 4) >= 8) {\n            chars[i] = chars[i].toUpperCase();\n        }\n        if ((hashed[i >> 1] & 0x0f) >= 8) {\n            chars[i + 1] = chars[i + 1].toUpperCase();\n        }\n    }\n\n    return \"0x\" + chars.join(\"\");\n}\n\n// Shims for environments that are missing some required constants and functions\nconst MAX_SAFE_INTEGER: number = 0x1fffffffffffff;\n\nfunction log10(x: number): number {\n    if (Math.log10) { return Math.log10(x); }\n    return Math.log(x) / Math.LN10;\n}\n\n\n// See: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n\n// Create lookup table\nconst ibanLookup: { [character: string]: string } = { };\nfor (let i = 0; i < 10; i++) { ibanLookup[String(i)] = String(i); }\nfor (let i = 0; i < 26; i++) { ibanLookup[String.fromCharCode(65 + i)] = String(10 + i); }\n\n// How many decimal digits can we process? (for 64-bit float, this is 15)\nconst safeDigits = Math.floor(log10(MAX_SAFE_INTEGER));\n\nfunction ibanChecksum(address: string): string {\n    address = address.toUpperCase();\n    address = address.substring(4) + address.substring(0, 2) + \"00\";\n\n    let expanded = address.split(\"\").map((c) => { return ibanLookup[c]; }).join(\"\");\n\n    // Javascript can handle integers safely up to 15 (decimal) digits\n    while (expanded.length >= safeDigits){\n        let block = expanded.substring(0, safeDigits);\n        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);\n    }\n\n    let checksum = String(98 - (parseInt(expanded, 10) % 97));\n    while (checksum.length < 2) { checksum = \"0\" + checksum; }\n\n    return checksum;\n};\n\nexport function getAddress(address: string): string {\n    let result = null;\n\n    if (typeof(address) !== \"string\") {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n\n    if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {\n\n        // Missing the 0x prefix\n        if (address.substring(0, 2) !== \"0x\") { address = \"0x\" + address; }\n\n        result = getChecksumAddress(address);\n\n        // It is a checksummed address with a bad checksum\n        if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {\n            logger.throwArgumentError(\"bad address checksum\", \"address\", address);\n        }\n\n    // Maybe ICAP? (we only support direct mode)\n    } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {\n\n        // It is an ICAP address with a bad checksum\n        if (address.substring(2, 4) !== ibanChecksum(address)) {\n            logger.throwArgumentError(\"bad icap checksum\", \"address\", address);\n        }\n\n        result = _base36To16(address.substring(4));\n        while (result.length < 40) { result = \"0\" + result; }\n        result = getChecksumAddress(\"0x\" + result);\n\n    } else {\n        logger.throwArgumentError(\"invalid address\", \"address\", address);\n    }\n\n    return result;\n}\n\nexport function isAddress(address: string): boolean {\n    try {\n        getAddress(address);\n        return true;\n    } catch (error) { }\n    return false;\n}\n\nexport function getIcapAddress(address: string): string {\n    let base36 = _base16To36(getAddress(address).substring(2)).toUpperCase();\n    while (base36.length < 30) { base36 = \"0\" + base36; }\n    return \"XE\" + ibanChecksum(\"XE00\" + base36) + base36;\n}\n\n// http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed\nexport function getContractAddress(transaction: { from: string, nonce: BigNumberish }) {\n    let from: string = null;\n    try {\n        from = getAddress(transaction.from);\n    } catch (error) {\n        logger.throwArgumentError(\"missing from address\", \"transaction\", transaction);\n    }\n\n    const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));\n\n    return getAddress(hexDataSlice(keccak256(encode([ from, nonce ])), 12));\n}\n\nexport function getCreate2Address(from: string, salt: BytesLike, initCodeHash: BytesLike): string {\n    if (hexDataLength(salt) !== 32) {\n        logger.throwArgumentError(\"salt must be 32 bytes\", \"salt\", salt);\n    }\n    if (hexDataLength(initCodeHash) !== 32) {\n        logger.throwArgumentError(\"initCodeHash must be 32 bytes\", \"initCodeHash\", initCodeHash);\n    }\n    return getAddress(hexDataSlice(keccak256(concat([ \"0xff\", getAddress(from), salt, initCodeHash ])), 12))\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}