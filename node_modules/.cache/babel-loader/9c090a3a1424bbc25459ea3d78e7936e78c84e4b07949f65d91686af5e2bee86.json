{"ast":null,"code":"\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { Reader, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\nimport { ParamType } from \"./fragments\";\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\nexport class AbiCoder {\n  constructor(coerceFunc) {\n    logger.checkNew(new.target, AbiCoder);\n    defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n  }\n  _getCoder(param) {\n    switch (param.baseType) {\n      case \"address\":\n        return new AddressCoder(param.name);\n      case \"bool\":\n        return new BooleanCoder(param.name);\n      case \"string\":\n        return new StringCoder(param.name);\n      case \"bytes\":\n        return new BytesCoder(param.name);\n      case \"array\":\n        return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n      case \"tuple\":\n        return new TupleCoder((param.components || []).map(component => {\n          return this._getCoder(component);\n        }), param.name);\n      case \"\":\n        return new NullCoder(param.name);\n    }\n    // u?int[0-9]*\n    let match = param.type.match(paramTypeNumber);\n    if (match) {\n      let size = parseInt(match[2] || \"256\");\n      if (size === 0 || size > 256 || size % 8 !== 0) {\n        logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n      }\n      return new NumberCoder(size / 8, match[1] === \"int\", param.name);\n    }\n    // bytes[0-9]+\n    match = param.type.match(paramTypeBytes);\n    if (match) {\n      let size = parseInt(match[1]);\n      if (size === 0 || size > 32) {\n        logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n      }\n      return new FixedBytesCoder(size, param.name);\n    }\n    return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n  }\n  _getWordSize() {\n    return 32;\n  }\n  _getReader(data, allowLoose) {\n    return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n  }\n  _getWriter() {\n    return new Writer(this._getWordSize());\n  }\n  getDefaultValue(types) {\n    const coders = types.map(type => this._getCoder(ParamType.from(type)));\n    const coder = new TupleCoder(coders, \"_\");\n    return coder.defaultValue();\n  }\n  encode(types, values) {\n    if (types.length !== values.length) {\n      logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n        count: {\n          types: types.length,\n          values: values.length\n        },\n        value: {\n          types: types,\n          values: values\n        }\n      });\n    }\n    const coders = types.map(type => this._getCoder(ParamType.from(type)));\n    const coder = new TupleCoder(coders, \"_\");\n    const writer = this._getWriter();\n    coder.encode(writer, values);\n    return writer.data;\n  }\n  decode(types, data, loose) {\n    const coders = types.map(type => this._getCoder(ParamType.from(type)));\n    const coder = new TupleCoder(coders, \"_\");\n    return coder.decode(this._getReader(arrayify(data), loose));\n  }\n}\nexport const defaultAbiCoder = new AbiCoder();","map":{"version":3,"names":["arrayify","defineReadOnly","Logger","version","logger","Reader","Writer","AddressCoder","ArrayCoder","BooleanCoder","BytesCoder","FixedBytesCoder","NullCoder","NumberCoder","StringCoder","TupleCoder","ParamType","paramTypeBytes","RegExp","paramTypeNumber","AbiCoder","constructor","coerceFunc","checkNew","new","target","_getCoder","param","baseType","name","arrayChildren","arrayLength","components","map","component","match","type","size","parseInt","throwArgumentError","_getWordSize","_getReader","data","allowLoose","_getWriter","getDefaultValue","types","coders","from","coder","defaultValue","encode","values","length","throwError","errors","INVALID_ARGUMENT","count","value","writer","decode","loose","defaultAbiCoder"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\ethers\\node_modules\\@ethersproject\\abi\\src.ts\\abi-coder.ts"],"sourcesContent":["\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Coder, Reader, Result, Writer } from \"./coders/abstract-coder\";\nimport { AddressCoder } from \"./coders/address\";\nimport { ArrayCoder } from \"./coders/array\";\nimport { BooleanCoder } from \"./coders/boolean\";\nimport { BytesCoder } from \"./coders/bytes\";\nimport { FixedBytesCoder } from \"./coders/fixed-bytes\";\nimport { NullCoder } from \"./coders/null\";\nimport { NumberCoder } from \"./coders/number\";\nimport { StringCoder } from \"./coders/string\";\nimport { TupleCoder } from \"./coders/tuple\";\n\nimport { ParamType } from \"./fragments\";\n\n\nconst paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);\nconst paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);\n\n\nexport type CoerceFunc = (type: string, value: any) => any;\n\nexport class AbiCoder {\n    readonly coerceFunc: CoerceFunc;\n\n    constructor(coerceFunc?: CoerceFunc) {\n        logger.checkNew(new.target, AbiCoder);\n        defineReadOnly(this, \"coerceFunc\", coerceFunc || null);\n    }\n\n    _getCoder(param: ParamType): Coder {\n\n        switch (param.baseType) {\n            case \"address\":\n                return new AddressCoder(param.name);\n            case \"bool\":\n                return new BooleanCoder(param.name);\n            case \"string\":\n                return new StringCoder(param.name);\n            case \"bytes\":\n                return new BytesCoder(param.name);\n            case \"array\":\n                return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);\n            case \"tuple\":\n                return new TupleCoder((param.components || []).map((component) => {\n                    return this._getCoder(component);\n                }), param.name);\n            case \"\":\n                return new NullCoder(param.name);\n        }\n\n        // u?int[0-9]*\n        let match = param.type.match(paramTypeNumber);\n        if (match) {\n            let size = parseInt(match[2] || \"256\");\n            if (size === 0 || size > 256 || (size % 8) !== 0) {\n                logger.throwArgumentError(\"invalid \" + match[1] + \" bit length\", \"param\", param);\n            }\n            return new NumberCoder(size / 8, (match[1] === \"int\"), param.name);\n        }\n\n        // bytes[0-9]+\n        match = param.type.match(paramTypeBytes);\n        if (match) {\n            let size = parseInt(match[1]);\n            if (size === 0 || size > 32) {\n                logger.throwArgumentError(\"invalid bytes length\", \"param\", param);\n            }\n            return new FixedBytesCoder(size, param.name);\n        }\n\n        return logger.throwArgumentError(\"invalid type\", \"type\", param.type);\n    }\n\n    _getWordSize(): number { return 32; }\n\n    _getReader(data: Uint8Array, allowLoose?: boolean): Reader {\n        return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);\n    }\n\n    _getWriter(): Writer {\n        return new Writer(this._getWordSize());\n    }\n\n    getDefaultValue(types: ReadonlyArray<string | ParamType>): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.defaultValue();\n    }\n\n    encode(types: ReadonlyArray<string | ParamType>, values: ReadonlyArray<any>): string {\n        if (types.length !== values.length) {\n            logger.throwError(\"types/values length mismatch\", Logger.errors.INVALID_ARGUMENT, {\n                count: { types: types.length, values: values.length },\n                value: { types: types, values: values }\n            });\n        }\n\n        const coders = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = (new TupleCoder(coders, \"_\"));\n\n        const writer = this._getWriter();\n        coder.encode(writer, values);\n        return writer.data;\n    }\n\n    decode(types: ReadonlyArray<string | ParamType>, data: BytesLike, loose?: boolean): Result {\n        const coders: Array<Coder> = types.map((type) => this._getCoder(ParamType.from(type)));\n        const coder = new TupleCoder(coders, \"_\");\n        return coder.decode(this._getReader(arrayify(data), loose));\n    }\n}\n\nexport const defaultAbiCoder: AbiCoder = new AbiCoder();\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}