{"ast":null,"code":"/**\n * var basex = require(\"base-x\");\n *\n * This implementation is heavily based on base-x. The main reason to\n * deviate was to prevent the dependency of Buffer.\n *\n * Contributors:\n *\n * base-x encoding\n * Forked from https://github.com/cryptocoinjs/bs58\n * Originally written by Mike Hearn for BitcoinJ\n * Copyright (c) 2011 Google Inc\n * Ported to JavaScript by Stefan Thomas\n * Merged Buffer refactorings from base58-native by Stephen Pair\n * Copyright (c) 2013 BitPay Inc\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n */\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nexport class BaseX {\n  constructor(alphabet) {\n    defineReadOnly(this, \"alphabet\", alphabet);\n    defineReadOnly(this, \"base\", alphabet.length);\n    defineReadOnly(this, \"_alphabetMap\", {});\n    defineReadOnly(this, \"_leader\", alphabet.charAt(0));\n    // pre-compute lookup table\n    for (let i = 0; i < alphabet.length; i++) {\n      this._alphabetMap[alphabet.charAt(i)] = i;\n    }\n  }\n  encode(value) {\n    let source = arrayify(value);\n    if (source.length === 0) {\n      return \"\";\n    }\n    let digits = [0];\n    for (let i = 0; i < source.length; ++i) {\n      let carry = source[i];\n      for (let j = 0; j < digits.length; ++j) {\n        carry += digits[j] << 8;\n        digits[j] = carry % this.base;\n        carry = carry / this.base | 0;\n      }\n      while (carry > 0) {\n        digits.push(carry % this.base);\n        carry = carry / this.base | 0;\n      }\n    }\n    let string = \"\";\n    // deal with leading zeros\n    for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {\n      string += this._leader;\n    }\n    // convert digits to a string\n    for (let q = digits.length - 1; q >= 0; --q) {\n      string += this.alphabet[digits[q]];\n    }\n    return string;\n  }\n  decode(value) {\n    if (typeof value !== \"string\") {\n      throw new TypeError(\"Expected String\");\n    }\n    let bytes = [];\n    if (value.length === 0) {\n      return new Uint8Array(bytes);\n    }\n    bytes.push(0);\n    for (let i = 0; i < value.length; i++) {\n      let byte = this._alphabetMap[value[i]];\n      if (byte === undefined) {\n        throw new Error(\"Non-base\" + this.base + \" character\");\n      }\n      let carry = byte;\n      for (let j = 0; j < bytes.length; ++j) {\n        carry += bytes[j] * this.base;\n        bytes[j] = carry & 0xff;\n        carry >>= 8;\n      }\n      while (carry > 0) {\n        bytes.push(carry & 0xff);\n        carry >>= 8;\n      }\n    }\n    // deal with leading zeros\n    for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\n      bytes.push(0);\n    }\n    return arrayify(new Uint8Array(bytes.reverse()));\n  }\n}\nconst Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\nconst Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\nexport { Base32, Base58 };\n//console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n//console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))","map":{"version":3,"names":["arrayify","defineReadOnly","BaseX","constructor","alphabet","length","charAt","i","_alphabetMap","encode","value","source","digits","carry","j","base","push","string","k","_leader","q","decode","TypeError","bytes","Uint8Array","byte","undefined","Error","reverse","Base32","Base58"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\basex\\src.ts\\index.ts"],"sourcesContent":["/**\n * var basex = require(\"base-x\");\n *\n * This implementation is heavily based on base-x. The main reason to\n * deviate was to prevent the dependency of Buffer.\n *\n * Contributors:\n *\n * base-x encoding\n * Forked from https://github.com/cryptocoinjs/bs58\n * Originally written by Mike Hearn for BitcoinJ\n * Copyright (c) 2011 Google Inc\n * Ported to JavaScript by Stefan Thomas\n * Merged Buffer refactorings from base58-native by Stephen Pair\n * Copyright (c) 2013 BitPay Inc\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n */\n\nimport { arrayify, BytesLike } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nexport class BaseX {\n    readonly alphabet: string;\n    readonly base: number;\n\n    _alphabetMap: { [ character: string ]: number };\n    _leader: string;\n\n    constructor(alphabet: string) {\n        defineReadOnly(this, \"alphabet\", alphabet);\n        defineReadOnly(this, \"base\", alphabet.length);\n\n        defineReadOnly(this, \"_alphabetMap\", { });\n        defineReadOnly(this, \"_leader\", alphabet.charAt(0));\n\n        // pre-compute lookup table\n        for (let i = 0; i < alphabet.length; i++) {\n            this._alphabetMap[alphabet.charAt(i)] = i;\n        }\n    }\n\n    encode(value: BytesLike): string {\n        let source = arrayify(value);\n\n        if (source.length === 0) { return \"\"; }\n\n        let digits = [ 0 ]\n        for (let i = 0; i < source.length; ++i) {\n            let carry = source[i];\n            for (let j = 0; j < digits.length; ++j) {\n                carry += digits[j] << 8;\n                digits[j] = carry % this.base;\n                carry = (carry / this.base) | 0;\n            }\n\n            while (carry > 0) {\n                digits.push(carry % this.base);\n                carry = (carry / this.base) | 0;\n            }\n        }\n\n        let string = \"\"\n\n        // deal with leading zeros\n        for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {\n            string += this._leader;\n        }\n\n        // convert digits to a string\n        for (let q = digits.length - 1; q >= 0; --q) {\n            string += this.alphabet[digits[q]];\n        }\n\n        return string;\n    }\n\n    decode(value: string): Uint8Array {\n        if (typeof(value) !== \"string\") {\n            throw new TypeError(\"Expected String\");\n        }\n\n        let bytes: Array<number> = [];\n        if (value.length === 0) { return new Uint8Array(bytes); }\n\n        bytes.push(0);\n        for (let i = 0; i < value.length; i++) {\n            let byte = this._alphabetMap[value[i]];\n\n            if (byte === undefined) {\n                throw new Error(\"Non-base\" + this.base + \" character\");\n            }\n\n            let carry = byte;\n            for (let j = 0; j < bytes.length; ++j) {\n                carry += bytes[j] * this.base;\n                bytes[j] = carry & 0xff;\n                carry >>= 8;\n            }\n\n            while (carry > 0) {\n                bytes.push(carry & 0xff);\n                carry >>= 8;\n            }\n        }\n\n        // deal with leading zeros\n        for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\n            bytes.push(0)\n        }\n\n        return arrayify(new Uint8Array(bytes.reverse()))\n    }\n}\n\nconst Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\nconst Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\n\nexport { Base32, Base58 };\n\n//console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n//console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}