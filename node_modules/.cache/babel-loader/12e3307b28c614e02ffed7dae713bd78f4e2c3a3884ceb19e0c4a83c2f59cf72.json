{"ast":null,"code":"\"use strict\";\n\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nlet _nextId = 1;\nfunction buildWeb3LegacyFetcher(provider, sendFunc) {\n  const fetcher = \"Web3LegacyFetcher\";\n  return function (method, params) {\n    // Metamask complains about eth_sign (and on some versions hangs)\n    if (method == \"eth_sign\" && (provider.isMetaMask || provider.isStatus)) {\n      // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n      method = \"personal_sign\";\n      params = [params[1], params[0]];\n    }\n    const request = {\n      method: method,\n      params: params,\n      id: _nextId++,\n      jsonrpc: \"2.0\"\n    };\n    return new Promise((resolve, reject) => {\n      this.emit(\"debug\", {\n        action: \"request\",\n        fetcher,\n        request: deepCopy(request),\n        provider: this\n      });\n      sendFunc(request, (error, response) => {\n        if (error) {\n          this.emit(\"debug\", {\n            action: \"response\",\n            fetcher,\n            error,\n            request,\n            provider: this\n          });\n          return reject(error);\n        }\n        this.emit(\"debug\", {\n          action: \"response\",\n          fetcher,\n          request,\n          response,\n          provider: this\n        });\n        if (response.error) {\n          const error = new Error(response.error.message);\n          error.code = response.error.code;\n          error.data = response.error.data;\n          return reject(error);\n        }\n        resolve(response.result);\n      });\n    });\n  };\n}\nfunction buildEip1193Fetcher(provider) {\n  return function (method, params) {\n    if (params == null) {\n      params = [];\n    }\n    // Metamask complains about eth_sign (and on some versions hangs)\n    if (method == \"eth_sign\" && (provider.isMetaMask || provider.isStatus)) {\n      // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n      method = \"personal_sign\";\n      params = [params[1], params[0]];\n    }\n    const request = {\n      method,\n      params\n    };\n    this.emit(\"debug\", {\n      action: \"request\",\n      fetcher: \"Eip1193Fetcher\",\n      request: deepCopy(request),\n      provider: this\n    });\n    return provider.request(request).then(response => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        fetcher: \"Eip1193Fetcher\",\n        request,\n        response,\n        provider: this\n      });\n      return response;\n    }, error => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        fetcher: \"Eip1193Fetcher\",\n        request,\n        error,\n        provider: this\n      });\n      throw error;\n    });\n  };\n}\nexport class Web3Provider extends JsonRpcProvider {\n  constructor(provider, network) {\n    logger.checkNew(new.target, Web3Provider);\n    if (provider == null) {\n      logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n    }\n    let path = null;\n    let jsonRpcFetchFunc = null;\n    let subprovider = null;\n    if (typeof provider === \"function\") {\n      path = \"unknown:\";\n      jsonRpcFetchFunc = provider;\n    } else {\n      path = provider.host || provider.path || \"\";\n      if (!path && provider.isMetaMask) {\n        path = \"metamask\";\n      }\n      subprovider = provider;\n      if (provider.request) {\n        if (path === \"\") {\n          path = \"eip-1193:\";\n        }\n        jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n      } else if (provider.sendAsync) {\n        jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n      } else if (provider.send) {\n        jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n      } else {\n        logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n      }\n      if (!path) {\n        path = \"unknown:\";\n      }\n    }\n    super(path, network);\n    defineReadOnly(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n    defineReadOnly(this, \"provider\", subprovider);\n  }\n  send(method, params) {\n    return this.jsonRpcFetchFunc(method, params);\n  }\n}","map":{"version":3,"names":["deepCopy","defineReadOnly","Logger","version","logger","JsonRpcProvider","_nextId","buildWeb3LegacyFetcher","provider","sendFunc","fetcher","method","params","isMetaMask","isStatus","request","id","jsonrpc","Promise","resolve","reject","emit","action","error","response","Error","message","code","data","result","buildEip1193Fetcher","then","Web3Provider","constructor","network","checkNew","new","target","throwArgumentError","path","jsonRpcFetchFunc","subprovider","host","sendAsync","bind","send"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\providers\\src.ts\\web3-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Exported Types\nexport type ExternalProvider = {\n    isMetaMask?: boolean;\n    isStatus?: boolean;\n    host?: string;\n    path?: string;\n    sendAsync?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    send?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    request?: (request: { method: string, params?: Array<any> }) => Promise<any>\n}\n\nlet _nextId = 1;\n\nexport type JsonRpcFetchFunc = (method: string, params?: Array<any>) => Promise<any>;\n\ntype Web3LegacySend = (request: any, callback: (error: Error, response: any) => void) => void;\n\nfunction buildWeb3LegacyFetcher(provider: ExternalProvider, sendFunc: Web3LegacySend) : JsonRpcFetchFunc {\n    const fetcher = \"Web3LegacyFetcher\";\n\n    return function(method: string, params: Array<any>): Promise<any> {\n\n        // Metamask complains about eth_sign (and on some versions hangs)\n        if (method == \"eth_sign\" && (provider.isMetaMask || provider.isStatus)) {\n            // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n            method = \"personal_sign\";\n            params = [ params[1], params[0] ];\n        }\n\n        const request = {\n            method: method,\n            params: params,\n            id: (_nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        return new Promise((resolve, reject) => {\n            this.emit(\"debug\", {\n                action: \"request\",\n                fetcher,\n                request: deepCopy(request),\n                provider: this\n            });\n\n            sendFunc(request, (error, response) => {\n\n                if (error) {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        fetcher,\n                        error,\n                        request,\n                        provider: this\n                    });\n\n                    return reject(error);\n                }\n\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    fetcher,\n                    request,\n                    response,\n                    provider: this\n                });\n\n                if (response.error) {\n                    const error = new Error(response.error.message);\n                    (<any>error).code = response.error.code;\n                    (<any>error).data = response.error.data;\n                    return reject(error);\n                }\n\n                resolve(response.result);\n            });\n        });\n    }\n}\n\nfunction buildEip1193Fetcher(provider: ExternalProvider): JsonRpcFetchFunc {\n    return function(method: string, params: Array<any>): Promise<any> {\n        if (params == null) { params = [ ]; }\n\n        // Metamask complains about eth_sign (and on some versions hangs)\n        if (method == \"eth_sign\" && (provider.isMetaMask || provider.isStatus)) {\n            // https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_sign\n            method = \"personal_sign\";\n            params = [ params[1], params[0] ];\n        }\n\n        const request = { method, params };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            fetcher: \"Eip1193Fetcher\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        return provider.request(request).then((response) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                response,\n                provider: this\n            });\n\n            return response;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                error,\n                provider: this\n            });\n\n            throw error;\n        });\n    }\n}\n\nexport class Web3Provider extends JsonRpcProvider {\n    readonly provider: ExternalProvider;\n    readonly jsonRpcFetchFunc: JsonRpcFetchFunc;\n\n    constructor(provider: ExternalProvider | JsonRpcFetchFunc, network?: Networkish) {\n        logger.checkNew(new.target, Web3Provider);\n\n        if (provider == null) {\n            logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n\n        let path: string = null;\n        let jsonRpcFetchFunc: JsonRpcFetchFunc = null;\n        let subprovider: ExternalProvider = null;\n\n        if (typeof(provider) === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n\n        } else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n                path = \"metamask\";\n            }\n\n            subprovider = provider;\n\n            if (provider.request) {\n                if (path === \"\") { path = \"eip-1193:\"; }\n                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            } else if (provider.sendAsync) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            } else if (provider.send) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            } else {\n                logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n\n            if (!path) { path = \"unknown:\"; }\n        }\n\n        super(path, network);\n\n        defineReadOnly(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        defineReadOnly(this, \"provider\", subprovider);\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        return this.jsonRpcFetchFunc(method, params);\n    }\n}\n"],"mappings":"AAAA,YAAY;;AAGZ,SAASA,QAAQ,EAAEC,cAAc,QAAQ,2BAA2B;AAEpE,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAElC,SAASE,eAAe,QAAQ,qBAAqB;AAarD,IAAIC,OAAO,GAAG,CAAC;AAMf,SAASC,sBAAsBA,CAACC,QAA0B,EAAEC,QAAwB;EAChF,MAAMC,OAAO,GAAG,mBAAmB;EAEnC,OAAO,UAASC,MAAc,EAAEC,MAAkB;IAE9C;IACA,IAAID,MAAM,IAAI,UAAU,KAAKH,QAAQ,CAACK,UAAU,IAAIL,QAAQ,CAACM,QAAQ,CAAC,EAAE;MACpE;MACAH,MAAM,GAAG,eAAe;MACxBC,MAAM,GAAG,CAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAE;;IAGrC,MAAMG,OAAO,GAAG;MACZJ,MAAM,EAAEA,MAAM;MACdC,MAAM,EAAEA,MAAM;MACdI,EAAE,EAAGV,OAAO,EAAG;MACfW,OAAO,EAAE;KACZ;IAED,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnC,IAAI,CAACC,IAAI,CAAC,OAAO,EAAE;QACfC,MAAM,EAAE,SAAS;QACjBZ,OAAO;QACPK,OAAO,EAAEf,QAAQ,CAACe,OAAO,CAAC;QAC1BP,QAAQ,EAAE;OACb,CAAC;MAEFC,QAAQ,CAACM,OAAO,EAAE,CAACQ,KAAK,EAAEC,QAAQ,KAAI;QAElC,IAAID,KAAK,EAAE;UACP,IAAI,CAACF,IAAI,CAAC,OAAO,EAAE;YACfC,MAAM,EAAE,UAAU;YAClBZ,OAAO;YACPa,KAAK;YACLR,OAAO;YACPP,QAAQ,EAAE;WACb,CAAC;UAEF,OAAOY,MAAM,CAACG,KAAK,CAAC;;QAGxB,IAAI,CAACF,IAAI,CAAC,OAAO,EAAE;UACfC,MAAM,EAAE,UAAU;UAClBZ,OAAO;UACPK,OAAO;UACPS,QAAQ;UACRhB,QAAQ,EAAE;SACb,CAAC;QAEF,IAAIgB,QAAQ,CAACD,KAAK,EAAE;UAChB,MAAMA,KAAK,GAAG,IAAIE,KAAK,CAACD,QAAQ,CAACD,KAAK,CAACG,OAAO,CAAC;UACzCH,KAAM,CAACI,IAAI,GAAGH,QAAQ,CAACD,KAAK,CAACI,IAAI;UACjCJ,KAAM,CAACK,IAAI,GAAGJ,QAAQ,CAACD,KAAK,CAACK,IAAI;UACvC,OAAOR,MAAM,CAACG,KAAK,CAAC;;QAGxBJ,OAAO,CAACK,QAAQ,CAACK,MAAM,CAAC;MAC5B,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;AACL;AAEA,SAASC,mBAAmBA,CAACtB,QAA0B;EACnD,OAAO,UAASG,MAAc,EAAEC,MAAkB;IAC9C,IAAIA,MAAM,IAAI,IAAI,EAAE;MAAEA,MAAM,GAAG,EAAG;;IAElC;IACA,IAAID,MAAM,IAAI,UAAU,KAAKH,QAAQ,CAACK,UAAU,IAAIL,QAAQ,CAACM,QAAQ,CAAC,EAAE;MACpE;MACAH,MAAM,GAAG,eAAe;MACxBC,MAAM,GAAG,CAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAE;;IAGrC,MAAMG,OAAO,GAAG;MAAEJ,MAAM;MAAEC;IAAM,CAAE;IAElC,IAAI,CAACS,IAAI,CAAC,OAAO,EAAE;MACfC,MAAM,EAAE,SAAS;MACjBZ,OAAO,EAAE,gBAAgB;MACzBK,OAAO,EAAEf,QAAQ,CAACe,OAAO,CAAC;MAC1BP,QAAQ,EAAE;KACb,CAAC;IAEF,OAAOA,QAAQ,CAACO,OAAO,CAACA,OAAO,CAAC,CAACgB,IAAI,CAAEP,QAAQ,IAAI;MAC/C,IAAI,CAACH,IAAI,CAAC,OAAO,EAAE;QACfC,MAAM,EAAE,UAAU;QAClBZ,OAAO,EAAE,gBAAgB;QACzBK,OAAO;QACPS,QAAQ;QACRhB,QAAQ,EAAE;OACb,CAAC;MAEF,OAAOgB,QAAQ;IAEnB,CAAC,EAAGD,KAAK,IAAI;MACT,IAAI,CAACF,IAAI,CAAC,OAAO,EAAE;QACfC,MAAM,EAAE,UAAU;QAClBZ,OAAO,EAAE,gBAAgB;QACzBK,OAAO;QACPQ,KAAK;QACLf,QAAQ,EAAE;OACb,CAAC;MAEF,MAAMe,KAAK;IACf,CAAC,CAAC;EACN,CAAC;AACL;AAEA,OAAM,MAAOS,YAAa,SAAQ3B,eAAe;EAI7C4B,YAAYzB,QAA6C,EAAE0B,OAAoB;IAC3E9B,MAAM,CAAC+B,QAAQ,CAACC,GAAG,CAACC,MAAM,EAAEL,YAAY,CAAC;IAEzC,IAAIxB,QAAQ,IAAI,IAAI,EAAE;MAClBJ,MAAM,CAACkC,kBAAkB,CAAC,kBAAkB,EAAE,UAAU,EAAE9B,QAAQ,CAAC;;IAGvE,IAAI+B,IAAI,GAAW,IAAI;IACvB,IAAIC,gBAAgB,GAAqB,IAAI;IAC7C,IAAIC,WAAW,GAAqB,IAAI;IAExC,IAAI,OAAOjC,QAAS,KAAK,UAAU,EAAE;MACjC+B,IAAI,GAAG,UAAU;MACjBC,gBAAgB,GAAGhC,QAAQ;KAE9B,MAAM;MACH+B,IAAI,GAAG/B,QAAQ,CAACkC,IAAI,IAAIlC,QAAQ,CAAC+B,IAAI,IAAI,EAAE;MAC3C,IAAI,CAACA,IAAI,IAAI/B,QAAQ,CAACK,UAAU,EAAE;QAC9B0B,IAAI,GAAG,UAAU;;MAGrBE,WAAW,GAAGjC,QAAQ;MAEtB,IAAIA,QAAQ,CAACO,OAAO,EAAE;QAClB,IAAIwB,IAAI,KAAK,EAAE,EAAE;UAAEA,IAAI,GAAG,WAAW;;QACrCC,gBAAgB,GAAGV,mBAAmB,CAACtB,QAAQ,CAAC;OACnD,MAAM,IAAIA,QAAQ,CAACmC,SAAS,EAAE;QAC3BH,gBAAgB,GAAGjC,sBAAsB,CAACC,QAAQ,EAAEA,QAAQ,CAACmC,SAAS,CAACC,IAAI,CAACpC,QAAQ,CAAC,CAAC;OACzF,MAAM,IAAIA,QAAQ,CAACqC,IAAI,EAAE;QACtBL,gBAAgB,GAAGjC,sBAAsB,CAACC,QAAQ,EAAEA,QAAQ,CAACqC,IAAI,CAACD,IAAI,CAACpC,QAAQ,CAAC,CAAC;OACpF,MAAM;QACHJ,MAAM,CAACkC,kBAAkB,CAAC,sBAAsB,EAAE,UAAU,EAAE9B,QAAQ,CAAC;;MAG3E,IAAI,CAAC+B,IAAI,EAAE;QAAEA,IAAI,GAAG,UAAU;;;IAGlC,KAAK,CAACA,IAAI,EAAEL,OAAO,CAAC;IAEpBjC,cAAc,CAAC,IAAI,EAAE,kBAAkB,EAAEuC,gBAAgB,CAAC;IAC1DvC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAEwC,WAAW,CAAC;EACjD;EAEAI,IAAIA,CAAClC,MAAc,EAAEC,MAAkB;IACnC,OAAO,IAAI,CAAC4B,gBAAgB,CAAC7B,MAAM,EAAEC,MAAM,CAAC;EAChD"},"metadata":{},"sourceType":"module","externalDependencies":[]}