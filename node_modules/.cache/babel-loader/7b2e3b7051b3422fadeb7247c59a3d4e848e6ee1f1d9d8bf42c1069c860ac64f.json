{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction now() {\n  return new Date().getTime();\n}\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks) {\n  let result = null;\n  for (let i = 0; i < networks.length; i++) {\n    const network = networks[i];\n    // Null! We do not know our network; bail.\n    if (network == null) {\n      return null;\n    }\n    if (result) {\n      // Make sure the network matches the previous networks\n      if (!(result.name === network.name && result.chainId === network.chainId && (result.ensAddress === network.ensAddress || result.ensAddress == null && network.ensAddress == null))) {\n        logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n      }\n    } else {\n      result = network;\n    }\n  }\n  return result;\n}\nfunction median(values, maxDelta) {\n  values = values.slice().sort();\n  const middle = Math.floor(values.length / 2);\n  // Odd length; take the middle\n  if (values.length % 2) {\n    return values[middle];\n  }\n  // Even length; take the average of the two middle\n  const a = values[middle - 1],\n    b = values[middle];\n  if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n    return null;\n  }\n  return (a + b) / 2;\n}\nfunction serialize(value) {\n  if (value === null) {\n    return \"null\";\n  } else if (typeof value === \"number\" || typeof value === \"boolean\") {\n    return JSON.stringify(value);\n  } else if (typeof value === \"string\") {\n    return value;\n  } else if (BigNumber.isBigNumber(value)) {\n    return value.toString();\n  } else if (Array.isArray(value)) {\n    return JSON.stringify(value.map(i => serialize(i)));\n  } else if (typeof value === \"object\") {\n    const keys = Object.keys(value);\n    keys.sort();\n    return \"{\" + keys.map(key => {\n      let v = value[key];\n      if (typeof v === \"function\") {\n        v = \"[function]\";\n      } else {\n        v = serialize(v);\n      }\n      return JSON.stringify(key) + \":\" + v;\n    }).join(\",\") + \"}\";\n  }\n  throw new Error(\"unknown value type: \" + typeof value);\n}\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n;\nfunction stall(duration) {\n  let cancel = null;\n  let timer = null;\n  let promise = new Promise(resolve => {\n    cancel = function () {\n      if (timer) {\n        clearTimeout(timer);\n        timer = null;\n      }\n      resolve();\n    };\n    timer = setTimeout(cancel, duration);\n  });\n  const wait = func => {\n    promise = promise.then(func);\n    return promise;\n  };\n  function getPromise() {\n    return promise;\n  }\n  return {\n    cancel,\n    getPromise,\n    wait\n  };\n}\nconst ForwardErrors = [Logger.errors.CALL_EXCEPTION, Logger.errors.INSUFFICIENT_FUNDS, Logger.errors.NONCE_EXPIRED, Logger.errors.REPLACEMENT_UNDERPRICED, Logger.errors.UNPREDICTABLE_GAS_LIMIT];\nconst ForwardProperties = [\"address\", \"args\", \"errorArgs\", \"errorSignature\", \"method\", \"transaction\"];\n;\nfunction exposeDebugConfig(config, now) {\n  const result = {\n    weight: config.weight\n  };\n  Object.defineProperty(result, \"provider\", {\n    get: () => config.provider\n  });\n  if (config.start) {\n    result.start = config.start;\n  }\n  if (now) {\n    result.duration = now - config.start;\n  }\n  if (config.done) {\n    if (config.error) {\n      result.error = config.error;\n    } else {\n      result.result = config.result || null;\n    }\n  }\n  return result;\n}\nfunction normalizedTally(normalize, quorum) {\n  return function (configs) {\n    // Count the votes for each result\n    const tally = {};\n    configs.forEach(c => {\n      const value = normalize(c.result);\n      if (!tally[value]) {\n        tally[value] = {\n          count: 0,\n          result: c.result\n        };\n      }\n      tally[value].count++;\n    });\n    // Check for a quorum on any given result\n    const keys = Object.keys(tally);\n    for (let i = 0; i < keys.length; i++) {\n      const check = tally[keys[i]];\n      if (check.count >= quorum) {\n        return check.result;\n      }\n    }\n    // No quroum\n    return undefined;\n  };\n}\nfunction getProcessFunc(provider, method, params) {\n  let normalize = serialize;\n  switch (method) {\n    case \"getBlockNumber\":\n      // Return the median value, unless there is (median + 1) is also\n      // present, in which case that is probably true and the median\n      // is going to be stale soon. In the event of a malicious node,\n      // the lie will be true soon enough.\n      return function (configs) {\n        const values = configs.map(c => c.result);\n        // Get the median block number\n        let blockNumber = median(configs.map(c => c.result), 2);\n        if (blockNumber == null) {\n          return undefined;\n        }\n        blockNumber = Math.ceil(blockNumber);\n        // If the next block height is present, its prolly safe to use\n        if (values.indexOf(blockNumber + 1) >= 0) {\n          blockNumber++;\n        }\n        // Don't ever roll back the blockNumber\n        if (blockNumber >= provider._highestBlockNumber) {\n          provider._highestBlockNumber = blockNumber;\n        }\n        return provider._highestBlockNumber;\n      };\n    case \"getGasPrice\":\n      // Return the middle (round index up) value, similar to median\n      // but do not average even entries and choose the higher.\n      // Malicious actors must compromise 50% of the nodes to lie.\n      return function (configs) {\n        const values = configs.map(c => c.result);\n        values.sort();\n        return values[Math.floor(values.length / 2)];\n      };\n    case \"getEtherPrice\":\n      // Returns the median price. Malicious actors must compromise at\n      // least 50% of the nodes to lie (in a meaningful way).\n      return function (configs) {\n        return median(configs.map(c => c.result));\n      };\n    // No additional normalizing required; serialize is enough\n    case \"getBalance\":\n    case \"getTransactionCount\":\n    case \"getCode\":\n    case \"getStorageAt\":\n    case \"call\":\n    case \"estimateGas\":\n    case \"getLogs\":\n      break;\n    // We drop the confirmations from transactions as it is approximate\n    case \"getTransaction\":\n    case \"getTransactionReceipt\":\n      normalize = function (tx) {\n        if (tx == null) {\n          return null;\n        }\n        tx = shallowCopy(tx);\n        tx.confirmations = -1;\n        return serialize(tx);\n      };\n      break;\n    // We drop the confirmations from transactions as it is approximate\n    case \"getBlock\":\n      // We drop the confirmations from transactions as it is approximate\n      if (params.includeTransactions) {\n        normalize = function (block) {\n          if (block == null) {\n            return null;\n          }\n          block = shallowCopy(block);\n          block.transactions = block.transactions.map(tx => {\n            tx = shallowCopy(tx);\n            tx.confirmations = -1;\n            return tx;\n          });\n          return serialize(block);\n        };\n      } else {\n        normalize = function (block) {\n          if (block == null) {\n            return null;\n          }\n          return serialize(block);\n        };\n      }\n      break;\n    default:\n      throw new Error(\"unknown method: \" + method);\n  }\n  // Return the result if and only if the expected quorum is\n  // satisfied and agreed upon for the final result.\n  return normalizedTally(normalize, provider.quorum);\n}\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nfunction waitForSync(config, blockNumber) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const provider = config.provider;\n    if (provider.blockNumber != null && provider.blockNumber >= blockNumber || blockNumber === -1) {\n      return provider;\n    }\n    return poll(() => {\n      return new Promise((resolve, reject) => {\n        setTimeout(function () {\n          // We are synced\n          if (provider.blockNumber >= blockNumber) {\n            return resolve(provider);\n          }\n          // We're done; just quit\n          if (config.cancelled) {\n            return resolve(null);\n          }\n          // Try again, next block\n          return resolve(undefined);\n        }, 0);\n      });\n    }, {\n      oncePoll: provider\n    });\n  });\n}\nfunction getRunner(config, currentBlockNumber, method, params) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let provider = config.provider;\n    switch (method) {\n      case \"getBlockNumber\":\n      case \"getGasPrice\":\n        return provider[method]();\n      case \"getEtherPrice\":\n        if (provider.getEtherPrice) {\n          return provider.getEtherPrice();\n        }\n        break;\n      case \"getBalance\":\n      case \"getTransactionCount\":\n      case \"getCode\":\n        if (params.blockTag && isHexString(params.blockTag)) {\n          provider = yield waitForSync(config, currentBlockNumber);\n        }\n        return provider[method](params.address, params.blockTag || \"latest\");\n      case \"getStorageAt\":\n        if (params.blockTag && isHexString(params.blockTag)) {\n          provider = yield waitForSync(config, currentBlockNumber);\n        }\n        return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n      case \"getBlock\":\n        if (params.blockTag && isHexString(params.blockTag)) {\n          provider = yield waitForSync(config, currentBlockNumber);\n        }\n        return provider[params.includeTransactions ? \"getBlockWithTransactions\" : \"getBlock\"](params.blockTag || params.blockHash);\n      case \"call\":\n      case \"estimateGas\":\n        if (params.blockTag && isHexString(params.blockTag)) {\n          provider = yield waitForSync(config, currentBlockNumber);\n        }\n        return provider[method](params.transaction);\n      case \"getTransaction\":\n      case \"getTransactionReceipt\":\n        return provider[method](params.transactionHash);\n      case \"getLogs\":\n        {\n          let filter = params.filter;\n          if (filter.fromBlock && isHexString(filter.fromBlock) || filter.toBlock && isHexString(filter.toBlock)) {\n            provider = yield waitForSync(config, currentBlockNumber);\n          }\n          return provider.getLogs(filter);\n        }\n    }\n    return logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n      method: method,\n      params: params\n    });\n  });\n}\nexport class FallbackProvider extends BaseProvider {\n  constructor(providers, quorum) {\n    logger.checkNew(new.target, FallbackProvider);\n    if (providers.length === 0) {\n      logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n    }\n    const providerConfigs = providers.map((configOrProvider, index) => {\n      if (Provider.isProvider(configOrProvider)) {\n        const stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n        const priority = 1;\n        return Object.freeze({\n          provider: configOrProvider,\n          weight: 1,\n          stallTimeout,\n          priority\n        });\n      }\n      const config = shallowCopy(configOrProvider);\n      if (config.priority == null) {\n        config.priority = 1;\n      }\n      if (config.stallTimeout == null) {\n        config.stallTimeout = isCommunityResource(configOrProvider) ? 2000 : 750;\n      }\n      if (config.weight == null) {\n        config.weight = 1;\n      }\n      const weight = config.weight;\n      if (weight % 1 || weight > 512 || weight < 1) {\n        logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${index}].weight`, weight);\n      }\n      return Object.freeze(config);\n    });\n    const total = providerConfigs.reduce((accum, c) => accum + c.weight, 0);\n    if (quorum == null) {\n      quorum = total / 2;\n    } else if (quorum > total) {\n      logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n    }\n    // Are all providers' networks are known\n    let networkOrReady = checkNetworks(providerConfigs.map(c => c.provider.network));\n    // Not all networks are known; we must stall\n    if (networkOrReady == null) {\n      networkOrReady = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.detectNetwork().then(resolve, reject);\n        }, 0);\n      });\n    }\n    super(networkOrReady);\n    // Preserve a copy, so we do not get mutated\n    defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n    defineReadOnly(this, \"quorum\", quorum);\n    this._highestBlockNumber = -1;\n  }\n  detectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const networks = yield Promise.all(this.providerConfigs.map(c => c.provider.getNetwork()));\n      return checkNetworks(networks);\n    });\n  }\n  perform(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Sending transactions is special; always broadcast it to all backends\n      if (method === \"sendTransaction\") {\n        const results = yield Promise.all(this.providerConfigs.map(c => {\n          return c.provider.sendTransaction(params.signedTransaction).then(result => {\n            return result.hash;\n          }, error => {\n            return error;\n          });\n        }));\n        // Any success is good enough (other errors are likely \"already seen\" errors\n        for (let i = 0; i < results.length; i++) {\n          const result = results[i];\n          if (typeof result === \"string\") {\n            return result;\n          }\n        }\n        // They were all an error; pick the first error\n        throw results[0];\n      }\n      // We need to make sure we are in sync with our backends, so we need\n      // to know this before we can make a lot of calls\n      if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n        yield this.getBlockNumber();\n      }\n      const processFunc = getProcessFunc(this, method, params);\n      // Shuffle the providers and then sort them by their priority; we\n      // shallowCopy them since we will store the result in them too\n      const configs = shuffled(this.providerConfigs.map(shallowCopy));\n      configs.sort((a, b) => a.priority - b.priority);\n      const currentBlockNumber = this._highestBlockNumber;\n      let i = 0;\n      let first = true;\n      while (true) {\n        const t0 = now();\n        // Compute the inflight weight (exclude anything past)\n        let inflightWeight = configs.filter(c => c.runner && t0 - c.start < c.stallTimeout).reduce((accum, c) => accum + c.weight, 0);\n        // Start running enough to meet quorum\n        while (inflightWeight < this.quorum && i < configs.length) {\n          const config = configs[i++];\n          const rid = nextRid++;\n          config.start = now();\n          config.staller = stall(config.stallTimeout);\n          config.staller.wait(() => {\n            config.staller = null;\n          });\n          config.runner = getRunner(config, currentBlockNumber, method, params).then(result => {\n            config.done = true;\n            config.result = result;\n            if (this.listenerCount(\"debug\")) {\n              this.emit(\"debug\", {\n                action: \"request\",\n                rid: rid,\n                backend: exposeDebugConfig(config, now()),\n                request: {\n                  method: method,\n                  params: deepCopy(params)\n                },\n                provider: this\n              });\n            }\n          }, error => {\n            config.done = true;\n            config.error = error;\n            if (this.listenerCount(\"debug\")) {\n              this.emit(\"debug\", {\n                action: \"request\",\n                rid: rid,\n                backend: exposeDebugConfig(config, now()),\n                request: {\n                  method: method,\n                  params: deepCopy(params)\n                },\n                provider: this\n              });\n            }\n          });\n          if (this.listenerCount(\"debug\")) {\n            this.emit(\"debug\", {\n              action: \"request\",\n              rid: rid,\n              backend: exposeDebugConfig(config, null),\n              request: {\n                method: method,\n                params: deepCopy(params)\n              },\n              provider: this\n            });\n          }\n          inflightWeight += config.weight;\n        }\n        // Wait for anything meaningful to finish or stall out\n        const waiting = [];\n        configs.forEach(c => {\n          if (c.done || !c.runner) {\n            return;\n          }\n          waiting.push(c.runner);\n          if (c.staller) {\n            waiting.push(c.staller.getPromise());\n          }\n        });\n        if (waiting.length) {\n          yield Promise.race(waiting);\n        }\n        // Check the quorum and process the results; the process function\n        // may additionally decide the quorum is not met\n        const results = configs.filter(c => c.done && c.error == null);\n        if (results.length >= this.quorum) {\n          const result = processFunc(results);\n          if (result !== undefined) {\n            // Shut down any stallers\n            configs.forEach(c => {\n              if (c.staller) {\n                c.staller.cancel();\n              }\n              c.cancelled = true;\n            });\n            return result;\n          }\n          if (!first) {\n            yield stall(100).getPromise();\n          }\n          first = false;\n        }\n        // No result, check for errors that should be forwarded\n        const errors = configs.reduce((accum, c) => {\n          if (!c.done || c.error == null) {\n            return accum;\n          }\n          const code = c.error.code;\n          if (ForwardErrors.indexOf(code) >= 0) {\n            if (!accum[code]) {\n              accum[code] = {\n                error: c.error,\n                weight: 0\n              };\n            }\n            accum[code].weight += c.weight;\n          }\n          return accum;\n        }, {});\n        Object.keys(errors).forEach(errorCode => {\n          const tally = errors[errorCode];\n          if (tally.weight < this.quorum) {\n            return;\n          }\n          // Shut down any stallers\n          configs.forEach(c => {\n            if (c.staller) {\n              c.staller.cancel();\n            }\n            c.cancelled = true;\n          });\n          const e = tally.error;\n          const props = {};\n          ForwardProperties.forEach(name => {\n            if (e[name] == null) {\n              return;\n            }\n            props[name] = e[name];\n          });\n          logger.throwError(e.reason || e.message, errorCode, props);\n        });\n        // All configs have run to completion; we will never get more data\n        if (configs.filter(c => !c.done).length === 0) {\n          break;\n        }\n      }\n      // Shut down any stallers; shouldn't be any\n      configs.forEach(c => {\n        if (c.staller) {\n          c.staller.cancel();\n        }\n        c.cancelled = true;\n      });\n      return logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n        method: method,\n        params: params,\n        //results: configs.map((c) => c.result),\n        //errors: configs.map((c) => c.error),\n        results: configs.map(c => exposeDebugConfig(c)),\n        provider: this\n      });\n    });\n  }\n}","map":{"version":3,"names":["Provider","BigNumber","isHexString","deepCopy","defineReadOnly","shallowCopy","shuffled","poll","BaseProvider","isCommunityResource","Logger","version","logger","now","Date","getTime","checkNetworks","networks","result","i","length","network","name","chainId","ensAddress","throwArgumentError","median","values","maxDelta","slice","sort","middle","Math","floor","a","b","abs","serialize","value","JSON","stringify","isBigNumber","toString","Array","isArray","map","keys","Object","key","v","join","Error","nextRid","stall","duration","cancel","timer","promise","Promise","resolve","clearTimeout","setTimeout","wait","func","then","getPromise","ForwardErrors","errors","CALL_EXCEPTION","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNPREDICTABLE_GAS_LIMIT","ForwardProperties","exposeDebugConfig","config","weight","defineProperty","get","provider","start","done","error","normalizedTally","normalize","quorum","configs","tally","forEach","c","count","check","undefined","getProcessFunc","method","params","blockNumber","ceil","indexOf","_highestBlockNumber","tx","confirmations","includeTransactions","block","transactions","waitForSync","reject","cancelled","oncePoll","getRunner","currentBlockNumber","getEtherPrice","blockTag","address","getStorageAt","position","blockHash","transaction","transactionHash","filter","fromBlock","toBlock","getLogs","throwError","UNKNOWN_ERROR","FallbackProvider","constructor","providers","checkNew","new","target","providerConfigs","configOrProvider","index","isProvider","stallTimeout","priority","freeze","total","reduce","accum","networkOrReady","detectNetwork","all","getNetwork","perform","results","sendTransaction","signedTransaction","hash","getBlockNumber","processFunc","first","t0","inflightWeight","runner","rid","staller","listenerCount","emit","action","backend","request","waiting","push","race","code","errorCode","e","props","reason","message","SERVER_ERROR"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\providers\\src.ts\\fallback-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Block, BlockWithTransactions, Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Network } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\n\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction now() { return (new Date()).getTime(); }\n\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks: Array<Network>): Network {\n    let result = null;\n\n    for (let i = 0; i < networks.length; i++) {\n        const network = networks[i];\n\n        // Null! We do not know our network; bail.\n        if (network == null) { return null; }\n\n        if (result) {\n            // Make sure the network matches the previous networks\n            if (!(result.name === network.name && result.chainId === network.chainId &&\n                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {\n\n                logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n           }\n        } else {\n            result = network;\n        }\n    }\n\n    return result;\n}\n\nfunction median(values: Array<number>, maxDelta?: number): number {\n    values = values.slice().sort();\n    const middle = Math.floor(values.length / 2);\n\n    // Odd length; take the middle\n    if (values.length % 2) {\n        return values[middle];\n    }\n\n    // Even length; take the average of the two middle\n    const a = values[middle - 1], b = values[middle];\n\n    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n    }\n\n    return (a + b) / 2;\n}\n\nfunction serialize(value: any): string {\n    if (value === null) {\n        return \"null\";\n    } else if (typeof(value) === \"number\" || typeof(value) === \"boolean\") {\n        return JSON.stringify(value);\n    } else if (typeof(value) === \"string\") {\n        return value;\n    } else if (BigNumber.isBigNumber(value)) {\n        return value.toString();\n    } else if (Array.isArray(value)) {\n        return JSON.stringify(value.map((i) => serialize(i)));\n    } else if (typeof(value) === \"object\") {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map((key) => {\n            let v = value[key];\n            if (typeof(v) === \"function\") {\n                v = \"[function]\";\n            } else {\n                v = serialize(v);\n            }\n            return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n    }\n\n    throw new Error(\"unknown value type: \" + typeof(value));\n}\n\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n\n\nexport interface FallbackProviderConfig {\n    // The Provider\n    provider: Provider;\n\n    // The priority to favour this Provider; lower values are used first (higher priority)\n    priority?: number;\n\n    // Timeout before also triggering the next provider; this does not stop\n    // this provider and if its result comes back before a quorum is reached\n    // it will be incorporated into the vote\n    // - lower values will cause more network traffic but may result in a\n    //   faster retult.\n    stallTimeout?: number;\n\n    // How much this provider contributes to the quorum; sometimes a specific\n    // provider may be more reliable or trustworthy than others, but usually\n    // this should be left as the default\n    weight?: number;\n};\n\n// A Staller is used to provide a delay to give a Provider a chance to response\n// before asking the next Provider to try.\ntype Staller = {\n    wait: (func: () => void) => Promise<void>\n    getPromise: () => Promise<void>,\n    cancel: () => void\n};\n\nfunction stall(duration: number): Staller {\n    let cancel: () => void = null;\n\n    let timer: NodeJS.Timer = null;\n    let promise = <Promise<void>>(new Promise((resolve) => {\n        cancel = function() {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            resolve();\n        }\n        timer = setTimeout(cancel, duration);\n    }));\n\n    const wait = (func: () => void) => {\n        promise = promise.then(func);\n        return promise;\n    }\n\n    function getPromise(): Promise<void> {\n        return promise;\n    }\n\n    return { cancel, getPromise, wait };\n}\n\nconst ForwardErrors = [\n    Logger.errors.CALL_EXCEPTION,\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n    Logger.errors.UNPREDICTABLE_GAS_LIMIT\n];\n\nconst ForwardProperties = [\n    \"address\",\n    \"args\",\n    \"errorArgs\",\n    \"errorSignature\",\n    \"method\",\n    \"transaction\",\n];\n\n\n// @TODO: Make this an object with staller and cancel built-in\ninterface RunningConfig extends FallbackProviderConfig {\n    start?: number;\n    done?: boolean;\n    cancelled?: boolean;\n    runner?: Promise<any>;\n    staller?: Staller;\n    result?: any;\n    error?: Error;\n};\n\nfunction exposeDebugConfig(config: RunningConfig, now?: number): any {\n    const result: any = {\n        weight: config.weight\n    };\n    Object.defineProperty(result, \"provider\", { get: () => config.provider });\n    if (config.start) { result.start = config.start; }\n    if (now) { result.duration = (now - config.start); }\n    if (config.done) {\n        if (config.error) {\n            result.error = config.error;\n        } else {\n            result.result = config.result || null;\n        }\n    }\n    return result;\n}\n\nfunction normalizedTally(normalize: (value: any) => string, quorum: number): (configs: Array<RunningConfig>) => any {\n    return function(configs: Array<RunningConfig>): any {\n\n        // Count the votes for each result\n        const tally: { [ key: string]: { count: number, result: any } } = { };\n        configs.forEach((c) => {\n            const value = normalize(c.result);\n            if (!tally[value]) { tally[value] = { count: 0, result: c.result }; }\n            tally[value].count++;\n        });\n\n        // Check for a quorum on any given result\n        const keys = Object.keys(tally);\n        for (let i = 0; i < keys.length; i++) {\n            const check = tally[keys[i]];\n            if (check.count >= quorum) {\n                return check.result;\n            }\n        }\n\n        // No quroum\n        return undefined;\n    }\n}\nfunction getProcessFunc(provider: FallbackProvider, method: string, params: { [ key: string ]: any }): (configs: Array<RunningConfig>) => any {\n\n    let normalize = serialize;\n\n    switch (method) {\n        case \"getBlockNumber\":\n            // Return the median value, unless there is (median + 1) is also\n            // present, in which case that is probably true and the median\n            // is going to be stale soon. In the event of a malicious node,\n            // the lie will be true soon enough.\n            return function(configs: Array<RunningConfig>): number {\n                const values = configs.map((c) => c.result);\n\n                // Get the median block number\n                let blockNumber = median(configs.map((c) => c.result), 2);\n                if (blockNumber == null) { return undefined; }\n\n                blockNumber = Math.ceil(blockNumber);\n\n                // If the next block height is present, its prolly safe to use\n                if (values.indexOf(blockNumber + 1) >= 0) { blockNumber++; }\n\n                // Don't ever roll back the blockNumber\n                if (blockNumber >= provider._highestBlockNumber) {\n                    provider._highestBlockNumber = blockNumber;\n                }\n\n                return provider._highestBlockNumber;\n            };\n\n        case \"getGasPrice\":\n            // Return the middle (round index up) value, similar to median\n            // but do not average even entries and choose the higher.\n            // Malicious actors must compromise 50% of the nodes to lie.\n            return function(configs: Array<RunningConfig>): BigNumber {\n                const values = configs.map((c) => c.result);\n                values.sort();\n                return values[Math.floor(values.length / 2)];\n            }\n\n        case \"getEtherPrice\":\n            // Returns the median price. Malicious actors must compromise at\n            // least 50% of the nodes to lie (in a meaningful way).\n            return function(configs: Array<RunningConfig>): number {\n                return median(configs.map((c) => c.result));\n            }\n\n        // No additional normalizing required; serialize is enough\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            normalize = function(tx: any): string {\n                if (tx == null) { return null; }\n\n                tx = shallowCopy(tx);\n                tx.confirmations = -1;\n                return serialize(tx);\n            }\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getBlock\":\n            // We drop the confirmations from transactions as it is approximate\n            if (params.includeTransactions) {\n                normalize = function(block: BlockWithTransactions): string {\n                    if (block == null) { return null; }\n\n                    block = shallowCopy(block);\n                    block.transactions = block.transactions.map((tx) => {\n                        tx = shallowCopy(tx);\n                        tx.confirmations = -1;\n                        return tx;\n                    });\n                    return serialize(block);\n                };\n            } else {\n                normalize = function(block: Block): string {\n                    if (block == null) { return null; }\n                    return serialize(block);\n                }\n            }\n            break;\n\n        default:\n            throw new Error(\"unknown method: \" + method);\n    }\n\n    // Return the result if and only if the expected quorum is\n    // satisfied and agreed upon for the final result.\n    return normalizedTally(normalize, provider.quorum);\n\n}\n\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nasync function waitForSync(config: RunningConfig, blockNumber: number): Promise<BaseProvider> {\n    const provider = <BaseProvider>(config.provider);\n\n    if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {\n        return provider;\n    }\n\n    return poll(() => {\n        return new Promise((resolve, reject) => {\n            setTimeout(function() {\n\n                // We are synced\n                if (provider.blockNumber >= blockNumber) { return resolve(provider); }\n\n                // We're done; just quit\n                if (config.cancelled) { return resolve(null); }\n\n                // Try again, next block\n                return resolve(undefined);\n            }, 0);\n        });\n    }, { oncePoll: provider });\n}\n\nasync function getRunner(config: RunningConfig, currentBlockNumber: number, method: string, params: { [ key: string]: any }): Promise<any> {\n    let provider = config.provider;\n\n    switch (method) {\n        case \"getBlockNumber\":\n        case \"getGasPrice\":\n            return provider[method]();\n        case \"getEtherPrice\":\n            if ((<any>provider).getEtherPrice) {\n                return (<any>provider).getEtherPrice();\n            }\n            break;\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[method](params.address, params.blockTag || \"latest\");\n        case \"getStorageAt\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n        case \"getBlock\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[(params.includeTransactions ? \"getBlockWithTransactions\": \"getBlock\")](params.blockTag || params.blockHash);\n        case \"call\":\n        case \"estimateGas\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[method](params.transaction);\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            return provider[method](params.transactionHash);\n        case \"getLogs\": {\n            let filter = params.filter;\n            if ((filter.fromBlock && isHexString(filter.fromBlock)) || (filter.toBlock && isHexString(filter.toBlock))) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getLogs(filter);\n        }\n    }\n\n    return logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n        method: method,\n        params: params\n    });\n}\n\nexport class FallbackProvider extends BaseProvider {\n    readonly providerConfigs: ReadonlyArray<FallbackProviderConfig>;\n    readonly quorum: number;\n\n    // Due to the highly asyncronous nature of the blockchain, we need\n    // to make sure we never unroll the blockNumber due to our random\n    // sample of backends\n    _highestBlockNumber: number;\n\n    constructor(providers: Array<Provider | FallbackProviderConfig>, quorum?: number) {\n        logger.checkNew(new.target, FallbackProvider);\n\n        if (providers.length === 0) {\n            logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n\n        const providerConfigs: Array<FallbackProviderConfig> = providers.map((configOrProvider, index) => {\n            if (Provider.isProvider(configOrProvider)) {\n                const stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n                const priority = 1;\n                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });\n            }\n\n            const config: FallbackProviderConfig = shallowCopy(configOrProvider);\n\n            if (config.priority == null) { config.priority = 1; }\n            if (config.stallTimeout == null) {\n                config.stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n            }\n            if (config.weight == null) { config.weight = 1; }\n\n            const weight = config.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n                logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${ index }].weight`, weight);\n            }\n\n            return Object.freeze(config);\n        });\n\n        const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);\n\n        if (quorum == null) {\n            quorum = total / 2;\n        } else if (quorum > total) {\n            logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        }\n\n        // Are all providers' networks are known\n        let networkOrReady: Network | Promise<Network> = checkNetworks(providerConfigs.map((c) => (<any>(c.provider)).network));\n\n        // Not all networks are known; we must stall\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then(resolve, reject);\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Preserve a copy, so we do not get mutated\n        defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n        defineReadOnly(this, \"quorum\", quorum);\n\n        this._highestBlockNumber = -1;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        const networks = await Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));\n        return checkNetworks(networks);\n    }\n\n    async perform(method: string, params: { [name: string]: any }): Promise<any> {\n        // Sending transactions is special; always broadcast it to all backends\n        if (method === \"sendTransaction\") {\n            const results: Array<string | Error> = await Promise.all(this.providerConfigs.map((c) => {\n                return c.provider.sendTransaction(params.signedTransaction).then((result) => {\n                    return result.hash;\n                }, (error) => {\n                    return error;\n                });\n            }));\n\n            // Any success is good enough (other errors are likely \"already seen\" errors\n            for (let i = 0; i < results.length; i++) {\n                const result = results[i];\n                if (typeof(result) === \"string\") { return result; }\n            }\n\n            // They were all an error; pick the first error\n            throw results[0];\n        }\n\n        // We need to make sure we are in sync with our backends, so we need\n        // to know this before we can make a lot of calls\n        if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n            await this.getBlockNumber();\n        }\n\n        const processFunc = getProcessFunc(this, method, params);\n\n        // Shuffle the providers and then sort them by their priority; we\n        // shallowCopy them since we will store the result in them too\n        const configs: Array<RunningConfig> = shuffled(this.providerConfigs.map(shallowCopy));\n        configs.sort((a, b) => (a.priority - b.priority));\n\n        const currentBlockNumber = this._highestBlockNumber;\n\n        let i = 0;\n        let first = true;\n        while (true) {\n            const t0 = now();\n\n            // Compute the inflight weight (exclude anything past)\n            let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))\n                                        .reduce((accum, c) => (accum + c.weight), 0);\n\n            // Start running enough to meet quorum\n            while (inflightWeight < this.quorum && i < configs.length) {\n                const config = configs[i++];\n\n                const rid = nextRid++;\n\n                config.start = now();\n                config.staller = stall(config.stallTimeout);\n                config.staller.wait(() => { config.staller = null; });\n\n                config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {\n                    config.done = true;\n                    config.result = result;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                     }\n\n                }, (error) => {\n                    config.done = true;\n                    config.error = error;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                    }\n                });\n\n                if (this.listenerCount(\"debug\")) {\n                    this.emit(\"debug\", {\n                        action: \"request\",\n                        rid: rid,\n                        backend: exposeDebugConfig(config, null),\n                        request: { method: method, params: deepCopy(params) },\n                        provider: this\n                    });\n                }\n\n                inflightWeight += config.weight;\n            }\n\n            // Wait for anything meaningful to finish or stall out\n            const waiting: Array<Promise<any>> = [ ];\n            configs.forEach((c) => {\n                if (c.done || !c.runner) { return; }\n                waiting.push(c.runner);\n                if (c.staller) { waiting.push(c.staller.getPromise()); }\n            });\n\n            if (waiting.length) { await Promise.race(waiting); }\n\n            // Check the quorum and process the results; the process function\n            // may additionally decide the quorum is not met\n            const results = configs.filter((c) => (c.done && c.error == null));\n            if (results.length >= this.quorum) {\n                const result = processFunc(results);\n                if (result !== undefined) {\n                    // Shut down any stallers\n                    configs.forEach(c => {\n                        if (c.staller) { c.staller.cancel(); }\n                        c.cancelled = true;\n                    });\n                    return result;\n                }\n                if (!first) { await stall(100).getPromise(); }\n                first = false;\n            }\n\n            // No result, check for errors that should be forwarded\n            const errors = configs.reduce((accum, c) => {\n                if (!c.done || c.error == null) { return accum; }\n\n                const code = (<any>(c.error)).code;\n                if (ForwardErrors.indexOf(code) >= 0) {\n                    if (!accum[code]) { accum[code] = { error: c.error, weight: 0 }; }\n                    accum[code].weight += c.weight;\n                }\n\n                return accum;\n            }, <{ [ code: string ]: { error: Error, weight: number } }>({ }));\n\n            Object.keys(errors).forEach((errorCode: string) => {\n                const tally = errors[errorCode];\n                if (tally.weight < this.quorum) { return; }\n\n                // Shut down any stallers\n                configs.forEach(c => {\n                    if (c.staller) { c.staller.cancel(); }\n                    c.cancelled = true;\n                });\n\n                const e = <any>(tally.error);\n\n                const props: { [ name: string ]: any } = { };\n                ForwardProperties.forEach((name) => {\n                    if (e[name] == null) { return; }\n                    props[name] = e[name];\n                });\n\n                logger.throwError(e.reason || e.message, <any>errorCode, props);\n            });\n\n            // All configs have run to completion; we will never get more data\n            if (configs.filter((c) => !c.done).length === 0) { break; }\n        }\n\n        // Shut down any stallers; shouldn't be any\n        configs.forEach(c => {\n            if (c.staller) { c.staller.cancel(); }\n            c.cancelled = true;\n        });\n\n        return logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n            method: method,\n            params: params,\n            //results: configs.map((c) => c.result),\n            //errors: configs.map((c) => c.error),\n            results: configs.map((c) => exposeDebugConfig(c)),\n            provider: this\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}