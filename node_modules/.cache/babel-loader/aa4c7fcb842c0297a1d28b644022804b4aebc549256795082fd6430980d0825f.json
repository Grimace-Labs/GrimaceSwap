{"ast":null,"code":"import { concat } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nexport const messagePrefix = \"\\x19Ethereum Signed Message:\\n\";\nexport function hashMessage(message) {\n  if (typeof message === \"string\") {\n    message = toUtf8Bytes(message);\n  }\n  return keccak256(concat([toUtf8Bytes(messagePrefix), toUtf8Bytes(String(message.length)), message]));\n}","map":{"version":3,"names":["concat","keccak256","toUtf8Bytes","messagePrefix","hashMessage","message","String","length"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\hash\\src.ts\\message.ts"],"sourcesContent":["import { Bytes, concat } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\n\nexport const messagePrefix = \"\\x19Ethereum Signed Message:\\n\";\n\nexport function hashMessage(message: Bytes | string): string {\n    if (typeof(message) === \"string\") { message = toUtf8Bytes(message); }\n    return keccak256(concat([\n        toUtf8Bytes(messagePrefix),\n        toUtf8Bytes(String(message.length)),\n        message\n    ]));\n}\n\n"],"mappings":"AAAA,SAAgBA,MAAM,QAAQ,sBAAsB;AACpD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,WAAW,QAAQ,wBAAwB;AAEpD,OAAO,MAAMC,aAAa,GAAG,gCAAgC;AAE7D,OAAM,SAAUC,WAAWA,CAACC,OAAuB;EAC/C,IAAI,OAAOA,OAAQ,KAAK,QAAQ,EAAE;IAAEA,OAAO,GAAGH,WAAW,CAACG,OAAO,CAAC;;EAClE,OAAOJ,SAAS,CAACD,MAAM,CAAC,CACpBE,WAAW,CAACC,aAAa,CAAC,EAC1BD,WAAW,CAACI,MAAM,CAACD,OAAO,CAACE,MAAM,CAAC,CAAC,EACnCF,OAAO,CACV,CAAC,CAAC;AACP"},"metadata":{},"sourceType":"module","externalDependencies":[]}