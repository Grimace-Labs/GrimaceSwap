{"ast":null,"code":"\"use strict\";\n\nimport { getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// These are load-balancer-based applicatoin IDs\nconst defaultApplicationIds = {\n  homestead: \"6004bcd10040261633ade990\",\n  ropsten: \"6004bd4d0040261633ade991\",\n  rinkeby: \"6004bda20040261633ade994\",\n  goerli: \"6004bd860040261633ade992\"\n};\nexport class PocketProvider extends UrlJsonRpcProvider {\n  constructor(network, apiKey) {\n    // We need a bit of creativity in the constructor because\n    // Pocket uses different default API keys based on the network\n    if (apiKey == null) {\n      const n = getStatic(new.target, \"getNetwork\")(network);\n      if (n) {\n        const applicationId = defaultApplicationIds[n.name];\n        if (applicationId) {\n          apiKey = {\n            applicationId: applicationId,\n            loadBalancer: true\n          };\n        }\n      }\n      // If there was any issue above, we don't know this network\n      if (apiKey == null) {\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n      }\n    }\n    super(network, apiKey);\n  }\n  static getApiKey(apiKey) {\n    // Most API Providers allow null to get the default configuration, but\n    // Pocket requires the network to decide the default provider, so we\n    // rely on hijacking the constructor to add a sensible default for us\n    if (apiKey == null) {\n      logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n    }\n    const apiKeyObj = {\n      applicationId: null,\n      loadBalancer: false,\n      applicationSecretKey: null\n    };\n    // Parse applicationId and applicationSecretKey\n    if (typeof apiKey === \"string\") {\n      apiKeyObj.applicationId = apiKey;\n    } else if (apiKey.applicationSecretKey != null) {\n      logger.assertArgument(typeof apiKey.applicationId === \"string\", \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n      logger.assertArgument(typeof apiKey.applicationSecretKey === \"string\", \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n      apiKeyObj.applicationId = apiKey.applicationId;\n      apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n      apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n    } else if (apiKey.applicationId) {\n      logger.assertArgument(typeof apiKey.applicationId === \"string\", \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n      apiKeyObj.applicationId = apiKey.applicationId;\n      apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n    } else {\n      logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n    }\n    return apiKeyObj;\n  }\n  static getUrl(network, apiKey) {\n    let host = null;\n    switch (network ? network.name : \"unknown\") {\n      case \"homestead\":\n        host = \"eth-mainnet.gateway.pokt.network\";\n        break;\n      case \"ropsten\":\n        host = \"eth-ropsten.gateway.pokt.network\";\n        break;\n      case \"rinkeby\":\n        host = \"eth-rinkeby.gateway.pokt.network\";\n        break;\n      case \"goerli\":\n        host = \"eth-goerli.gateway.pokt.network\";\n        break;\n      default:\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n    }\n    let url = null;\n    if (apiKey.loadBalancer) {\n      url = `https:/\\/${host}/v1/lb/${apiKey.applicationId}`;\n    } else {\n      url = `https:/\\/${host}/v1/${apiKey.applicationId}`;\n    }\n    const connection = {\n      url\n    };\n    // Initialize empty headers\n    connection.headers = {};\n    // Apply application secret key\n    if (apiKey.applicationSecretKey != null) {\n      connection.user = \"\";\n      connection.password = apiKey.applicationSecretKey;\n    }\n    return connection;\n  }\n  isCommunityResource() {\n    return this.applicationId === defaultApplicationIds[this.network.name];\n  }\n}","map":{"version":3,"names":["getStatic","Logger","version","logger","UrlJsonRpcProvider","defaultApplicationIds","homestead","ropsten","rinkeby","goerli","PocketProvider","constructor","network","apiKey","n","new","target","applicationId","name","loadBalancer","throwError","errors","INVALID_ARGUMENT","argument","value","getApiKey","throwArgumentError","apiKeyObj","applicationSecretKey","assertArgument","getUrl","host","url","connection","headers","user","password","isCommunityResource"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\providers\\src.ts\\pocket-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// These are load-balancer-based applicatoin IDs\nconst defaultApplicationIds: Record<string, string> = {\n    homestead: \"6004bcd10040261633ade990\",\n    ropsten: \"6004bd4d0040261633ade991\",\n    rinkeby: \"6004bda20040261633ade994\",\n    goerli: \"6004bd860040261633ade992\",\n};\n\nexport class PocketProvider extends UrlJsonRpcProvider {\n    readonly applicationId: string;\n    readonly applicationSecretKey: string;\n    readonly loadBalancer: boolean;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        // We need a bit of creativity in the constructor because\n        // Pocket uses different default API keys based on the network\n\n        if (apiKey == null) {\n            const n = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (n) {\n                const applicationId = defaultApplicationIds[n.name];\n                if (applicationId) {\n                    apiKey = {\n                        applicationId: applicationId,\n                        loadBalancer: true\n                    };\n                }\n            }\n\n            // If there was any issue above, we don't know this network\n            if (apiKey == null) {\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n            }\n\n        }\n\n        super(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        // Most API Providers allow null to get the default configuration, but\n        // Pocket requires the network to decide the default provider, so we\n        // rely on hijacking the constructor to add a sensible default for us\n\n        if (apiKey == null) {\n            logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n        }\n\n        const apiKeyObj: { applicationId: string, applicationSecretKey: string, loadBalancer: boolean } = {\n            applicationId: null,\n            loadBalancer: false,\n            applicationSecretKey: null\n        };\n\n        // Parse applicationId and applicationSecretKey\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n\n        } else if (apiKey.applicationSecretKey != null) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"),\n                \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else if (apiKey.applicationId) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        let url = null;\n        if (apiKey.loadBalancer) {\n            url = `https:/\\/${ host }/v1/lb/${ apiKey.applicationId }`\n        } else {\n            url = `https:/\\/${ host }/v1/${ apiKey.applicationId }`\n        }\n\n        const connection: ConnectionInfo = { url };\n\n        // Initialize empty headers\n        connection.headers = {}\n\n        // Apply application secret key\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationIds[this.network.name]);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}