{"ast":null,"code":"var _jsxFileName = \"D:\\\\temki\\\\grimace\\\\GrimaceSwap\\\\src\\\\CoinSwapper\\\\CoinSwapper.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { Container, Grid, IconButton, makeStyles, Paper, Typography } from \"@material-ui/core\";\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\nimport { useSnackbar } from \"notistack\";\nimport LoopIcon from \"@material-ui/icons/Loop\";\nimport { getAccount, getFactory, getProvider, getRouter, getSigner, getNetwork, getAmountOut, getBalanceAndSymbol, getWeth, swapTokens, getReserves } from \"../ethereumFunctions\";\nimport CoinField from \"./CoinField\";\nimport CoinDialog from \"./CoinDialog\";\nimport LoadingButton from \"../Components/LoadingButton\";\nimport WrongNetwork from \"../Components/wrongNetwork\";\nimport COINS from \"../constants/coins\";\nimport * as chains from \"../constants/chains\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst styles = theme => ({\n  swapContainer: {},\n  paperContainer: {\n    backgroundColor: 'red',\n    borderRadius: theme.spacing(2),\n    padding: theme.spacing(1),\n    paddingBottom: theme.spacing(3)\n  },\n  switchButton: {\n    zIndex: 1,\n    margin: \"-16px\",\n    padding: theme.spacing(0.5)\n  },\n  fullWidth: {\n    width: \"100%\"\n  },\n  title: {\n    textAlign: \"center\",\n    padding: theme.spacing(0.5),\n    marginBottom: theme.spacing(1)\n  },\n  hr: {\n    width: \"100%\"\n  },\n  balance: {\n    padding: theme.spacing(1),\n    overflow: \"wrap\",\n    textAlign: \"center\"\n  },\n  footer: {\n    marginTop: \"285px\"\n  }\n});\nconst useStyles = makeStyles(styles);\nfunction CoinSwapper(props) {\n  _s();\n  const classes = useStyles();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n\n  // Stores a record of whether their respective dialog window is open\n  const [dialog1Open, setDialog1Open] = React.useState(false);\n  const [dialog2Open, setDialog2Open] = React.useState(false);\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\n\n  // Stores data about their respective coin\n  const [coin1, setCoin1] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined\n  });\n  const [coin2, setCoin2] = React.useState({\n    address: undefined,\n    symbol: undefined,\n    balance: undefined\n  });\n\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\n\n  // Stores the current value of their respective text box\n  const [field1Value, setField1Value] = React.useState(\"\");\n  const [field2Value, setField2Value] = React.useState(\"\");\n\n  // Controls the loading button\n  const [loading, setLoading] = React.useState(false);\n\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\n  const switchFields = () => {\n    setCoin1(coin2);\n    setCoin2(coin1);\n    setField1Value(field2Value);\n    setReserves(reserves.reverse());\n  };\n\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\n  const handleChange = {\n    field1: e => {\n      setField1Value(e.target.value);\n    }\n  };\n\n  // Turns the account's balance into something nice and readable\n  const formatBalance = (balance, symbol) => {\n    if (balance && symbol) return parseFloat(balance).toPrecision(8) + \" \" + symbol;else return \"0.0\";\n  };\n\n  // Turns the coin's reserves into something nice and readable\n  const formatReserve = (reserve, symbol) => {\n    if (reserve && symbol) return reserve + \" \" + symbol;else return \"0.0\";\n  };\n\n  // Determines whether the button should be enabled or not\n  const isButtonEnabled = () => {\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\n    const parsedInput1 = parseFloat(field1Value);\n    const parsedInput2 = parseFloat(field2Value);\n    return coin1.address && coin2.address && !isNaN(parsedInput1) && !isNaN(parsedInput2) && 0 < parsedInput1 && parsedInput1 <= coin1.balance;\n  };\n\n  // Called when the dialog window for coin1 exits\n  const onToken1Selected = address => {\n    // Close the dialog window\n    setDialog1Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin2.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then(data => {\n        setCoin1({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance\n        });\n      });\n    }\n  };\n\n  // Called when the dialog window for coin2 exits\n  const onToken2Selected = address => {\n    // Close the dialog window\n    setDialog2Open(false);\n\n    // If the user inputs the same token, we want to switch the data in the fields\n    if (address === coin1.address) {\n      switchFields();\n    }\n    // We only update the values if the user provides a token\n    else if (address) {\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\n      getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then(data => {\n        setCoin2({\n          address: address,\n          symbol: data.symbol,\n          balance: data.balance\n        });\n      });\n    }\n  };\n\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\n  const swap = () => {\n    console.log(\"Attempting to swap tokens...\");\n    setLoading(true);\n    swapTokens(coin1.address, coin2.address, field1Value, props.network.router, props.network.account, props.network.signer).then(() => {\n      setLoading(false);\n\n      // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\n      setField1Value(\"\");\n      enqueueSnackbar(\"Transaction Successful\", {\n        variant: \"success\"\n      });\n    }).catch(e => {\n      setLoading(false);\n      enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\n        variant: \"error\",\n        autoHideDuration: 10000\n      });\n    });\n  };\n\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\n  // of the two coins change.\n\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\n  // the new reserves will be calculated.\n  useEffect(() => {\n    console.log(\"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address);\n    if (coin1.address && coin2.address) {\n      getReserves(coin1.address, coin2.address, props.network.factory, props.network.signer, props.network.account).then(data => setReserves(data));\n    }\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.router, props.network.signer]);\n\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n  // It attempts to calculate and set the state variable `field2Value`\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\n  // the value in the output box will change.\n  useEffect(() => {\n    if (isNaN(parseFloat(field1Value))) {\n      setField2Value(\"\");\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\n      getAmountOut(coin1.address, coin2.address, field1Value, props.network.router, props.network.signer).then(amount => setField2Value(amount.toFixed(7))).catch(e => {\n        console.log(e);\n        setField2Value(\"NA\");\n      });\n    } else {\n      setField2Value(\"\");\n    }\n  }, [field1Value, coin1.address, coin2.address]);\n\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\n  useEffect(() => {\n    const coinTimeout = setTimeout(() => {\n      console.log('props: ', props);\n      console.log(\"Checking balances...\");\n      if (coin1.address && coin2.address && props.network.account) {\n        getReserves(coin1.address, coin2.address, props.network.factory, props.network.signer, props.network.account).then(data => setReserves(data));\n      }\n      if (coin1.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(props.network.account, coin1.address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then(data => {\n          setCoin1({\n            ...coin1,\n            balance: data.balance\n          });\n        });\n      }\n      if (coin2.address && props.network.account && !wrongNetworkOpen) {\n        getBalanceAndSymbol(props.network.account, coin2.address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then(data => {\n          setCoin2({\n            ...coin2,\n            balance: data.balance\n          });\n        });\n      }\n    }, 10000);\n    return () => clearTimeout(coinTimeout);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CoinDialog, {\n      open: dialog1Open,\n      onClose: onToken1Selected,\n      coins: props.network.coins,\n      props: props.network.signer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CoinDialog, {\n      open: dialog2Open,\n      onClose: onToken2Selected,\n      coins: props.network.coins,\n      signer: props.network.signer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WrongNetwork, {\n      open: wrongNetworkOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"xs\",\n      className: classes.swapContainer,\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.paperContainer,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          className: classes.title,\n          children: \"Swap Coins\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          direction: \"column\",\n          alignItems: \"center\",\n          spacing: 2,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            className: classes.fullWidth,\n            children: /*#__PURE__*/_jsxDEV(CoinField, {\n              activeField: true,\n              value: field1Value,\n              onClick: () => setDialog1Open(true),\n              onChange: handleChange.field1,\n              symbol: coin1.symbol !== undefined ? coin1.symbol : \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: switchFields,\n            className: classes.switchButton,\n            children: /*#__PURE__*/_jsxDEV(SwapVerticalCircleIcon, {\n              fontSize: \"medium\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            className: classes.fullWidth,\n            children: /*#__PURE__*/_jsxDEV(CoinField, {\n              activeField: false,\n              value: field2Value,\n              onClick: () => setDialog2Open(true),\n              symbol: coin2.symbol !== undefined ? coin2.symbol : \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: classes.hr\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 365,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Your Balances\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justifyContent: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                className: classes.balance,\n                children: formatBalance(coin1.balance, coin1.symbol)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                className: classes.balance,\n                children: formatBalance(coin2.balance, coin2.symbol)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 376,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: classes.hr\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Reserves\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justifyContent: \"space-between\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                className: classes.balance,\n                children: formatReserve(reserves[0], coin1.symbol)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 388,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 6,\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body1\",\n                className: classes.balance,\n                children: formatReserve(reserves[1], coin2.symbol)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n            className: classes.hr\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n            loading: loading,\n            valid: isButtonEnabled(),\n            success: false,\n            fail: false,\n            onClick: swap,\n            children: [/*#__PURE__*/_jsxDEV(LoopIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 15\n            }, this), \"Swap\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      className: classes.footer,\n      direction: \"row\",\n      justifyContent: \"center\",\n      alignItems: \"flex-end\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Grimace Swap | Get AUT for use in the bakerloo testnet\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://faucet.bakerloo.autonity.network/\",\n          children: \"here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 316,\n    columnNumber: 5\n  }, this);\n}\n_s(CoinSwapper, \"gkToUUdOpa2NXQGE7HHLomfKjrw=\", false, function () {\n  return [useStyles, useSnackbar];\n});\n_c = CoinSwapper;\nexport default CoinSwapper;\nvar _c;\n$RefreshReg$(_c, \"CoinSwapper\");","map":{"version":3,"names":["React","useEffect","Container","Grid","IconButton","makeStyles","Paper","Typography","SwapVerticalCircleIcon","useSnackbar","LoopIcon","getAccount","getFactory","getProvider","getRouter","getSigner","getNetwork","getAmountOut","getBalanceAndSymbol","getWeth","swapTokens","getReserves","CoinField","CoinDialog","LoadingButton","WrongNetwork","COINS","chains","jsxDEV","_jsxDEV","styles","theme","swapContainer","paperContainer","backgroundColor","borderRadius","spacing","padding","paddingBottom","switchButton","zIndex","margin","fullWidth","width","title","textAlign","marginBottom","hr","balance","overflow","footer","marginTop","useStyles","CoinSwapper","props","_s","classes","enqueueSnackbar","dialog1Open","setDialog1Open","useState","dialog2Open","setDialog2Open","wrongNetworkOpen","setwrongNetworkOpen","coin1","setCoin1","address","undefined","symbol","coin2","setCoin2","reserves","setReserves","field1Value","setField1Value","field2Value","setField2Value","loading","setLoading","switchFields","reverse","handleChange","field1","e","target","value","formatBalance","parseFloat","toPrecision","formatReserve","reserve","isButtonEnabled","parsedInput1","parsedInput2","isNaN","onToken1Selected","network","account","provider","signer","weth","coins","then","data","onToken2Selected","swap","console","log","router","variant","catch","message","autoHideDuration","factory","amount","toFixed","coinTimeout","setTimeout","clearTimeout","children","open","onClose","fileName","_jsxFileName","lineNumber","columnNumber","maxWidth","className","container","direction","alignItems","item","xs","activeField","onClick","onChange","fontSize","justifyContent","valid","success","fail","href","_c","$RefreshReg$"],"sources":["D:/temki/grimace/GrimaceSwap/src/CoinSwapper/CoinSwapper.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport LoopIcon from \"@material-ui/icons/Loop\";\r\nimport {\r\n  getAccount,\r\n  getFactory,\r\n  getProvider,\r\n  getRouter,\r\n  getSigner,\r\n  getNetwork,\r\n  getAmountOut,\r\n  getBalanceAndSymbol,\r\n  getWeth,\r\n  swapTokens,\r\n  getReserves,\r\n} from \"../ethereumFunctions\";\r\nimport CoinField from \"./CoinField\";\r\nimport CoinDialog from \"./CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport WrongNetwork from \"../Components/wrongNetwork\";\r\nimport COINS from \"../constants/coins\";\r\nimport * as chains from \"../constants/chains\";\r\n\r\nconst styles = (theme) => ({\r\n  swapContainer:{\r\n  },\r\n  paperContainer: {\r\n    backgroundColor: 'red',\r\n    borderRadius: theme.spacing(2),\r\n    padding: theme.spacing(1),\r\n    paddingBottom: theme.spacing(3),\r\n  },\r\n  switchButton: {\r\n    zIndex: 1,\r\n    margin: \"-16px\",\r\n    padding: theme.spacing(0.5),\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  footer: {\r\n    marginTop: \"285px\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction CoinSwapper(props) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Stores a record of whether their respective dialog window is open\r\n  const [dialog1Open, setDialog1Open] = React.useState(false);\r\n  const [dialog2Open, setDialog2Open] = React.useState(false);\r\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\r\n\r\n  // Stores data about their respective coin\r\n  const [coin1, setCoin1] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n  const [coin2, setCoin2] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n\r\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n  // Stores the current value of their respective text box\r\n  const [field1Value, setField1Value] = React.useState(\"\");\r\n  const [field2Value, setField2Value] = React.useState(\"\");\r\n\r\n  // Controls the loading button\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\r\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\r\n  const switchFields = () => {\r\n    setCoin1(coin2);\r\n    setCoin2(coin1);\r\n    setField1Value(field2Value);\r\n    setReserves(reserves.reverse());\r\n  };\r\n\r\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n  const handleChange = {\r\n    field1: (e) => {\r\n      setField1Value(e.target.value);\r\n    },\r\n  };\r\n\r\n  // Turns the account's balance into something nice and readable\r\n  const formatBalance = (balance, symbol) => {\r\n    if (balance && symbol)\r\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Turns the coin's reserves into something nice and readable\r\n  const formatReserve = (reserve, symbol) => {\r\n    if (reserve && symbol) return reserve + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Determines whether the button should be enabled or not\r\n  const isButtonEnabled = () => {\r\n\r\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\r\n    const parsedInput1 = parseFloat(field1Value);\r\n    const parsedInput2 = parseFloat(field2Value);\r\n    return (\r\n      coin1.address &&\r\n      coin2.address &&\r\n      !isNaN(parsedInput1) &&\r\n      !isNaN(parsedInput2) &&\r\n      0 < parsedInput1 &&\r\n      parsedInput1 <= coin1.balance\r\n    );\r\n  };\r\n\r\n  // Called when the dialog window for coin1 exits\r\n  const onToken1Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog1Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin2.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then((data) => {\r\n        setCoin1({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Called when the dialog window for coin2 exits\r\n  const onToken2Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog2Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin1.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then((data) => {\r\n        setCoin2({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\r\n  const swap = () => {\r\n    console.log(\"Attempting to swap tokens...\");\r\n    setLoading(true);\r\n\r\n    swapTokens(\r\n      coin1.address,\r\n      coin2.address,\r\n      field1Value,\r\n      props.network.router,\r\n      props.network.account,\r\n      props.network.signer\r\n    )\r\n      .then(() => {\r\n        setLoading(false);\r\n\r\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n        setField1Value(\"\");\r\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\r\n          variant: \"error\",\r\n          autoHideDuration: 10000,\r\n        });\r\n      });\r\n  };\r\n\r\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\r\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\r\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\r\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\r\n  // of the two coins change.\r\n\r\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n  // the new reserves will be calculated.\r\n  useEffect(() => {\r\n    console.log(\r\n      \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\r\n    );\r\n\r\n    if (coin1.address && coin2.address) {\r\n      getReserves(coin1.address, coin2.address, props.network.factory, props.network.signer, props.network.account).then(\r\n        (data) => setReserves(data)\r\n      );\r\n    }\r\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.router, props.network.signer]);\r\n\r\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\r\n  // It attempts to calculate and set the state variable `field2Value`\r\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\r\n  // the value in the output box will change.\r\n  useEffect(() => {\r\n    if (isNaN(parseFloat(field1Value))) {\r\n      setField2Value(\"\");\r\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\r\n      getAmountOut(coin1.address, coin2.address, field1Value, props.network.router, props.network.signer).then(\r\n        (amount) => setField2Value(amount.toFixed(7))\r\n      ).catch(e => {\r\n        console.log(e);\r\n        setField2Value(\"NA\");\r\n      })\r\n    } else {\r\n      setField2Value(\"\");\r\n    }\r\n  }, [field1Value, coin1.address, coin2.address]);\r\n\r\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\r\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n  useEffect(() => {\r\n    const coinTimeout = setTimeout(() => {\r\n      console.log('props: ', props);\r\n      console.log(\"Checking balances...\");\r\n\r\n      if (coin1.address && coin2.address && props.network.account) {\r\n        getReserves(\r\n          coin1.address,\r\n          coin2.address,\r\n          props.network.factory,\r\n          props.network.signer,\r\n          props.network.account\r\n        ).then((data) => setReserves(data));\r\n      }\r\n\r\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(\r\n          props.network.account,\r\n          coin1.address,\r\n          props.network.provider,\r\n          props.network.signer,\r\n          props.network.weth.address,\r\n          props.network.coins\r\n          ).then(\r\n          (data) => {\r\n            setCoin1({\r\n              ...coin1,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(\r\n          props.network.account,\r\n          coin2.address,\r\n          props.network.provider,\r\n          props.network.signer,\r\n          props.network.weth.address,\r\n          props.network.coins\r\n          ).then(\r\n          (data) => {\r\n            setCoin2({\r\n              ...coin2,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n    }, 10000);\r\n\r\n    return () => clearTimeout(coinTimeout);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {/* Dialog Windows */}\r\n      <CoinDialog\r\n        open={dialog1Open}\r\n        onClose={onToken1Selected}\r\n        coins={props.network.coins}\r\n        props={props.network.signer}\r\n      />\r\n      <CoinDialog\r\n        open={dialog2Open}\r\n        onClose={onToken2Selected}\r\n        coins={props.network.coins}\r\n        signer={props.network.signer}\r\n      />\r\n      <WrongNetwork\r\n        open={wrongNetworkOpen}\r\n        />\r\n\r\n      {/* Coin Swapper */}\r\n      <Container maxWidth=\"xs\" className={classes.swapContainer}>\r\n        <Paper className={classes.paperContainer}>\r\n          <Typography variant=\"h5\" className={classes.title}>\r\n            Swap Coins\r\n          </Typography>\r\n\r\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n            <Grid item xs={12} className={classes.fullWidth}>\r\n              <CoinField\r\n                activeField={true}\r\n                value={field1Value}\r\n                onClick={() => setDialog1Open(true)}\r\n                onChange={handleChange.field1}\r\n                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\r\n              />\r\n            </Grid>\r\n\r\n            <IconButton onClick={switchFields} className={classes.switchButton}>\r\n              <SwapVerticalCircleIcon fontSize=\"medium\" />\r\n            </IconButton>\r\n\r\n            <Grid item xs={12} className={classes.fullWidth}>\r\n              <CoinField\r\n                activeField={false}\r\n                value={field2Value}\r\n                onClick={() => setDialog2Open(true)}\r\n                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\r\n              />\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Balance Display */}\r\n            <Typography variant=\"h6\">Your Balances</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(coin1.balance, coin1.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(coin2.balance, coin2.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Reserves Display */}\r\n            <Typography variant=\"h6\">Reserves</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatReserve(reserves[0], coin1.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatReserve(reserves[1], coin2.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            <LoadingButton\r\n              loading={loading}\r\n              valid={isButtonEnabled()}\r\n              success={false}\r\n              fail={false}\r\n              onClick={swap}\r\n            >\r\n              <LoopIcon />\r\n              Swap\r\n            </LoadingButton>\r\n          </Grid>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Grid\r\n        container\r\n        className={classes.footer}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <p>\r\n        Grimace Swap | Get AUT for use in the bakerloo testnet{\" \"}\r\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\r\n        </p>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CoinSwapper;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}