{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, hexConcat, hexDataLength, hexDataSlice, hexlify, hexZeroPad, isBytesLike, splitSignature, stripZeros } from \"@ethersproject/bytes\";\nimport { Zero } from \"@ethersproject/constants\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { checkProperties } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey } from \"@ethersproject/signing-key\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport var TransactionTypes;\n(function (TransactionTypes) {\n  TransactionTypes[TransactionTypes[\"legacy\"] = 0] = \"legacy\";\n  TransactionTypes[TransactionTypes[\"eip2930\"] = 1] = \"eip2930\";\n  TransactionTypes[TransactionTypes[\"eip1559\"] = 2] = \"eip1559\";\n})(TransactionTypes || (TransactionTypes = {}));\n;\n///////////////////////////////\nfunction handleAddress(value) {\n  if (value === \"0x\") {\n    return null;\n  }\n  return getAddress(value);\n}\nfunction handleNumber(value) {\n  if (value === \"0x\") {\n    return Zero;\n  }\n  return BigNumber.from(value);\n}\n// Legacy Transaction Fields\nconst transactionFields = [{\n  name: \"nonce\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"gasPrice\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"gasLimit\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"to\",\n  length: 20\n}, {\n  name: \"value\",\n  maxLength: 32,\n  numeric: true\n}, {\n  name: \"data\"\n}];\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  type: true,\n  value: true\n};\nexport function computeAddress(key) {\n  const publicKey = computePublicKey(key);\n  return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));\n}\nexport function recoverAddress(digest, signature) {\n  return computeAddress(recoverPublicKey(arrayify(digest), signature));\n}\nfunction formatNumber(value, name) {\n  const result = stripZeros(BigNumber.from(value).toHexString());\n  if (result.length > 32) {\n    logger.throwArgumentError(\"invalid length for \" + name, \"transaction:\" + name, value);\n  }\n  return result;\n}\nfunction accessSetify(addr, storageKeys) {\n  return {\n    address: getAddress(addr),\n    storageKeys: (storageKeys || []).map((storageKey, index) => {\n      if (hexDataLength(storageKey) !== 32) {\n        logger.throwArgumentError(\"invalid access list storageKey\", `accessList[${addr}:${index}]`, storageKey);\n      }\n      return storageKey.toLowerCase();\n    })\n  };\n}\nexport function accessListify(value) {\n  if (Array.isArray(value)) {\n    return value.map((set, index) => {\n      if (Array.isArray(set)) {\n        if (set.length > 2) {\n          logger.throwArgumentError(\"access list expected to be [ address, storageKeys[] ]\", `value[${index}]`, set);\n        }\n        return accessSetify(set[0], set[1]);\n      }\n      return accessSetify(set.address, set.storageKeys);\n    });\n  }\n  const result = Object.keys(value).map(addr => {\n    const storageKeys = value[addr].reduce((accum, storageKey) => {\n      accum[storageKey] = true;\n      return accum;\n    }, {});\n    return accessSetify(addr, Object.keys(storageKeys).sort());\n  });\n  result.sort((a, b) => a.address.localeCompare(b.address));\n  return result;\n}\nfunction formatAccessList(value) {\n  return accessListify(value).map(set => [set.address, set.storageKeys]);\n}\nfunction _serializeEip1559(transaction, signature) {\n  // If there is an explicit gasPrice, make sure it matches the\n  // EIP-1559 fees; otherwise they may not understand what they\n  // think they are setting in terms of fee.\n  if (transaction.gasPrice != null) {\n    const gasPrice = BigNumber.from(transaction.gasPrice);\n    const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);\n    if (!gasPrice.eq(maxFeePerGas)) {\n      logger.throwArgumentError(\"mismatch EIP-1559 gasPrice != maxFeePerGas\", \"tx\", {\n        gasPrice,\n        maxFeePerGas\n      });\n    }\n  }\n  const fields = [formatNumber(transaction.chainId || 0, \"chainId\"), formatNumber(transaction.nonce || 0, \"nonce\"), formatNumber(transaction.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"), formatNumber(transaction.maxFeePerGas || 0, \"maxFeePerGas\"), formatNumber(transaction.gasLimit || 0, \"gasLimit\"), transaction.to != null ? getAddress(transaction.to) : \"0x\", formatNumber(transaction.value || 0, \"value\"), transaction.data || \"0x\", formatAccessList(transaction.accessList || [])];\n  if (signature) {\n    const sig = splitSignature(signature);\n    fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n    fields.push(stripZeros(sig.r));\n    fields.push(stripZeros(sig.s));\n  }\n  return hexConcat([\"0x02\", RLP.encode(fields)]);\n}\nfunction _serializeEip2930(transaction, signature) {\n  const fields = [formatNumber(transaction.chainId || 0, \"chainId\"), formatNumber(transaction.nonce || 0, \"nonce\"), formatNumber(transaction.gasPrice || 0, \"gasPrice\"), formatNumber(transaction.gasLimit || 0, \"gasLimit\"), transaction.to != null ? getAddress(transaction.to) : \"0x\", formatNumber(transaction.value || 0, \"value\"), transaction.data || \"0x\", formatAccessList(transaction.accessList || [])];\n  if (signature) {\n    const sig = splitSignature(signature);\n    fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n    fields.push(stripZeros(sig.r));\n    fields.push(stripZeros(sig.s));\n  }\n  return hexConcat([\"0x01\", RLP.encode(fields)]);\n}\n// Legacy Transactions and EIP-155\nfunction _serialize(transaction, signature) {\n  checkProperties(transaction, allowedTransactionKeys);\n  const raw = [];\n  transactionFields.forEach(function (fieldInfo) {\n    let value = transaction[fieldInfo.name] || [];\n    const options = {};\n    if (fieldInfo.numeric) {\n      options.hexPad = \"left\";\n    }\n    value = arrayify(hexlify(value, options));\n    // Fixed-width field\n    if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n      logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n    }\n    // Variable-width (with a maximum)\n    if (fieldInfo.maxLength) {\n      value = stripZeros(value);\n      if (value.length > fieldInfo.maxLength) {\n        logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, \"transaction:\" + fieldInfo.name, value);\n      }\n    }\n    raw.push(hexlify(value));\n  });\n  let chainId = 0;\n  if (transaction.chainId != null) {\n    // A chainId was provided; if non-zero we'll use EIP-155\n    chainId = transaction.chainId;\n    if (typeof chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n    }\n  } else if (signature && !isBytesLike(signature) && signature.v > 28) {\n    // No chainId provided, but the signature is signing with EIP-155; derive chainId\n    chainId = Math.floor((signature.v - 35) / 2);\n  }\n  // We have an EIP-155 transaction (chainId was specified and non-zero)\n  if (chainId !== 0) {\n    raw.push(hexlify(chainId)); // @TODO: hexValue?\n    raw.push(\"0x\");\n    raw.push(\"0x\");\n  }\n  // Requesting an unsigned transation\n  if (!signature) {\n    return RLP.encode(raw);\n  }\n  // The splitSignature will ensure the transaction has a recoveryParam in the\n  // case that the signTransaction function only adds a v.\n  const sig = splitSignature(signature);\n  // We pushed a chainId and null r, s on for hashing only; remove those\n  let v = 27 + sig.recoveryParam;\n  if (chainId !== 0) {\n    raw.pop();\n    raw.pop();\n    raw.pop();\n    v += chainId * 2 + 8;\n    // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n    if (sig.v > 28 && sig.v !== v) {\n      logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n    }\n  } else if (sig.v !== v) {\n    logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n  }\n  raw.push(hexlify(v));\n  raw.push(stripZeros(arrayify(sig.r)));\n  raw.push(stripZeros(arrayify(sig.s)));\n  return RLP.encode(raw);\n}\nexport function serialize(transaction, signature) {\n  // Legacy and EIP-155 Transactions\n  if (transaction.type == null || transaction.type === 0) {\n    if (transaction.accessList != null) {\n      logger.throwArgumentError(\"untyped transactions do not support accessList; include type: 1\", \"transaction\", transaction);\n    }\n    return _serialize(transaction, signature);\n  }\n  // Typed Transactions (EIP-2718)\n  switch (transaction.type) {\n    case 1:\n      return _serializeEip2930(transaction, signature);\n    case 2:\n      return _serializeEip1559(transaction, signature);\n    default:\n      break;\n  }\n  return logger.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {\n    operation: \"serializeTransaction\",\n    transactionType: transaction.type\n  });\n}\nfunction _parseEipSignature(tx, fields, serialize) {\n  try {\n    const recid = handleNumber(fields[0]).toNumber();\n    if (recid !== 0 && recid !== 1) {\n      throw new Error(\"bad recid\");\n    }\n    tx.v = recid;\n  } catch (error) {\n    logger.throwArgumentError(\"invalid v for transaction type: 1\", \"v\", fields[0]);\n  }\n  tx.r = hexZeroPad(fields[1], 32);\n  tx.s = hexZeroPad(fields[2], 32);\n  try {\n    const digest = keccak256(serialize(tx));\n    tx.from = recoverAddress(digest, {\n      r: tx.r,\n      s: tx.s,\n      recoveryParam: tx.v\n    });\n  } catch (error) {\n    console.log(error);\n  }\n}\nfunction _parseEip1559(payload) {\n  const transaction = RLP.decode(payload.slice(1));\n  if (transaction.length !== 9 && transaction.length !== 12) {\n    logger.throwArgumentError(\"invalid component count for transaction type: 2\", \"payload\", hexlify(payload));\n  }\n  const maxPriorityFeePerGas = handleNumber(transaction[2]);\n  const maxFeePerGas = handleNumber(transaction[3]);\n  const tx = {\n    type: 2,\n    chainId: handleNumber(transaction[0]).toNumber(),\n    nonce: handleNumber(transaction[1]).toNumber(),\n    maxPriorityFeePerGas: maxPriorityFeePerGas,\n    maxFeePerGas: maxFeePerGas,\n    gasPrice: null,\n    gasLimit: handleNumber(transaction[4]),\n    to: handleAddress(transaction[5]),\n    value: handleNumber(transaction[6]),\n    data: transaction[7],\n    accessList: accessListify(transaction[8])\n  };\n  // Unsigned EIP-1559 Transaction\n  if (transaction.length === 9) {\n    return tx;\n  }\n  tx.hash = keccak256(payload);\n  _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);\n  return tx;\n}\nfunction _parseEip2930(payload) {\n  const transaction = RLP.decode(payload.slice(1));\n  if (transaction.length !== 8 && transaction.length !== 11) {\n    logger.throwArgumentError(\"invalid component count for transaction type: 1\", \"payload\", hexlify(payload));\n  }\n  const tx = {\n    type: 1,\n    chainId: handleNumber(transaction[0]).toNumber(),\n    nonce: handleNumber(transaction[1]).toNumber(),\n    gasPrice: handleNumber(transaction[2]),\n    gasLimit: handleNumber(transaction[3]),\n    to: handleAddress(transaction[4]),\n    value: handleNumber(transaction[5]),\n    data: transaction[6],\n    accessList: accessListify(transaction[7])\n  };\n  // Unsigned EIP-2930 Transaction\n  if (transaction.length === 8) {\n    return tx;\n  }\n  tx.hash = keccak256(payload);\n  _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);\n  return tx;\n}\n// Legacy Transactions and EIP-155\nfunction _parse(rawTransaction) {\n  const transaction = RLP.decode(rawTransaction);\n  if (transaction.length !== 9 && transaction.length !== 6) {\n    logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n  }\n  const tx = {\n    nonce: handleNumber(transaction[0]).toNumber(),\n    gasPrice: handleNumber(transaction[1]),\n    gasLimit: handleNumber(transaction[2]),\n    to: handleAddress(transaction[3]),\n    value: handleNumber(transaction[4]),\n    data: transaction[5],\n    chainId: 0\n  };\n  // Legacy unsigned transaction\n  if (transaction.length === 6) {\n    return tx;\n  }\n  try {\n    tx.v = BigNumber.from(transaction[6]).toNumber();\n  } catch (error) {\n    console.log(error);\n    return tx;\n  }\n  tx.r = hexZeroPad(transaction[7], 32);\n  tx.s = hexZeroPad(transaction[8], 32);\n  if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {\n    // EIP-155 unsigned transaction\n    tx.chainId = tx.v;\n    tx.v = 0;\n  } else {\n    // Signed Tranasaction\n    tx.chainId = Math.floor((tx.v - 35) / 2);\n    if (tx.chainId < 0) {\n      tx.chainId = 0;\n    }\n    let recoveryParam = tx.v - 27;\n    const raw = transaction.slice(0, 6);\n    if (tx.chainId !== 0) {\n      raw.push(hexlify(tx.chainId));\n      raw.push(\"0x\");\n      raw.push(\"0x\");\n      recoveryParam -= tx.chainId * 2 + 8;\n    }\n    const digest = keccak256(RLP.encode(raw));\n    try {\n      tx.from = recoverAddress(digest, {\n        r: hexlify(tx.r),\n        s: hexlify(tx.s),\n        recoveryParam: recoveryParam\n      });\n    } catch (error) {\n      console.log(error);\n    }\n    tx.hash = keccak256(rawTransaction);\n  }\n  tx.type = null;\n  return tx;\n}\nexport function parse(rawTransaction) {\n  const payload = arrayify(rawTransaction);\n  // Legacy and EIP-155 Transactions\n  if (payload[0] > 0x7f) {\n    return _parse(payload);\n  }\n  // Typed Transaction (EIP-2718)\n  switch (payload[0]) {\n    case 1:\n      return _parseEip2930(payload);\n    case 2:\n      return _parseEip1559(payload);\n    default:\n      break;\n  }\n  return logger.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {\n    operation: \"parseTransaction\",\n    transactionType: payload[0]\n  });\n}","map":{"version":3,"names":["getAddress","BigNumber","arrayify","hexConcat","hexDataLength","hexDataSlice","hexlify","hexZeroPad","isBytesLike","splitSignature","stripZeros","Zero","keccak256","checkProperties","RLP","computePublicKey","recoverPublicKey","Logger","version","logger","TransactionTypes","handleAddress","value","handleNumber","from","transactionFields","name","maxLength","numeric","length","allowedTransactionKeys","chainId","data","gasLimit","gasPrice","nonce","to","type","computeAddress","key","publicKey","recoverAddress","digest","signature","formatNumber","result","toHexString","throwArgumentError","accessSetify","addr","storageKeys","address","map","storageKey","index","toLowerCase","accessListify","Array","isArray","set","Object","keys","reduce","accum","sort","a","b","localeCompare","formatAccessList","_serializeEip1559","transaction","maxFeePerGas","eq","fields","maxPriorityFeePerGas","accessList","sig","push","recoveryParam","r","s","encode","_serializeEip2930","_serialize","raw","forEach","fieldInfo","options","hexPad","v","Math","floor","pop","serialize","throwError","errors","UNSUPPORTED_OPERATION","operation","transactionType","_parseEipSignature","tx","recid","toNumber","Error","error","console","log","_parseEip1559","payload","decode","slice","hash","_parseEip2930","_parse","rawTransaction","isZero","parse"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\ethers\\node_modules\\@ethersproject\\transactions\\src.ts\\index.ts"],"sourcesContent":["\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, BytesLike, DataOptions, hexConcat, hexDataLength, hexDataSlice, hexlify, hexZeroPad, isBytesLike, SignatureLike, splitSignature, stripZeros, } from \"@ethersproject/bytes\";\nimport { Zero } from \"@ethersproject/constants\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { checkProperties } from \"@ethersproject/properties\";\nimport * as RLP from \"@ethersproject/rlp\";\nimport { computePublicKey, recoverPublicKey } from \"@ethersproject/signing-key\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n///////////////////////////////\n// Exported Types\n\nexport type AccessList = Array<{ address: string, storageKeys: Array<string> }>;\n\n// Input allows flexibility in describing an access list\nexport type AccessListish = AccessList |\n                            Array<[ string, Array<string> ]> |\n                            Record<string, Array<string>>;\n\nexport enum TransactionTypes {\n    legacy = 0,\n    eip2930 = 1,\n    eip1559 = 2,\n};\n\nexport type UnsignedTransaction = {\n    to?: string;\n    nonce?: number;\n\n    gasLimit?: BigNumberish;\n    gasPrice?: BigNumberish;\n\n    data?: BytesLike;\n    value?: BigNumberish;\n    chainId?: number;\n\n    // Typed-Transaction features\n    type?: number | null;\n\n    // EIP-2930; Type 1 & EIP-1559; Type 2\n    accessList?: AccessListish;\n\n    // EIP-1559; Type 2\n    maxPriorityFeePerGas?: BigNumberish;\n    maxFeePerGas?: BigNumberish;\n}\n\nexport interface Transaction {\n    hash?: string;\n\n    to?: string;\n    from?: string;\n    nonce: number;\n\n    gasLimit: BigNumber;\n    gasPrice?: BigNumber;\n\n    data: string;\n    value: BigNumber;\n    chainId: number;\n\n    r?: string;\n    s?: string;\n    v?: number;\n\n    // Typed-Transaction features\n    type?: number | null;\n\n    // EIP-2930; Type 1 & EIP-1559; Type 2\n    accessList?: AccessList;\n\n    // EIP-1559; Type 2\n    maxPriorityFeePerGas?: BigNumber;\n    maxFeePerGas?: BigNumber;\n}\n\n///////////////////////////////\n\nfunction handleAddress(value: string): string {\n    if (value === \"0x\") { return null; }\n    return getAddress(value);\n}\n\nfunction handleNumber(value: string): BigNumber {\n    if (value === \"0x\") { return Zero; }\n    return BigNumber.from(value);\n}\n\n// Legacy Transaction Fields\nconst transactionFields = [\n    { name: \"nonce\",    maxLength: 32, numeric: true },\n    { name: \"gasPrice\", maxLength: 32, numeric: true },\n    { name: \"gasLimit\", maxLength: 32, numeric: true },\n    { name: \"to\",          length: 20 },\n    { name: \"value\",    maxLength: 32, numeric: true },\n    { name: \"data\" },\n];\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, type: true, value: true\n}\n\nexport function computeAddress(key: BytesLike | string): string {\n    const publicKey = computePublicKey(key);\n    return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));\n}\n\nexport function recoverAddress(digest: BytesLike, signature: SignatureLike): string {\n    return computeAddress(recoverPublicKey(arrayify(digest), signature));\n}\n\nfunction formatNumber(value: BigNumberish, name: string): Uint8Array {\n    const result = stripZeros(BigNumber.from(value).toHexString());\n    if (result.length > 32) {\n        logger.throwArgumentError(\"invalid length for \" + name, (\"transaction:\" + name), value);\n    }\n    return result;\n}\n\nfunction accessSetify(addr: string, storageKeys: Array<string>): { address: string,storageKeys: Array<string> } {\n    return {\n        address: getAddress(addr),\n        storageKeys: (storageKeys || []).map((storageKey, index) => {\n            if (hexDataLength(storageKey) !== 32) {\n                logger.throwArgumentError(\"invalid access list storageKey\", `accessList[${ addr }:${ index }]`, storageKey)\n            }\n            return storageKey.toLowerCase();\n        })\n    };\n}\n\nexport function accessListify(value: AccessListish): AccessList {\n    if (Array.isArray(value)) {\n        return (<Array<[ string, Array<string>] | { address: string, storageKeys: Array<string>}>>value).map((set, index) => {\n            if (Array.isArray(set)) {\n                if (set.length > 2) {\n                    logger.throwArgumentError(\"access list expected to be [ address, storageKeys[] ]\", `value[${ index }]`, set);\n                }\n                return accessSetify(set[0], set[1])\n            }\n            return accessSetify(set.address, set.storageKeys);\n        });\n    }\n\n    const result: Array<{ address: string, storageKeys: Array<string> }> = Object.keys(value).map((addr) => {\n        const storageKeys: Record<string, true> = value[addr].reduce((accum, storageKey) => {\n            accum[storageKey] = true;\n            return accum;\n        }, <Record<string, true>>{ });\n        return accessSetify(addr, Object.keys(storageKeys).sort())\n    });\n    result.sort((a, b) => (a.address.localeCompare(b.address)));\n    return result;\n}\n\nfunction formatAccessList(value: AccessListish): Array<[ string, Array<string> ]> {\n    return accessListify(value).map((set) => [ set.address, set.storageKeys ]);\n}\n\nfunction _serializeEip1559(transaction: UnsignedTransaction, signature?: SignatureLike): string {\n    // If there is an explicit gasPrice, make sure it matches the\n    // EIP-1559 fees; otherwise they may not understand what they\n    // think they are setting in terms of fee.\n    if (transaction.gasPrice != null) {\n        const gasPrice = BigNumber.from(transaction.gasPrice);\n        const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);\n        if (!gasPrice.eq(maxFeePerGas)) {\n            logger.throwArgumentError(\"mismatch EIP-1559 gasPrice != maxFeePerGas\", \"tx\", {\n                gasPrice, maxFeePerGas\n            });\n        }\n    }\n\n    const fields: any = [\n        formatNumber(transaction.chainId || 0, \"chainId\"),\n        formatNumber(transaction.nonce || 0, \"nonce\"),\n        formatNumber(transaction.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(transaction.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n        ((transaction.to != null) ? getAddress(transaction.to): \"0x\"),\n        formatNumber(transaction.value || 0, \"value\"),\n        (transaction.data || \"0x\"),\n        (formatAccessList(transaction.accessList || []))\n    ];\n\n    if (signature) {\n        const sig = splitSignature(signature);\n        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n        fields.push(stripZeros(sig.r));\n        fields.push(stripZeros(sig.s));\n    }\n\n    return hexConcat([ \"0x02\", RLP.encode(fields)]);\n}\n\nfunction _serializeEip2930(transaction: UnsignedTransaction, signature?: SignatureLike): string {\n    const fields: any = [\n        formatNumber(transaction.chainId || 0, \"chainId\"),\n        formatNumber(transaction.nonce || 0, \"nonce\"),\n        formatNumber(transaction.gasPrice || 0, \"gasPrice\"),\n        formatNumber(transaction.gasLimit || 0, \"gasLimit\"),\n        ((transaction.to != null) ? getAddress(transaction.to): \"0x\"),\n        formatNumber(transaction.value || 0, \"value\"),\n        (transaction.data || \"0x\"),\n        (formatAccessList(transaction.accessList || []))\n    ];\n\n    if (signature) {\n        const sig = splitSignature(signature);\n        fields.push(formatNumber(sig.recoveryParam, \"recoveryParam\"));\n        fields.push(stripZeros(sig.r));\n        fields.push(stripZeros(sig.s));\n    }\n\n    return hexConcat([ \"0x01\", RLP.encode(fields)]);\n}\n\n// Legacy Transactions and EIP-155\nfunction _serialize(transaction: UnsignedTransaction, signature?: SignatureLike): string {\n    checkProperties(transaction, allowedTransactionKeys);\n\n    const raw: Array<string | Uint8Array> = [];\n\n    transactionFields.forEach(function(fieldInfo) {\n        let value = (<any>transaction)[fieldInfo.name] || ([]);\n        const options: DataOptions = { };\n        if (fieldInfo.numeric) { options.hexPad = \"left\"; }\n        value = arrayify(hexlify(value, options));\n\n        // Fixed-width field\n        if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {\n            logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, (\"transaction:\" + fieldInfo.name), value);\n        }\n\n        // Variable-width (with a maximum)\n        if (fieldInfo.maxLength) {\n            value = stripZeros(value);\n            if (value.length > fieldInfo.maxLength) {\n                logger.throwArgumentError(\"invalid length for \" + fieldInfo.name, (\"transaction:\" + fieldInfo.name), value );\n            }\n        }\n\n        raw.push(hexlify(value));\n    });\n\n    let chainId = 0;\n    if (transaction.chainId != null) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = transaction.chainId;\n\n        if (typeof(chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid transaction.chainId\", \"transaction\", transaction);\n        }\n\n    } else if (signature && !isBytesLike(signature) && signature.v > 28) {\n        // No chainId provided, but the signature is signing with EIP-155; derive chainId\n        chainId = Math.floor((signature.v - 35) / 2);\n    }\n\n    // We have an EIP-155 transaction (chainId was specified and non-zero)\n    if (chainId !== 0) {\n        raw.push(hexlify(chainId)); // @TODO: hexValue?\n        raw.push(\"0x\");\n        raw.push(\"0x\");\n    }\n\n    // Requesting an unsigned transation\n    if (!signature) {\n        return RLP.encode(raw);\n    }\n\n    // The splitSignature will ensure the transaction has a recoveryParam in the\n    // case that the signTransaction function only adds a v.\n    const sig = splitSignature(signature);\n\n    // We pushed a chainId and null r, s on for hashing only; remove those\n    let v = 27 + sig.recoveryParam\n    if (chainId !== 0) {\n        raw.pop();\n        raw.pop();\n        raw.pop();\n        v += chainId * 2 + 8;\n\n        // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!\n        if (sig.v > 28 && sig.v !== v) {\n             logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n        }\n    } else if (sig.v !== v) {\n         logger.throwArgumentError(\"transaction.chainId/signature.v mismatch\", \"signature\", signature);\n    }\n\n    raw.push(hexlify(v));\n    raw.push(stripZeros(arrayify(sig.r)));\n    raw.push(stripZeros(arrayify(sig.s)));\n\n    return RLP.encode(raw);\n}\n\nexport function serialize(transaction: UnsignedTransaction, signature?: SignatureLike): string {\n    // Legacy and EIP-155 Transactions\n    if (transaction.type == null || transaction.type === 0) {\n        if (transaction.accessList != null) {\n            logger.throwArgumentError(\"untyped transactions do not support accessList; include type: 1\", \"transaction\", transaction);\n        }\n        return _serialize(transaction, signature);\n    }\n\n    // Typed Transactions (EIP-2718)\n    switch (transaction.type) {\n        case 1:\n            return _serializeEip2930(transaction, signature);\n        case 2:\n            return _serializeEip1559(transaction, signature);\n        default:\n            break;\n    }\n\n    return logger.throwError(`unsupported transaction type: ${ transaction.type }`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"serializeTransaction\",\n        transactionType: transaction.type\n    });\n}\n\nfunction _parseEipSignature(tx: Transaction, fields: Array<string>, serialize: (tx: UnsignedTransaction) => string): void {\n    try {\n        const recid = handleNumber(fields[0]).toNumber();\n        if (recid !== 0 && recid !== 1) { throw new Error(\"bad recid\"); }\n        tx.v = recid;\n    } catch (error) {\n        logger.throwArgumentError(\"invalid v for transaction type: 1\", \"v\", fields[0]);\n    }\n\n    tx.r = hexZeroPad(fields[1], 32);\n    tx.s = hexZeroPad(fields[2], 32);\n\n    try {\n        const digest = keccak256(serialize(tx));\n        tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nfunction _parseEip1559(payload: Uint8Array): Transaction {\n    const transaction = RLP.decode(payload.slice(1));\n\n    if (transaction.length !== 9 && transaction.length !== 12) {\n        logger.throwArgumentError(\"invalid component count for transaction type: 2\", \"payload\", hexlify(payload));\n    }\n\n    const maxPriorityFeePerGas = handleNumber(transaction[2]);\n    const maxFeePerGas = handleNumber(transaction[3]);\n    const tx: Transaction = {\n        type:                  2,\n        chainId:               handleNumber(transaction[0]).toNumber(),\n        nonce:                 handleNumber(transaction[1]).toNumber(),\n        maxPriorityFeePerGas:  maxPriorityFeePerGas,\n        maxFeePerGas:          maxFeePerGas,\n        gasPrice:              null,\n        gasLimit:              handleNumber(transaction[4]),\n        to:                    handleAddress(transaction[5]),\n        value:                 handleNumber(transaction[6]),\n        data:                  transaction[7],\n        accessList:            accessListify(transaction[8]),\n    };\n\n    // Unsigned EIP-1559 Transaction\n    if (transaction.length === 9) { return tx; }\n\n    tx.hash = keccak256(payload);\n\n    _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);\n\n    return tx;\n}\n\nfunction _parseEip2930(payload: Uint8Array): Transaction {\n    const transaction = RLP.decode(payload.slice(1));\n\n    if (transaction.length !== 8 && transaction.length !== 11) {\n        logger.throwArgumentError(\"invalid component count for transaction type: 1\", \"payload\", hexlify(payload));\n    }\n\n    const tx: Transaction = {\n        type:       1,\n        chainId:    handleNumber(transaction[0]).toNumber(),\n        nonce:      handleNumber(transaction[1]).toNumber(),\n        gasPrice:   handleNumber(transaction[2]),\n        gasLimit:   handleNumber(transaction[3]),\n        to:         handleAddress(transaction[4]),\n        value:      handleNumber(transaction[5]),\n        data:       transaction[6],\n        accessList: accessListify(transaction[7])\n    };\n\n    // Unsigned EIP-2930 Transaction\n    if (transaction.length === 8) { return tx; }\n\n    tx.hash = keccak256(payload);\n\n    _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);\n\n    return tx;\n}\n\n// Legacy Transactions and EIP-155\nfunction _parse(rawTransaction: Uint8Array): Transaction {\n    const transaction = RLP.decode(rawTransaction);\n\n    if (transaction.length !== 9 && transaction.length !== 6) {\n        logger.throwArgumentError(\"invalid raw transaction\", \"rawTransaction\", rawTransaction);\n    }\n\n    const tx: Transaction = {\n        nonce:    handleNumber(transaction[0]).toNumber(),\n        gasPrice: handleNumber(transaction[1]),\n        gasLimit: handleNumber(transaction[2]),\n        to:       handleAddress(transaction[3]),\n        value:    handleNumber(transaction[4]),\n        data:     transaction[5],\n        chainId:  0\n    };\n\n    // Legacy unsigned transaction\n    if (transaction.length === 6) { return tx; }\n\n    try {\n        tx.v = BigNumber.from(transaction[6]).toNumber();\n\n    } catch (error) {\n        console.log(error);\n        return tx;\n    }\n\n    tx.r = hexZeroPad(transaction[7], 32);\n    tx.s = hexZeroPad(transaction[8], 32);\n\n    if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {\n        // EIP-155 unsigned transaction\n        tx.chainId = tx.v;\n        tx.v = 0;\n\n    } else {\n        // Signed Tranasaction\n\n        tx.chainId = Math.floor((tx.v - 35) / 2);\n        if (tx.chainId < 0) { tx.chainId = 0; }\n\n        let recoveryParam = tx.v - 27;\n\n        const raw = transaction.slice(0, 6);\n\n        if (tx.chainId !== 0) {\n            raw.push(hexlify(tx.chainId));\n            raw.push(\"0x\");\n            raw.push(\"0x\");\n            recoveryParam -= tx.chainId * 2 + 8;\n        }\n\n        const digest = keccak256(RLP.encode(raw));\n        try {\n            tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam: recoveryParam });\n        } catch (error) {\n            console.log(error);\n        }\n\n        tx.hash = keccak256(rawTransaction);\n    }\n\n    tx.type = null;\n\n    return tx;\n}\n\n\nexport function parse(rawTransaction: BytesLike): Transaction {\n    const payload = arrayify(rawTransaction);\n\n    // Legacy and EIP-155 Transactions\n    if (payload[0] > 0x7f) { return _parse(payload); }\n\n    // Typed Transaction (EIP-2718)\n    switch (payload[0]) {\n        case 1:\n            return _parseEip2930(payload);\n        case 2:\n            return _parseEip1559(payload);\n        default:\n            break;\n    }\n\n    return logger.throwError(`unsupported transaction type: ${ payload[0] }`, Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"parseTransaction\",\n        transactionType: payload[0]\n    });\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}