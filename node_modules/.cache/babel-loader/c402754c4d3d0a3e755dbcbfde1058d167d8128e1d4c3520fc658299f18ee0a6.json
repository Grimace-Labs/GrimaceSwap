{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nexport function isCrowdsaleWallet(json) {\n  var data = null;\n  try {\n    data = JSON.parse(json);\n  } catch (error) {\n    return false;\n  }\n  return data.encseed && data.ethaddr;\n}\nexport function isKeystoreWallet(json) {\n  var data = null;\n  try {\n    data = JSON.parse(json);\n  } catch (error) {\n    return false;\n  }\n  if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n    return false;\n  }\n  // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n  return true;\n}\n//export function isJsonWallet(json: string): boolean {\n//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n//}\nexport function getJsonWalletAddress(json) {\n  if (isCrowdsaleWallet(json)) {\n    try {\n      return getAddress(JSON.parse(json).ethaddr);\n    } catch (error) {\n      return null;\n    }\n  }\n  if (isKeystoreWallet(json)) {\n    try {\n      return getAddress(JSON.parse(json).address);\n    } catch (error) {\n      return null;\n    }\n  }\n  return null;\n}","map":{"version":3,"names":["getAddress","isCrowdsaleWallet","json","data","JSON","parse","error","encseed","ethaddr","isKeystoreWallet","version","parseInt","getJsonWalletAddress","address"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\json-wallets\\src.ts\\inspect.ts"],"sourcesContent":["\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\n\n\nexport function isCrowdsaleWallet(json: string): boolean {\n    let data: any = null;\n    try {\n        data = JSON.parse(json);\n    } catch (error) { return false; }\n\n    return (data.encseed && data.ethaddr);\n}\n\nexport function isKeystoreWallet(json: string): boolean {\n    let data: any = null;\n    try {\n        data = JSON.parse(json);\n    } catch (error) { return false; }\n\n    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n        return false;\n    }\n\n    // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n    return true;\n}\n\n//export function isJsonWallet(json: string): boolean {\n//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n//}\n\nexport function getJsonWalletAddress(json: string): string {\n    if (isCrowdsaleWallet(json)) {\n        try {\n            return getAddress(JSON.parse(json).ethaddr);\n        } catch (error) { return null; }\n    }\n\n    if (isKeystoreWallet(json)) {\n        try {\n            return getAddress(JSON.parse(json).address);\n        } catch (error) { return null; }\n    }\n\n    return null;\n}\n\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,UAAU,QAAQ,wBAAwB;AAGnD,OAAM,SAAUC,iBAAiBA,CAACC,IAAY;EAC1C,IAAIC,IAAI,GAAQ,IAAI;EACpB,IAAI;IACAA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;GAC1B,CAAC,OAAOI,KAAK,EAAE;IAAE,OAAO,KAAK;;EAE9B,OAAQH,IAAI,CAACI,OAAO,IAAIJ,IAAI,CAACK,OAAO;AACxC;AAEA,OAAM,SAAUC,gBAAgBA,CAACP,IAAY;EACzC,IAAIC,IAAI,GAAQ,IAAI;EACpB,IAAI;IACAA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;GAC1B,CAAC,OAAOI,KAAK,EAAE;IAAE,OAAO,KAAK;;EAE9B,IAAI,CAACH,IAAI,CAACO,OAAO,IAAIC,QAAQ,CAACR,IAAI,CAACO,OAAO,CAAC,KAAKP,IAAI,CAACO,OAAO,IAAIC,QAAQ,CAACR,IAAI,CAACO,OAAO,CAAC,KAAK,CAAC,EAAE;IAC1F,OAAO,KAAK;;EAGhB;EACA,OAAO,IAAI;AACf;AAEA;AACA;AACA;AAEA,OAAM,SAAUE,oBAAoBA,CAACV,IAAY;EAC7C,IAAID,iBAAiB,CAACC,IAAI,CAAC,EAAE;IACzB,IAAI;MACA,OAAOF,UAAU,CAACI,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC,CAACM,OAAO,CAAC;KAC9C,CAAC,OAAOF,KAAK,EAAE;MAAE,OAAO,IAAI;;;EAGjC,IAAIG,gBAAgB,CAACP,IAAI,CAAC,EAAE;IACxB,IAAI;MACA,OAAOF,UAAU,CAACI,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC,CAACW,OAAO,CAAC;KAC9C,CAAC,OAAOP,KAAK,EAAE;MAAE,OAAO,IAAI;;;EAGjC,OAAO,IAAI;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}