{"ast":null,"code":"import _objectSpread from\"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect}from\"react\";import{Container,Grid,IconButton,makeStyles,Paper,Typography}from\"@material-ui/core\";import SwapVerticalCircleIcon from\"@material-ui/icons/SwapVerticalCircle\";import{useSnackbar}from\"notistack\";import LoopIcon from\"@material-ui/icons/Loop\";import{getAccount,getFactory,getProvider,getRouter,getSigner,getNetwork,getAmountOut,getBalanceAndSymbol,getWeth,swapTokens,getReserves}from\"../ethereumFunctions\";import CoinField from\"./CoinField\";import CoinDialog from\"./CoinDialog\";import LoadingButton from\"../Components/LoadingButton\";import WrongNetwork from\"../Components/wrongNetwork\";import COINS from\"../constants/coins\";import*as chains from\"../constants/chains\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var styles=function styles(theme){return{allContainer:{display:'flex',flexDirection:'row',flexWrap:'wrap',padding:'0 20px'},paperContainer:{backgroundColor:'#2F2A70',borderRadius:theme.spacing(2),border:'2px solid rgba(113, 83, 217, 1)',padding:theme.spacing(3),paddingBottom:theme.spacing(3),color:'white'},switchButton:{zIndex:1,margin:\"-16px\",padding:theme.spacing(0.5)},fullWidth:{width:\"100%\"},title:{textAlign:\"center\",padding:theme.spacing(0.5),marginBottom:theme.spacing(1)},hr:{width:\"100%\"},balance:{padding:theme.spacing(1),overflow:\"wrap\",textAlign:\"center\"},footer:{marginTop:\"285px\"}};};var useStyles=makeStyles(styles);function CoinSwapper(props){var classes=useStyles();var _useSnackbar=useSnackbar(),enqueueSnackbar=_useSnackbar.enqueueSnackbar;// Stores a record of whether their respective dialog window is open\nvar _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),dialog1Open=_React$useState2[0],setDialog1Open=_React$useState2[1];var _React$useState3=React.useState(false),_React$useState4=_slicedToArray(_React$useState3,2),dialog2Open=_React$useState4[0],setDialog2Open=_React$useState4[1];var _React$useState5=React.useState(false),_React$useState6=_slicedToArray(_React$useState5,2),wrongNetworkOpen=_React$useState6[0],setwrongNetworkOpen=_React$useState6[1];// Stores data about their respective coin\nvar _React$useState7=React.useState({address:undefined,symbol:undefined,balance:undefined}),_React$useState8=_slicedToArray(_React$useState7,2),coin1=_React$useState8[0],setCoin1=_React$useState8[1];var _React$useState9=React.useState({address:undefined,symbol:undefined,balance:undefined}),_React$useState10=_slicedToArray(_React$useState9,2),coin2=_React$useState10[0],setCoin2=_React$useState10[1];// Stores the current reserves in the liquidity pool between coin1 and coin2\nvar _React$useState11=React.useState([\"0.0\",\"0.0\"]),_React$useState12=_slicedToArray(_React$useState11,2),reserves=_React$useState12[0],setReserves=_React$useState12[1];// Stores the current value of their respective text box\nvar _React$useState13=React.useState(\"\"),_React$useState14=_slicedToArray(_React$useState13,2),field1Value=_React$useState14[0],setField1Value=_React$useState14[1];var _React$useState15=React.useState(\"\"),_React$useState16=_slicedToArray(_React$useState15,2),field2Value=_React$useState16[0],setField2Value=_React$useState16[1];// Controls the loading button\nvar _React$useState17=React.useState(false),_React$useState18=_slicedToArray(_React$useState17,2),loading=_React$useState18[0],setLoading=_React$useState18[1];// Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\n// token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\nvar switchFields=function switchFields(){setCoin1(coin2);setCoin2(coin1);setField1Value(field2Value);setReserves(reserves.reverse());};// These functions take an HTML event, pull the data out and puts it into a state variable.\nvar handleChange={field1:function field1(e){setField1Value(e.target.value);}};// Turns the account's balance into something nice and readable\nvar formatBalance=function formatBalance(balance,symbol){if(balance&&symbol)return parseFloat(balance).toPrecision(8)+\" \"+symbol;else return\"0.0\";};// Turns the coin's reserves into something nice and readable\nvar formatReserve=function formatReserve(reserve,symbol){if(reserve&&symbol)return reserve+\" \"+symbol;else return\"0.0\";};// Determines whether the button should be enabled or not\nvar isButtonEnabled=function isButtonEnabled(){// If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\nvar parsedInput1=parseFloat(field1Value);var parsedInput2=parseFloat(field2Value);return coin1.address&&coin2.address&&!isNaN(parsedInput1)&&!isNaN(parsedInput2)&&0<parsedInput1&&parsedInput1<=coin1.balance;};// Called when the dialog window for coin1 exits\nvar onToken1Selected=function onToken1Selected(address){// Close the dialog window\nsetDialog1Open(false);// If the user inputs the same token, we want to switch the data in the fields\nif(address===coin2.address){switchFields();}// We only update the values if the user provides a token\nelse if(address){// Getting some token data is async, so we need to wait for the data to return, hence the promise\ngetBalanceAndSymbol(props.network.account,address,props.network.provider,props.network.signer,props.network.weth.address,props.network.coins).then(function(data){setCoin1({address:address,symbol:data.symbol,balance:data.balance});});}};// Called when the dialog window for coin2 exits\nvar onToken2Selected=function onToken2Selected(address){// Close the dialog window\nsetDialog2Open(false);// If the user inputs the same token, we want to switch the data in the fields\nif(address===coin1.address){switchFields();}// We only update the values if the user provides a token\nelse if(address){// Getting some token data is async, so we need to wait for the data to return, hence the promise\ngetBalanceAndSymbol(props.network.account,address,props.network.provider,props.network.signer,props.network.weth.address,props.network.coins).then(function(data){setCoin2({address:address,symbol:data.symbol,balance:data.balance});});}};// Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\nvar swap=function swap(){console.log(\"Attempting to swap tokens...\");setLoading(true);swapTokens(coin1.address,coin2.address,field1Value,props.network.router,props.network.account,props.network.signer).then(function(){setLoading(false);// If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\nsetField1Value(\"\");enqueueSnackbar(\"Transaction Successful\",{variant:\"success\"});}).catch(function(e){setLoading(false);enqueueSnackbar(\"Transaction Failed (\"+e.message+\")\",{variant:\"error\",autoHideDuration:10000});});};// The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\n// are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\n// the lambda will only ever be called when the component mounts. These are very useful for calculating new values\n// after a particular state change, for example, calculating the new exchange rate whenever the addresses\n// of the two coins change.\n// This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\n// This means that when the user selects a different coin to convert between, or the coins are swapped,\n// the new reserves will be calculated.\nuseEffect(function(){console.log(\"Trying to get Reserves between:\\n\"+coin1.address+\"\\n\"+coin2.address);if(coin1.address&&coin2.address){getReserves(coin1.address,coin2.address,props.network.factory,props.network.signer,props.network.account).then(function(data){return setReserves(data);});}},[coin1.address,coin2.address,props.network.account,props.network.factory,props.network.router,props.network.signer]);// This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\n// It attempts to calculate and set the state variable `field2Value`\n// This means that if the user types a new value into the conversion box or the conversion rate changes,\n// the value in the output box will change.\nuseEffect(function(){if(isNaN(parseFloat(field1Value))){setField2Value(\"\");}else if(parseFloat(field1Value)&&coin1.address&&coin2.address){getAmountOut(coin1.address,coin2.address,field1Value,props.network.router,props.network.signer).then(function(amount){return setField2Value(amount.toFixed(7));}).catch(function(e){console.log(e);setField2Value(\"NA\");});}else{setField2Value(\"\");}},[field1Value,coin1.address,coin2.address]);// This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\n// updated has changed. This allows them to see when a transaction completes by looking at the balance output.\nuseEffect(function(){var coinTimeout=setTimeout(function(){console.log('props: ',props);console.log(\"Checking balances...\");if(coin1.address&&coin2.address&&props.network.account){getReserves(coin1.address,coin2.address,props.network.factory,props.network.signer,props.network.account).then(function(data){return setReserves(data);});}if(coin1.address&&props.network.account&&!wrongNetworkOpen){getBalanceAndSymbol(props.network.account,coin1.address,props.network.provider,props.network.signer,props.network.weth.address,props.network.coins).then(function(data){setCoin1(_objectSpread(_objectSpread({},coin1),{},{balance:data.balance}));});}if(coin2.address&&props.network.account&&!wrongNetworkOpen){getBalanceAndSymbol(props.network.account,coin2.address,props.network.provider,props.network.signer,props.network.weth.address,props.network.coins).then(function(data){setCoin2(_objectSpread(_objectSpread({},coin2),{},{balance:data.balance}));});}},10000);return function(){return clearTimeout(coinTimeout);};});return/*#__PURE__*/_jsxs(\"div\",{className:classes.allContainer,children:[/*#__PURE__*/_jsx(CoinDialog,{open:dialog1Open,onClose:onToken1Selected,coins:props.network.coins,props:props.network.signer}),/*#__PURE__*/_jsx(CoinDialog,{open:dialog2Open,onClose:onToken2Selected,coins:props.network.coins,signer:props.network.signer}),/*#__PURE__*/_jsx(WrongNetwork,{open:wrongNetworkOpen}),/*#__PURE__*/_jsx(\"iframe\",{src:\"https://dexscreener.com/dogechain/0x1aAD352a2190B399Bb3cfD4d5E4B0bf6EFA33C0e?embed=1&theme=dark&trades=0&info=0\",title:\"MyFrame\",width:\"800px\",height:\"600px\"}),/*#__PURE__*/_jsx(Container,{maxWidth:\"xs\",className:classes.swapContainer,children:/*#__PURE__*/_jsxs(Paper,{className:classes.paperContainer,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h5\",className:classes.title,children:\"Swap Coins\"}),/*#__PURE__*/_jsxs(Grid,{container:true,direction:\"column\",alignItems:\"center\",spacing:2,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:12,className:classes.fullWidth,children:/*#__PURE__*/_jsx(CoinField,{activeField:true,value:field1Value,onClick:function onClick(){return setDialog1Open(true);},onChange:handleChange.field1,symbol:coin1.symbol!==undefined?coin1.symbol:\"Select\"})}),/*#__PURE__*/_jsx(IconButton,{onClick:switchFields,className:classes.switchButton,children:/*#__PURE__*/_jsx(SwapVerticalCircleIcon,{fontSize:\"medium\"})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:12,className:classes.fullWidth,children:/*#__PURE__*/_jsx(CoinField,{activeField:false,value:field2Value,onClick:function onClick(){return setDialog2Open(true);},symbol:coin2.symbol!==undefined?coin2.symbol:\"Select\"})}),/*#__PURE__*/_jsx(\"hr\",{className:classes.hr}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"Your Balances\"}),/*#__PURE__*/_jsxs(Grid,{container:true,direction:\"row\",justifyContent:\"space-between\",children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:6,children:/*#__PURE__*/_jsx(Typography,{variant:\"body1\",className:classes.balance,children:formatBalance(coin1.balance,coin1.symbol)})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:6,children:/*#__PURE__*/_jsx(Typography,{variant:\"body1\",className:classes.balance,children:formatBalance(coin2.balance,coin2.symbol)})})]}),/*#__PURE__*/_jsx(\"hr\",{className:classes.hr}),/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"Reserves\"}),/*#__PURE__*/_jsxs(Grid,{container:true,direction:\"row\",justifyContent:\"space-between\",children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:6,children:/*#__PURE__*/_jsx(Typography,{variant:\"body1\",className:classes.balance,children:formatReserve(reserves[0],coin1.symbol)})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:6,children:/*#__PURE__*/_jsx(Typography,{variant:\"body1\",className:classes.balance,children:formatReserve(reserves[1],coin2.symbol)})})]}),/*#__PURE__*/_jsx(\"hr\",{className:classes.hr}),/*#__PURE__*/_jsxs(LoadingButton,{loading:loading,valid:isButtonEnabled(),success:false,fail:false,onClick:swap,children:[/*#__PURE__*/_jsx(LoopIcon,{}),\"Swap\"]})]})]})}),/*#__PURE__*/_jsx(Grid,{container:true,className:classes.footer,direction:\"row\",justifyContent:\"center\",alignItems:\"flex-end\",children:/*#__PURE__*/_jsxs(\"p\",{children:[\"Grimace Swap | Get AUT for use in the bakerloo testnet\",\" \",/*#__PURE__*/_jsx(\"a\",{href:\"https://faucet.bakerloo.autonity.network/\",children:\"here\"})]})})]});}export default CoinSwapper;","map":{"version":3,"names":["React","useEffect","Container","Grid","IconButton","makeStyles","Paper","Typography","SwapVerticalCircleIcon","useSnackbar","LoopIcon","getAccount","getFactory","getProvider","getRouter","getSigner","getNetwork","getAmountOut","getBalanceAndSymbol","getWeth","swapTokens","getReserves","CoinField","CoinDialog","LoadingButton","WrongNetwork","COINS","chains","jsx","_jsx","jsxs","_jsxs","styles","theme","allContainer","display","flexDirection","flexWrap","padding","paperContainer","backgroundColor","borderRadius","spacing","border","paddingBottom","color","switchButton","zIndex","margin","fullWidth","width","title","textAlign","marginBottom","hr","balance","overflow","footer","marginTop","useStyles","CoinSwapper","props","classes","_useSnackbar","enqueueSnackbar","_React$useState","useState","_React$useState2","_slicedToArray","dialog1Open","setDialog1Open","_React$useState3","_React$useState4","dialog2Open","setDialog2Open","_React$useState5","_React$useState6","wrongNetworkOpen","setwrongNetworkOpen","_React$useState7","address","undefined","symbol","_React$useState8","coin1","setCoin1","_React$useState9","_React$useState10","coin2","setCoin2","_React$useState11","_React$useState12","reserves","setReserves","_React$useState13","_React$useState14","field1Value","setField1Value","_React$useState15","_React$useState16","field2Value","setField2Value","_React$useState17","_React$useState18","loading","setLoading","switchFields","reverse","handleChange","field1","e","target","value","formatBalance","parseFloat","toPrecision","formatReserve","reserve","isButtonEnabled","parsedInput1","parsedInput2","isNaN","onToken1Selected","network","account","provider","signer","weth","coins","then","data","onToken2Selected","swap","console","log","router","variant","catch","message","autoHideDuration","factory","amount","toFixed","coinTimeout","setTimeout","_objectSpread","clearTimeout","className","children","open","onClose","src","height","maxWidth","swapContainer","container","direction","alignItems","item","xs","activeField","onClick","onChange","fontSize","justifyContent","valid","success","fail","href"],"sources":["D:/temki/grimace/GrimaceSwap/src/CoinSwapper/CoinSwapper.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  IconButton,\r\n  makeStyles,\r\n  Paper,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport SwapVerticalCircleIcon from \"@material-ui/icons/SwapVerticalCircle\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport LoopIcon from \"@material-ui/icons/Loop\";\r\nimport {\r\n  getAccount,\r\n  getFactory,\r\n  getProvider,\r\n  getRouter,\r\n  getSigner,\r\n  getNetwork,\r\n  getAmountOut,\r\n  getBalanceAndSymbol,\r\n  getWeth,\r\n  swapTokens,\r\n  getReserves,\r\n} from \"../ethereumFunctions\";\r\nimport CoinField from \"./CoinField\";\r\nimport CoinDialog from \"./CoinDialog\";\r\nimport LoadingButton from \"../Components/LoadingButton\";\r\nimport WrongNetwork from \"../Components/wrongNetwork\";\r\nimport COINS from \"../constants/coins\";\r\nimport * as chains from \"../constants/chains\";\r\n\r\nconst styles = (theme) => ({\r\n  allContainer: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    padding: '0 20px'\r\n  },\r\n  paperContainer: {\r\n    backgroundColor: '#2F2A70',\r\n    borderRadius: theme.spacing(2),\r\n    border: '2px solid rgba(113, 83, 217, 1)',\r\n    padding: theme.spacing(3),\r\n    paddingBottom: theme.spacing(3),\r\n    color: 'white'\r\n  },\r\n  switchButton: {\r\n    zIndex: 1,\r\n    margin: \"-16px\",\r\n    padding: theme.spacing(0.5),\r\n  },\r\n  fullWidth: {\r\n    width: \"100%\",\r\n  },\r\n  title: {\r\n    textAlign: \"center\",\r\n    padding: theme.spacing(0.5),\r\n    marginBottom: theme.spacing(1),\r\n\r\n  },\r\n  hr: {\r\n    width: \"100%\",\r\n  },\r\n  balance: {\r\n    padding: theme.spacing(1),\r\n    overflow: \"wrap\",\r\n    textAlign: \"center\",\r\n  },\r\n  footer: {\r\n    marginTop: \"285px\",\r\n  },\r\n});\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction CoinSwapper(props) {\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  // Stores a record of whether their respective dialog window is open\r\n  const [dialog1Open, setDialog1Open] = React.useState(false);\r\n  const [dialog2Open, setDialog2Open] = React.useState(false);\r\n  const [wrongNetworkOpen, setwrongNetworkOpen] = React.useState(false);\r\n\r\n  // Stores data about their respective coin\r\n  const [coin1, setCoin1] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n  const [coin2, setCoin2] = React.useState({\r\n    address: undefined,\r\n    symbol: undefined,\r\n    balance: undefined,\r\n  });\r\n\r\n  // Stores the current reserves in the liquidity pool between coin1 and coin2\r\n  const [reserves, setReserves] = React.useState([\"0.0\", \"0.0\"]);\r\n\r\n  // Stores the current value of their respective text box\r\n  const [field1Value, setField1Value] = React.useState(\"\");\r\n  const [field2Value, setField2Value] = React.useState(\"\");\r\n\r\n  // Controls the loading button\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  // Switches the top and bottom coins, this is called when users hit the swap button or select the opposite\r\n  // token in the dialog (e.g. if coin1 is TokenA and the user selects TokenB when choosing coin2)\r\n  const switchFields = () => {\r\n    setCoin1(coin2);\r\n    setCoin2(coin1);\r\n    setField1Value(field2Value);\r\n    setReserves(reserves.reverse());\r\n  };\r\n\r\n  // These functions take an HTML event, pull the data out and puts it into a state variable.\r\n  const handleChange = {\r\n    field1: (e) => {\r\n      setField1Value(e.target.value);\r\n    },\r\n  };\r\n\r\n  // Turns the account's balance into something nice and readable\r\n  const formatBalance = (balance, symbol) => {\r\n    if (balance && symbol)\r\n      return parseFloat(balance).toPrecision(8) + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Turns the coin's reserves into something nice and readable\r\n  const formatReserve = (reserve, symbol) => {\r\n    if (reserve && symbol) return reserve + \" \" + symbol;\r\n    else return \"0.0\";\r\n  };\r\n\r\n  // Determines whether the button should be enabled or not\r\n  const isButtonEnabled = () => {\r\n\r\n    // If both coins have been selected, and a valid float has been entered which is less than the user's balance, then return true\r\n    const parsedInput1 = parseFloat(field1Value);\r\n    const parsedInput2 = parseFloat(field2Value);\r\n    return (\r\n      coin1.address &&\r\n      coin2.address &&\r\n      !isNaN(parsedInput1) &&\r\n      !isNaN(parsedInput2) &&\r\n      0 < parsedInput1 &&\r\n      parsedInput1 <= coin1.balance\r\n    );\r\n  };\r\n\r\n  // Called when the dialog window for coin1 exits\r\n  const onToken1Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog1Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin2.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then((data) => {\r\n        setCoin1({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Called when the dialog window for coin2 exits\r\n  const onToken2Selected = (address) => {\r\n    // Close the dialog window\r\n    setDialog2Open(false);\r\n\r\n    // If the user inputs the same token, we want to switch the data in the fields\r\n    if (address === coin1.address) {\r\n      switchFields();\r\n    }\r\n    // We only update the values if the user provides a token\r\n    else if (address) {\r\n      // Getting some token data is async, so we need to wait for the data to return, hence the promise\r\n      getBalanceAndSymbol(props.network.account, address, props.network.provider, props.network.signer, props.network.weth.address, props.network.coins).then((data) => {\r\n        setCoin2({\r\n          address: address,\r\n          symbol: data.symbol,\r\n          balance: data.balance,\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  // Calls the swapTokens Ethereum function to make the swap, then resets nessicary state variables\r\n  const swap = () => {\r\n    console.log(\"Attempting to swap tokens...\");\r\n    setLoading(true);\r\n\r\n    swapTokens(\r\n      coin1.address,\r\n      coin2.address,\r\n      field1Value,\r\n      props.network.router,\r\n      props.network.account,\r\n      props.network.signer\r\n    )\r\n      .then(() => {\r\n        setLoading(false);\r\n\r\n        // If the transaction was successful, we clear to input to make sure the user doesn't accidental redo the transfer\r\n        setField1Value(\"\");\r\n        enqueueSnackbar(\"Transaction Successful\", { variant: \"success\" });\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        enqueueSnackbar(\"Transaction Failed (\" + e.message + \")\", {\r\n          variant: \"error\",\r\n          autoHideDuration: 10000,\r\n        });\r\n      });\r\n  };\r\n\r\n  // The lambdas within these useEffects will be called when a particular dependency is updated. These dependencies\r\n  // are defined in the array of variables passed to the function after the lambda expression. If there are no dependencies\r\n  // the lambda will only ever be called when the component mounts. These are very useful for calculating new values\r\n  // after a particular state change, for example, calculating the new exchange rate whenever the addresses\r\n  // of the two coins change.\r\n\r\n  // This hook is called when either of the state variables `coin1.address` or `coin2.address` change.\r\n  // This means that when the user selects a different coin to convert between, or the coins are swapped,\r\n  // the new reserves will be calculated.\r\n  useEffect(() => {\r\n    console.log(\r\n      \"Trying to get Reserves between:\\n\" + coin1.address + \"\\n\" + coin2.address\r\n    );\r\n\r\n    if (coin1.address && coin2.address) {\r\n      getReserves(coin1.address, coin2.address, props.network.factory, props.network.signer, props.network.account).then(\r\n        (data) => setReserves(data)\r\n      );\r\n    }\r\n  }, [coin1.address, coin2.address, props.network.account, props.network.factory, props.network.router, props.network.signer]);\r\n\r\n  // This hook is called when either of the state variables `field1Value` `coin1.address` or `coin2.address` change.\r\n  // It attempts to calculate and set the state variable `field2Value`\r\n  // This means that if the user types a new value into the conversion box or the conversion rate changes,\r\n  // the value in the output box will change.\r\n  useEffect(() => {\r\n    if (isNaN(parseFloat(field1Value))) {\r\n      setField2Value(\"\");\r\n    } else if (parseFloat(field1Value) && coin1.address && coin2.address) {\r\n      getAmountOut(coin1.address, coin2.address, field1Value, props.network.router, props.network.signer).then(\r\n        (amount) => setField2Value(amount.toFixed(7))\r\n      ).catch(e => {\r\n        console.log(e);\r\n        setField2Value(\"NA\");\r\n      })\r\n    } else {\r\n      setField2Value(\"\");\r\n    }\r\n  }, [field1Value, coin1.address, coin2.address]);\r\n\r\n  // This hook creates a timeout that will run every ~10 seconds, it's role is to check if the user's balance has\r\n  // updated has changed. This allows them to see when a transaction completes by looking at the balance output.\r\n  useEffect(() => {\r\n    const coinTimeout = setTimeout(() => {\r\n      console.log('props: ', props);\r\n      console.log(\"Checking balances...\");\r\n\r\n      if (coin1.address && coin2.address && props.network.account) {\r\n        getReserves(\r\n          coin1.address,\r\n          coin2.address,\r\n          props.network.factory,\r\n          props.network.signer,\r\n          props.network.account\r\n        ).then((data) => setReserves(data));\r\n      }\r\n\r\n      if (coin1.address && props.network.account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(\r\n          props.network.account,\r\n          coin1.address,\r\n          props.network.provider,\r\n          props.network.signer,\r\n          props.network.weth.address,\r\n          props.network.coins\r\n          ).then(\r\n          (data) => {\r\n            setCoin1({\r\n              ...coin1,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n      if (coin2.address && props.network.account &&!wrongNetworkOpen) {\r\n        getBalanceAndSymbol(\r\n          props.network.account,\r\n          coin2.address,\r\n          props.network.provider,\r\n          props.network.signer,\r\n          props.network.weth.address,\r\n          props.network.coins\r\n          ).then(\r\n          (data) => {\r\n            setCoin2({\r\n              ...coin2,\r\n              balance: data.balance,\r\n            });\r\n          }\r\n        );\r\n      }\r\n    }, 10000);\r\n\r\n    return () => clearTimeout(coinTimeout);\r\n  });\r\n\r\n  return (\r\n    <div className={classes.allContainer}>\r\n      {/* Dialog Windows */}\r\n      <CoinDialog\r\n        open={dialog1Open}\r\n        onClose={onToken1Selected}\r\n        coins={props.network.coins}\r\n        props={props.network.signer}\r\n      />\r\n      <CoinDialog\r\n        open={dialog2Open}\r\n        onClose={onToken2Selected}\r\n        coins={props.network.coins}\r\n        signer={props.network.signer}\r\n      />\r\n      <WrongNetwork\r\n        open={wrongNetworkOpen}\r\n        />\r\n\r\n      {/* Coin Swapper */}\r\n      <iframe \r\n          src=\"https://dexscreener.com/dogechain/0x1aAD352a2190B399Bb3cfD4d5E4B0bf6EFA33C0e?embed=1&theme=dark&trades=0&info=0\"\r\n          title=\"MyFrame\"\r\n          width=\"800px\"\r\n          height=\"600px\"             \r\n      ></iframe>\r\n      <Container maxWidth=\"xs\" className={classes.swapContainer}>\r\n        <Paper className={classes.paperContainer}>\r\n          <Typography variant=\"h5\" className={classes.title}>\r\n            Swap Coins\r\n          </Typography>\r\n\r\n          <Grid container direction=\"column\" alignItems=\"center\" spacing={2}>\r\n            <Grid item xs={12} className={classes.fullWidth}>\r\n              <CoinField\r\n                activeField={true}\r\n                value={field1Value}\r\n                onClick={() => setDialog1Open(true)}\r\n                onChange={handleChange.field1}\r\n                symbol={coin1.symbol !== undefined ? coin1.symbol : \"Select\"}\r\n              />\r\n            </Grid>\r\n\r\n            <IconButton onClick={switchFields} className={classes.switchButton}>\r\n              <SwapVerticalCircleIcon fontSize=\"medium\" />\r\n            </IconButton>\r\n\r\n            <Grid item xs={12} className={classes.fullWidth}>\r\n              <CoinField\r\n                activeField={false}\r\n                value={field2Value}\r\n                onClick={() => setDialog2Open(true)}\r\n                symbol={coin2.symbol !== undefined ? coin2.symbol : \"Select\"}\r\n              />\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Balance Display */}\r\n            <Typography variant=\"h6\">Your Balances</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(coin1.balance, coin1.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatBalance(coin2.balance, coin2.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            {/* Reserves Display */}\r\n            <Typography variant=\"h6\">Reserves</Typography>\r\n            <Grid container direction=\"row\" justifyContent=\"space-between\">\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatReserve(reserves[0], coin1.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={6}>\r\n                <Typography variant=\"body1\" className={classes.balance}>\r\n                  {formatReserve(reserves[1], coin2.symbol)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            <hr className={classes.hr} />\r\n\r\n            <LoadingButton\r\n              loading={loading}\r\n              valid={isButtonEnabled()}\r\n              success={false}\r\n              fail={false}\r\n              onClick={swap}\r\n            >\r\n              <LoopIcon />\r\n              Swap\r\n            </LoadingButton>\r\n          </Grid>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Grid\r\n        container\r\n        className={classes.footer}\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"flex-end\"\r\n      >\r\n        <p>\r\n        Grimace Swap | Get AUT for use in the bakerloo testnet{\" \"}\r\n          <a href=\"https://faucet.bakerloo.autonity.network/\">here</a>\r\n        </p>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CoinSwapper;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}