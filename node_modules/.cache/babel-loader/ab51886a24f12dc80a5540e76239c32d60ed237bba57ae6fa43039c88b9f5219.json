{"ast":null,"code":"import _slicedToArray from\"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import{Contract,ethers}from\"ethers\";import{fetchReserves,getDecimals}from\"../ethereumFunctions\";var ERC20=require(\"../build/ERC20.json\");var PAIR=require(\"../build/IUniswapV2Pair.json\");// Function used to add Liquidity to any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\n//    `amount1` - A float or similar number representing the value of address1's coin to add\n//    `amount2` - A float or similar number representing the value of address2's coin to add\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nexport function addLiquidity(_x,_x2,_x3,_x4,_x5,_x6,_x7,_x8,_x9){return _addLiquidity.apply(this,arguments);}// Function used to remove Liquidity from any pair of tokens or token-AUT\n// To work correctly, there needs to be 9 arguments:\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\n//    `routerContract` - The router contract to carry out this trade\n//    `accountAddress` - An Ethereum address of the current user's account\n//    `provider` - The current provider\n//    `signer` - The current signer\nfunction _addLiquidity(){_addLiquidity=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(address1,address2,amount1,amount2,amount1min,amount2min,routerContract,account,signer){var token1,token2,token1Decimals,token2Decimals,amountIn1,amountIn2,amount1Min,amount2Min,time,deadline,wethAddress;return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:token1=new Contract(address1,ERC20.abi,signer);token2=new Contract(address2,ERC20.abi,signer);_context.next=4;return getDecimals(token1);case 4:token1Decimals=_context.sent;_context.next=7;return getDecimals(token2);case 7:token2Decimals=_context.sent;amountIn1=ethers.utils.parseUnits(amount1,token1Decimals);amountIn2=ethers.utils.parseUnits(amount2,token2Decimals);amount1Min=ethers.utils.parseUnits(amount1min,token1Decimals);amount2Min=ethers.utils.parseUnits(amount2min,token2Decimals);time=Math.floor(Date.now()/1000)+200000;deadline=ethers.BigNumber.from(time);_context.next=16;return token1.approve(routerContract.address,amountIn1);case 16:_context.next=18;return token2.approve(routerContract.address,amountIn2);case 18:_context.next=20;return routerContract.WETH();case 20:wethAddress=_context.sent;console.log([address1,address2,amountIn1,amountIn2,amount1Min,amount2Min,account,deadline]);if(!(address1===wethAddress)){_context.next=27;break;}_context.next=25;return routerContract.addLiquidityETH(address2,amountIn2,amount2Min,amount1Min,account,deadline,{value:amountIn1});case 25:_context.next=34;break;case 27:if(!(address2===wethAddress)){_context.next=32;break;}_context.next=30;return routerContract.addLiquidityETH(address1,amountIn1,amount1Min,amount2Min,account,deadline,{value:amountIn2});case 30:_context.next=34;break;case 32:_context.next=34;return routerContract.addLiquidity(address1,address2,amountIn1,amountIn2,amount1Min,amount2Min,account,deadline);case 34:case\"end\":return _context.stop();}},_callee);}));return _addLiquidity.apply(this,arguments);}export function removeLiquidity(_x10,_x11,_x12,_x13,_x14,_x15,_x16,_x17,_x18){return _removeLiquidity.apply(this,arguments);}function _removeLiquidity(){_removeLiquidity=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(address1,address2,liquidity_tokens,amount1min,amount2min,routerContract,account,signer,factory){var token1,token2,token1Decimals,token2Decimals,Getliquidity,liquidity,amount1Min,amount2Min,time,deadline,wethAddress,pairAddress,pair;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:token1=new Contract(address1,ERC20.abi,signer);token2=new Contract(address2,ERC20.abi,signer);_context2.next=4;return getDecimals(token1);case 4:token1Decimals=_context2.sent;_context2.next=7;return getDecimals(token2);case 7:token2Decimals=_context2.sent;Getliquidity=function Getliquidity(liquidity_tokens){if(liquidity_tokens<0.001){return ethers.BigNumber.from(liquidity_tokens*Math.pow(10,18));}return ethers.utils.parseUnits(String(liquidity_tokens),18);};liquidity=Getliquidity(liquidity_tokens);console.log('liquidity: ',liquidity);amount1Min=ethers.utils.parseUnits(String(amount1min),token1Decimals);amount2Min=ethers.utils.parseUnits(String(amount2min),token2Decimals);time=Math.floor(Date.now()/1000)+200000;deadline=ethers.BigNumber.from(time);_context2.next=17;return routerContract.WETH();case 17:wethAddress=_context2.sent;_context2.next=20;return factory.getPair(address1,address2);case 20:pairAddress=_context2.sent;pair=new Contract(pairAddress,PAIR.abi,signer);_context2.next=24;return pair.approve(routerContract.address,liquidity);case 24:console.log([address1,address2,Number(liquidity),Number(amount1Min),Number(amount2Min),account,deadline]);if(!(address1===wethAddress)){_context2.next=30;break;}_context2.next=28;return routerContract.removeLiquidityETH(address2,liquidity,amount2Min,amount1Min,account,deadline);case 28:_context2.next=37;break;case 30:if(!(address2===wethAddress)){_context2.next=35;break;}_context2.next=33;return routerContract.removeLiquidityETH(address1,liquidity,amount1Min,amount2Min,account,deadline);case 33:_context2.next=37;break;case 35:_context2.next=37;return routerContract.removeLiquidity(address1,address2,liquidity,amount1Min,amount2Min,account,deadline);case 37:case\"end\":return _context2.stop();}},_callee2);}));return _removeLiquidity.apply(this,arguments);}var quote=function quote(amount1,reserve1,reserve2){var amount2=amount1*(reserve2/reserve1);return[amount2];};// Function used to get a quote of the liquidity addition\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\n//    `factory` - The current factory\n//    `signer` - The current signer\nfunction quoteMintLiquidity(_x19,_x20,_x21,_x22,_x23,_x24){return _quoteMintLiquidity.apply(this,arguments);}function _quoteMintLiquidity(){_quoteMintLiquidity=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(address1,address2,amountA,amountB,factory,signer){var MINIMUM_LIQUIDITY,_reserveA,_reserveB,totalSupply,_yield$factory$getPai,_yield$factory$getPai2,token1,token2,token1Decimals,token2Decimals,valueA,valueB,reserveA,reserveB;return _regeneratorRuntime().wrap(function _callee4$(_context4){while(1)switch(_context4.prev=_context4.next){case 0:MINIMUM_LIQUIDITY=1000;_reserveA=0;_reserveB=0;totalSupply=0;_context4.next=6;return factory.getPair(address1,address2).then(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(pairAddress){var pair,reservesRaw,_reserveA2,_reserveB2,_totalSupply,_totalSupply2;return _regeneratorRuntime().wrap(function _callee3$(_context3){while(1)switch(_context3.prev=_context3.next){case 0:if(!(pairAddress!=='0x0000000000000000000000000000000000000000')){_context3.next=14;break;}pair=new Contract(pairAddress,PAIR.abi,signer);_context3.next=4;return fetchReserves(address1,address2,pair,signer);case 4:reservesRaw=_context3.sent;// Returns the reserves already formated as ethers\n_reserveA2=reservesRaw[0];_reserveB2=reservesRaw[1];_context3.next=9;return pair.totalSupply();case 9:_totalSupply=_context3.sent;_totalSupply2=Number(ethers.utils.formatEther(_totalSupply));return _context3.abrupt(\"return\",[_reserveA2,_reserveB2,_totalSupply2]);case 14:return _context3.abrupt(\"return\",[0,0,0]);case 15:case\"end\":return _context3.stop();}},_callee3);}));return function(_x36){return _ref.apply(this,arguments);};}());case 6:_yield$factory$getPai=_context4.sent;_yield$factory$getPai2=_slicedToArray(_yield$factory$getPai,3);_reserveA=_yield$factory$getPai2[0];_reserveB=_yield$factory$getPai2[1];totalSupply=_yield$factory$getPai2[2];token1=new Contract(address1,ERC20.abi,signer);token2=new Contract(address2,ERC20.abi,signer);// Need to do all this decimals work to account for 0 decimal numbers\n_context4.next=15;return getDecimals(token1);case 15:token1Decimals=_context4.sent;_context4.next=18;return getDecimals(token2);case 18:token2Decimals=_context4.sent;valueA=amountA*Math.pow(10,token1Decimals);valueB=amountB*Math.pow(10,token2Decimals);reserveA=_reserveA*Math.pow(10,token1Decimals);reserveB=_reserveB*Math.pow(10,token2Decimals);if(!(totalSupply==0)){_context4.next=25;break;}return _context4.abrupt(\"return\",Math.sqrt(valueA*valueB-MINIMUM_LIQUIDITY)*Math.pow(10,-18));case 25:;return _context4.abrupt(\"return\",Math.min(valueA*totalSupply/reserveA,valueB*totalSupply/reserveB));case 27:case\"end\":return _context4.stop();}},_callee4);}));return _quoteMintLiquidity.apply(this,arguments);};export function quoteAddLiquidity(_x25,_x26,_x27,_x28,_x29,_x30){return _quoteAddLiquidity.apply(this,arguments);}// Function used to get a quote of the liquidity removal\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\n//    `factory` - The current factory\n//    `signer` - The current signer\nfunction _quoteAddLiquidity(){_quoteAddLiquidity=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(address1,address2,amountADesired,amountBDesired,factory,signer){var pairAddress,pair,reservesRaw,reserveA,reserveB,amountOut,amountBOptimal,_amountOut,amountAOptimal,_amountOut2;return _regeneratorRuntime().wrap(function _callee5$(_context5){while(1)switch(_context5.prev=_context5.next){case 0:_context5.next=2;return factory.getPair(address1,address2);case 2:pairAddress=_context5.sent;pair=new Contract(pairAddress,PAIR.abi,signer);_context5.next=6;return fetchReserves(address1,address2,pair,signer);case 6:reservesRaw=_context5.sent;// Returns the reserves already formated as ethers\nreserveA=reservesRaw[0];reserveB=reservesRaw[1];if(!(reserveA===0&&reserveB===0)){_context5.next=16;break;}_context5.next=12;return quoteMintLiquidity(address1,address2,amountADesired,amountBDesired,factory,signer);case 12:amountOut=_context5.sent;return _context5.abrupt(\"return\",[amountADesired,amountBDesired,amountOut.toPrecision(8)]);case 16:amountBOptimal=quote(amountADesired,reserveA,reserveB);if(!(amountBOptimal<=amountBDesired)){_context5.next=24;break;}_context5.next=20;return quoteMintLiquidity(address1,address2,amountADesired,amountBOptimal,factory,signer);case 20:_amountOut=_context5.sent;return _context5.abrupt(\"return\",[amountADesired,amountBOptimal,_amountOut.toPrecision(8)]);case 24:amountAOptimal=quote(amountBDesired,reserveB,reserveA);_context5.next=27;return quoteMintLiquidity(address1,address2,amountAOptimal,amountBDesired,factory,signer);case 27:_amountOut2=_context5.sent;return _context5.abrupt(\"return\",[amountAOptimal,amountBDesired,_amountOut2.toPrecision(8)]);case 29:case\"end\":return _context5.stop();}},_callee5);}));return _quoteAddLiquidity.apply(this,arguments);}export function quoteRemoveLiquidity(_x31,_x32,_x33,_x34,_x35){return _quoteRemoveLiquidity.apply(this,arguments);}function _quoteRemoveLiquidity(){_quoteRemoveLiquidity=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(address1,address2,liquidity,factory,signer){var pairAddress,pair,reservesRaw,reserveA,reserveB,feeOn,_kLast,kLast,_totalSupply,totalSupply,feeLiquidity,Aout,Bout;return _regeneratorRuntime().wrap(function _callee6$(_context6){while(1)switch(_context6.prev=_context6.next){case 0:_context6.next=2;return factory.getPair(address1,address2);case 2:pairAddress=_context6.sent;console.log(\"pair address\",pairAddress);pair=new Contract(pairAddress,PAIR.abi,signer);_context6.next=7;return fetchReserves(address1,address2,pair,signer);case 7:reservesRaw=_context6.sent;// Returns the reserves already formated as ethers\nreserveA=reservesRaw[0];reserveB=reservesRaw[1];_context6.next=12;return factory.feeTo();case 12:_context6.t0=_context6.sent;feeOn=_context6.t0!==0x0000000000000000000000000000000000000000;_context6.next=16;return pair.kLast();case 16:_kLast=_context6.sent;kLast=Number(ethers.utils.formatEther(_kLast));_context6.next=20;return pair.totalSupply();case 20:_totalSupply=_context6.sent;totalSupply=Number(ethers.utils.formatEther(_totalSupply));if(feeOn&&kLast>0){feeLiquidity=totalSupply*(Math.sqrt(reserveA*reserveB)-Math.sqrt(kLast))/(5*Math.sqrt(reserveA*reserveB)+Math.sqrt(kLast));totalSupply=totalSupply+feeLiquidity;}Aout=reserveA*liquidity/totalSupply;Bout=reserveB*liquidity/totalSupply;return _context6.abrupt(\"return\",[liquidity,Aout,Bout]);case 26:case\"end\":return _context6.stop();}},_callee6);}));return _quoteRemoveLiquidity.apply(this,arguments);}","map":{"version":3,"names":["Contract","ethers","fetchReserves","getDecimals","ERC20","require","PAIR","addLiquidity","_x","_x2","_x3","_x4","_x5","_x6","_x7","_x8","_x9","_addLiquidity","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","address1","address2","amount1","amount2","amount1min","amount2min","routerContract","account","signer","token1","token2","token1Decimals","token2Decimals","amountIn1","amountIn2","amount1Min","amount2Min","time","deadline","wethAddress","wrap","_callee$","_context","prev","next","abi","sent","utils","parseUnits","Math","floor","Date","now","BigNumber","from","approve","address","WETH","console","log","addLiquidityETH","value","stop","removeLiquidity","_x10","_x11","_x12","_x13","_x14","_x15","_x16","_x17","_x18","_removeLiquidity","_callee2","liquidity_tokens","factory","Getliquidity","liquidity","pairAddress","pair","_callee2$","_context2","pow","String","getPair","Number","removeLiquidityETH","quote","reserve1","reserve2","quoteMintLiquidity","_x19","_x20","_x21","_x22","_x23","_x24","_quoteMintLiquidity","_callee4","amountA","amountB","MINIMUM_LIQUIDITY","_reserveA","_reserveB","totalSupply","_yield$factory$getPai","_yield$factory$getPai2","valueA","valueB","reserveA","reserveB","_callee4$","_context4","then","_ref","_callee3","reservesRaw","_reserveA2","_reserveB2","_totalSupply","_totalSupply2","_callee3$","_context3","formatEther","abrupt","_x36","_slicedToArray","sqrt","min","quoteAddLiquidity","_x25","_x26","_x27","_x28","_x29","_x30","_quoteAddLiquidity","_callee5","amountADesired","amountBDesired","amountOut","amountBOptimal","_amountOut","amountAOptimal","_amountOut2","_callee5$","_context5","toPrecision","quoteRemoveLiquidity","_x31","_x32","_x33","_x34","_x35","_quoteRemoveLiquidity","_callee6","feeOn","_kLast","kLast","feeLiquidity","Aout","Bout","_callee6$","_context6","feeTo","t0"],"sources":["D:/temki/grimace/GrimaceSwap/src/Liquidity/LiquidityFunctions.js"],"sourcesContent":["import { Contract, ethers } from \"ethers\";\r\nimport { fetchReserves, getDecimals } from \"../ethereumFunctions\";\r\n\r\nconst ERC20 = require(\"../build/ERC20.json\");\r\nconst PAIR = require(\"../build/IUniswapV2Pair.json\");\r\n\r\n// Function used to add Liquidity to any pair of tokens or token-AUT\r\n// To work correctly, there needs to be 9 arguments:\r\n//    `address1` - An Ethereum address of the coin to add from (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to add to (either a token or AUT)\r\n//    `amount1` - A float or similar number representing the value of address1's coin to add\r\n//    `amount2` - A float or similar number representing the value of address2's coin to add\r\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to add\r\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to add\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function addLiquidity(\r\n  address1,\r\n  address2,\r\n  amount1,\r\n  amount2,\r\n  amount1min,\r\n  amount2min,\r\n  routerContract,\r\n  account,\r\n  signer\r\n) {\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const token2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n  const token1Decimals = await getDecimals(token1);\r\n  const token2Decimals = await getDecimals(token2);\r\n\r\n  const amountIn1 = ethers.utils.parseUnits(amount1, token1Decimals);\r\n  const amountIn2 = ethers.utils.parseUnits(amount2, token2Decimals);\r\n\r\n  const amount1Min = ethers.utils.parseUnits(amount1min, token1Decimals);\r\n  const amount2Min = ethers.utils.parseUnits(amount2min, token2Decimals);\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  await token1.approve(routerContract.address, amountIn1);\r\n  await token2.approve(routerContract.address, amountIn2);\r\n\r\n  const wethAddress = await routerContract.WETH();\r\n\r\n  console.log([\r\n    address1,\r\n    address2,\r\n    amountIn1,\r\n    amountIn2,\r\n    amount1Min,\r\n    amount2Min,\r\n    account,\r\n    deadline,\r\n  ]);\r\n\r\n  if (address1 === wethAddress) {\r\n    // Eth + Token\r\n    await routerContract.addLiquidityETH(\r\n      address2,\r\n      amountIn2,\r\n      amount2Min,\r\n      amount1Min,\r\n      account,\r\n      deadline,\r\n      { value: amountIn1 }\r\n    );\r\n  } else if (address2 === wethAddress) {\r\n    // Token + Eth\r\n    await routerContract.addLiquidityETH(\r\n      address1,\r\n      amountIn1,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline,\r\n      { value: amountIn2 }\r\n    );\r\n  } else {\r\n    // Token + Token\r\n    await routerContract.addLiquidity(\r\n      address1,\r\n      address2,\r\n      amountIn1,\r\n      amountIn2,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n\r\n// Function used to remove Liquidity from any pair of tokens or token-AUT\r\n// To work correctly, there needs to be 9 arguments:\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `liquidity_tokens` - A float or similar number representing the value of liquidity tokens you will burn to get tokens back\r\n//    `amount1Min` - A float or similar number representing the minimum of address1's coin to recieve\r\n//    `amount2Min` - A float or similar number representing the minimum of address2's coin to recieve\r\n//    `routerContract` - The router contract to carry out this trade\r\n//    `accountAddress` - An Ethereum address of the current user's account\r\n//    `provider` - The current provider\r\n//    `signer` - The current signer\r\nexport async function removeLiquidity(\r\n  address1,\r\n  address2,\r\n  liquidity_tokens,\r\n  amount1min,\r\n  amount2min,\r\n  routerContract,\r\n  account,\r\n  signer,\r\n  factory\r\n) {\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const token2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n  const token1Decimals = await getDecimals(token1);\r\n  const token2Decimals = await getDecimals(token2);\r\n\r\n  const Getliquidity = (liquidity_tokens)=>{\r\n    if (liquidity_tokens < 0.001){\r\n      return ethers.BigNumber.from(liquidity_tokens*10**18);\r\n    }\r\n    return ethers.utils.parseUnits(String(liquidity_tokens), 18);\r\n  }\r\n\r\n  const liquidity = Getliquidity(liquidity_tokens);\r\n  console.log('liquidity: ', liquidity);\r\n\r\n  const amount1Min = ethers.utils.parseUnits(String(amount1min), token1Decimals);\r\n  const amount2Min = ethers.utils.parseUnits(String(amount2min), token2Decimals);\r\n\r\n  const time = Math.floor(Date.now() / 1000) + 200000;\r\n  const deadline = ethers.BigNumber.from(time);\r\n\r\n  const wethAddress = await routerContract.WETH();\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  await pair.approve(routerContract.address, liquidity);\r\n\r\n  console.log([\r\n    address1,\r\n    address2,\r\n    Number(liquidity),\r\n    Number(amount1Min),\r\n    Number(amount2Min),\r\n    account,\r\n    deadline,\r\n  ]);\r\n\r\n  if (address1 === wethAddress) {\r\n    // Eth + Token\r\n    await routerContract.removeLiquidityETH(\r\n      address2,\r\n      liquidity,\r\n      amount2Min,\r\n      amount1Min,\r\n      account,\r\n      deadline\r\n    );\r\n  } else if (address2 === wethAddress) {\r\n    // Token + Eth\r\n    await routerContract.removeLiquidityETH(\r\n      address1,\r\n      liquidity,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  } else {\r\n    // Token + Token\r\n    await routerContract.removeLiquidity(\r\n      address1,\r\n      address2,\r\n      liquidity,\r\n      amount1Min,\r\n      amount2Min,\r\n      account,\r\n      deadline\r\n    );\r\n  }\r\n}\r\n\r\nconst quote = (amount1, reserve1, reserve2) => {\r\n  const amount2 = amount1 * (reserve2 / reserve1);\r\n  return [amount2];\r\n};\r\n\r\n// Function used to get a quote of the liquidity addition\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `amountA_desired` - The prefered value of the first token that the user would like to deploy as liquidity\r\n//    `amountB_desired` - The prefered value of the second token that the user would like to deploy as liquidity\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\n\r\nasync function quoteMintLiquidity(\r\n  address1,\r\n  address2,\r\n  amountA,\r\n  amountB,\r\n  factory,\r\n  signer\r\n){\r\n  const MINIMUM_LIQUIDITY = 1000;\r\n  let _reserveA = 0;\r\n  let _reserveB = 0;\r\n  let totalSupply = 0;\r\n  [_reserveA, _reserveB, totalSupply] = await factory.getPair(address1, address2).then(async (pairAddress) => {\r\n    if (pairAddress !== '0x0000000000000000000000000000000000000000'){\r\n      const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n      const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\r\n      const reserveA = reservesRaw[0];\r\n      const reserveB = reservesRaw[1];\r\n    \r\n      const _totalSupply = await pair.totalSupply();\r\n      const totalSupply = Number(ethers.utils.formatEther(_totalSupply));\r\n      return [reserveA, reserveB, totalSupply]\r\n    } else {\r\n      return [0,0,0]\r\n    }\r\n  });\r\n\r\n  const token1 = new Contract(address1, ERC20.abi, signer);\r\n  const token2 = new Contract(address2, ERC20.abi, signer);\r\n\r\n  // Need to do all this decimals work to account for 0 decimal numbers\r\n\r\n  const token1Decimals = await getDecimals(token1);\r\n  const token2Decimals = await getDecimals(token2);\r\n\r\n  const valueA = amountA*(10**token1Decimals);\r\n  const valueB = amountB*(10**token2Decimals);\r\n\r\n  const reserveA = _reserveA*(10**token1Decimals);\r\n  const reserveB = _reserveB*(10**token2Decimals);\r\n\r\n  if (totalSupply == 0){\r\n    return Math.sqrt(((valueA * valueB)-MINIMUM_LIQUIDITY))*10**(-18);\r\n  };\r\n  \r\n  return (\r\n    Math.min(valueA*totalSupply/reserveA, valueB*totalSupply/reserveB)\r\n  );\r\n};\r\n\r\nexport async function quoteAddLiquidity(\r\n  address1,\r\n  address2,\r\n  amountADesired,\r\n  amountBDesired,\r\n  factory,\r\n  signer\r\n) {\r\n\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\r\n  const reserveA = reservesRaw[0];\r\n  const reserveB = reservesRaw[1];\r\n\r\n  if (reserveA === 0 && reserveB === 0) {\r\n    const amountOut = await quoteMintLiquidity(\r\n      address1,\r\n      address2,\r\n      amountADesired,\r\n      amountBDesired,\r\n      factory,\r\n      signer);\r\n    return [\r\n      amountADesired,\r\n      amountBDesired,\r\n      amountOut.toPrecision(8),\r\n    ];\r\n  } else {\r\n    const amountBOptimal = quote(amountADesired, reserveA, reserveB);\r\n    if (amountBOptimal <= amountBDesired) {\r\n      const amountOut = await quoteMintLiquidity(\r\n        address1,\r\n        address2,\r\n        amountADesired,\r\n        amountBOptimal,\r\n        factory,\r\n        signer);\r\n      return [\r\n        amountADesired,\r\n        amountBOptimal,\r\n        amountOut.toPrecision(8),\r\n      ];\r\n    } else {\r\n      const amountAOptimal = quote(\r\n        amountBDesired,\r\n        reserveB,\r\n        reserveA\r\n      );\r\n      const amountOut = await quoteMintLiquidity(\r\n        address1,\r\n        address2,\r\n        amountAOptimal,\r\n        amountBDesired,\r\n        factory,\r\n        signer);\r\n      return [\r\n        amountAOptimal,\r\n        amountBDesired,\r\n        amountOut.toPrecision(8),\r\n      ];\r\n    }\r\n  }\r\n}\r\n\r\n// Function used to get a quote of the liquidity removal\r\n//    `address1` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `address2` - An Ethereum address of the coin to recieve (either a token or AUT)\r\n//    `liquidity` - The amount of liquidity tokens the user will burn to get their tokens back\r\n//    `factory` - The current factory\r\n//    `signer` - The current signer\r\n\r\nexport async function quoteRemoveLiquidity(\r\n  address1,\r\n  address2,\r\n  liquidity,\r\n  factory,\r\n  signer\r\n) {\r\n  const pairAddress = await factory.getPair(address1, address2);\r\n  console.log(\"pair address\", pairAddress);\r\n  const pair = new Contract(pairAddress, PAIR.abi, signer);\r\n\r\n  const reservesRaw = await fetchReserves(address1, address2, pair, signer); // Returns the reserves already formated as ethers\r\n  const reserveA = reservesRaw[0];\r\n  const reserveB = reservesRaw[1];\r\n\r\n  const feeOn =\r\n    (await factory.feeTo()) !== 0x0000000000000000000000000000000000000000;\r\n\r\n  const _kLast = await pair.kLast();\r\n  const kLast = Number(ethers.utils.formatEther(_kLast));\r\n\r\n  const _totalSupply = await pair.totalSupply();\r\n  let totalSupply = Number(ethers.utils.formatEther(_totalSupply));\r\n\r\n  if (feeOn && kLast > 0) {\r\n    const feeLiquidity =\r\n      (totalSupply * (Math.sqrt(reserveA * reserveB) - Math.sqrt(kLast))) /\r\n      (5 * Math.sqrt(reserveA * reserveB) + Math.sqrt(kLast));\r\n    totalSupply = totalSupply + feeLiquidity;\r\n  }\r\n\r\n  const Aout = (reserveA * liquidity) / totalSupply;\r\n  const Bout = (reserveB * liquidity) / totalSupply;\r\n\r\n  return [liquidity, Aout, Bout];\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}