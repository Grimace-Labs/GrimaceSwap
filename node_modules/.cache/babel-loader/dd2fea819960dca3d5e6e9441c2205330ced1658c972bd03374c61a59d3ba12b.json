{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n// These are load-balancer-based applicatoin IDs\nvar defaultApplicationIds = {\n  homestead: \"6004bcd10040261633ade990\",\n  ropsten: \"6004bd4d0040261633ade991\",\n  rinkeby: \"6004bda20040261633ade994\",\n  goerli: \"6004bd860040261633ade992\"\n};\nexport var PocketProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(PocketProvider, _UrlJsonRpcProvider);\n  var _super = _createSuper(PocketProvider);\n  function PocketProvider(network, apiKey) {\n    _classCallCheck(this, PocketProvider);\n    // We need a bit of creativity in the constructor because\n    // Pocket uses different default API keys based on the network\n    if (apiKey == null) {\n      var n = getStatic(this instanceof PocketProvider ? this.constructor : void 0, \"getNetwork\")(network);\n      if (n) {\n        var applicationId = defaultApplicationIds[n.name];\n        if (applicationId) {\n          apiKey = {\n            applicationId: applicationId,\n            loadBalancer: true\n          };\n        }\n      }\n      // If there was any issue above, we don't know this network\n      if (apiKey == null) {\n        logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"network\",\n          value: network\n        });\n      }\n    }\n    return _super.call(this, network, apiKey);\n  }\n  _createClass(PocketProvider, [{\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.applicationId === defaultApplicationIds[this.network.name];\n    }\n  }], [{\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      // Most API Providers allow null to get the default configuration, but\n      // Pocket requires the network to decide the default provider, so we\n      // rely on hijacking the constructor to add a sensible default for us\n      if (apiKey == null) {\n        logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n      }\n      var apiKeyObj = {\n        applicationId: null,\n        loadBalancer: false,\n        applicationSecretKey: null\n      };\n      // Parse applicationId and applicationSecretKey\n      if (typeof apiKey === \"string\") {\n        apiKeyObj.applicationId = apiKey;\n      } else if (apiKey.applicationSecretKey != null) {\n        logger.assertArgument(typeof apiKey.applicationId === \"string\", \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n        logger.assertArgument(typeof apiKey.applicationSecretKey === \"string\", \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n        apiKeyObj.applicationId = apiKey.applicationId;\n        apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n        apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n      } else if (apiKey.applicationId) {\n        logger.assertArgument(typeof apiKey.applicationId === \"string\", \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n        apiKeyObj.applicationId = apiKey.applicationId;\n        apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n      } else {\n        logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n      }\n      return apiKeyObj;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n      switch (network ? network.name : \"unknown\") {\n        case \"homestead\":\n          host = \"eth-mainnet.gateway.pokt.network\";\n          break;\n        case \"ropsten\":\n          host = \"eth-ropsten.gateway.pokt.network\";\n          break;\n        case \"rinkeby\":\n          host = \"eth-rinkeby.gateway.pokt.network\";\n          break;\n        case \"goerli\":\n          host = \"eth-goerli.gateway.pokt.network\";\n          break;\n        default:\n          logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"network\",\n            value: network\n          });\n      }\n      var url = null;\n      if (apiKey.loadBalancer) {\n        url = \"https://\".concat(host, \"/v1/lb/\").concat(apiKey.applicationId);\n      } else {\n        url = \"https://\".concat(host, \"/v1/\").concat(apiKey.applicationId);\n      }\n      var connection = {\n        url: url\n      };\n      // Initialize empty headers\n      connection.headers = {};\n      // Apply application secret key\n      if (apiKey.applicationSecretKey != null) {\n        connection.user = \"\";\n        connection.password = apiKey.applicationSecretKey;\n      }\n      return connection;\n    }\n  }]);\n  return PocketProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"names":["_classCallCheck","_createClass","_inherits","_createSuper","getStatic","Logger","version","logger","UrlJsonRpcProvider","defaultApplicationIds","homestead","ropsten","rinkeby","goerli","PocketProvider","_UrlJsonRpcProvider","_super","network","apiKey","n","constructor","applicationId","name","loadBalancer","throwError","errors","INVALID_ARGUMENT","argument","value","call","key","isCommunityResource","getApiKey","throwArgumentError","apiKeyObj","applicationSecretKey","assertArgument","getUrl","host","url","concat","connection","headers","user","password"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\providers\\src.ts\\pocket-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// These are load-balancer-based applicatoin IDs\nconst defaultApplicationIds: Record<string, string> = {\n    homestead: \"6004bcd10040261633ade990\",\n    ropsten: \"6004bd4d0040261633ade991\",\n    rinkeby: \"6004bda20040261633ade994\",\n    goerli: \"6004bd860040261633ade992\",\n};\n\nexport class PocketProvider extends UrlJsonRpcProvider {\n    readonly applicationId: string;\n    readonly applicationSecretKey: string;\n    readonly loadBalancer: boolean;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        // We need a bit of creativity in the constructor because\n        // Pocket uses different default API keys based on the network\n\n        if (apiKey == null) {\n            const n = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (n) {\n                const applicationId = defaultApplicationIds[n.name];\n                if (applicationId) {\n                    apiKey = {\n                        applicationId: applicationId,\n                        loadBalancer: true\n                    };\n                }\n            }\n\n            // If there was any issue above, we don't know this network\n            if (apiKey == null) {\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n            }\n\n        }\n\n        super(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        // Most API Providers allow null to get the default configuration, but\n        // Pocket requires the network to decide the default provider, so we\n        // rely on hijacking the constructor to add a sensible default for us\n\n        if (apiKey == null) {\n            logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n        }\n\n        const apiKeyObj: { applicationId: string, applicationSecretKey: string, loadBalancer: boolean } = {\n            applicationId: null,\n            loadBalancer: false,\n            applicationSecretKey: null\n        };\n\n        // Parse applicationId and applicationSecretKey\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n\n        } else if (apiKey.applicationSecretKey != null) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"),\n                \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else if (apiKey.applicationId) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        let url = null;\n        if (apiKey.loadBalancer) {\n            url = `https:/\\/${ host }/v1/lb/${ apiKey.applicationId }`\n        } else {\n            url = `https:/\\/${ host }/v1/${ apiKey.applicationId }`\n        }\n\n        const connection: ConnectionInfo = { url };\n\n        // Initialize empty headers\n        connection.headers = {}\n\n        // Apply application secret key\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationIds[this.network.name]);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}