{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/temki/grimace/GrimaceSwap/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction) {\n  var result = {};\n  for (var key in transaction) {\n    if (transaction[key] == null) {\n      continue;\n    }\n    var value = transaction[key];\n    if (key === \"type\" && value === 0) {\n      continue;\n    }\n    // Quantity-types require no leading zero, unless 0\n    if ({\n      type: true,\n      gasLimit: true,\n      gasPrice: true,\n      maxFeePerGs: true,\n      maxPriorityFeePerGas: true,\n      nonce: true,\n      value: true\n    }[key]) {\n      value = hexValue(hexlify(value));\n    } else if (key === \"accessList\") {\n      value = \"[\" + accessListify(value).map(function (set) {\n        return \"{address:\\\"\".concat(set.address, \"\\\",storageKeys:[\\\"\").concat(set.storageKeys.join('\",\"'), \"\\\"]}\");\n      }).join(\",\") + \"]\";\n    } else {\n      value = hexlify(value);\n    }\n    result[key] = value;\n  }\n  return result;\n}\nfunction getResult(result) {\n  // getLogs, getHistory have weird success responses\n  if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n    return result.result;\n  }\n  if (result.status != 1 || result.message != \"OK\") {\n    var error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n    if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n      error.throttleRetry = true;\n    }\n    throw error;\n  }\n  return result.result;\n}\nfunction getJsonResult(result) {\n  // This response indicates we are being throttled\n  if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n    var error = new Error(\"throttled response\");\n    error.result = JSON.stringify(result);\n    error.throttleRetry = true;\n    throw error;\n  }\n  if (result.jsonrpc != \"2.0\") {\n    // @TODO: not any\n    var _error = new Error(\"invalid response\");\n    _error.result = JSON.stringify(result);\n    throw _error;\n  }\n  if (result.error) {\n    // @TODO: not any\n    var _error2 = new Error(result.error.message || \"unknown error\");\n    if (result.error.code) {\n      _error2.code = result.error.code;\n    }\n    if (result.error.data) {\n      _error2.data = result.error.data;\n    }\n    throw _error2;\n  }\n  return result.result;\n}\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag) {\n  if (blockTag === \"pending\") {\n    throw new Error(\"pending not supported\");\n  }\n  if (blockTag === \"latest\") {\n    return blockTag;\n  }\n  return parseInt(blockTag.substring(2), 16);\n}\nvar defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\nfunction checkError(method, error, transaction) {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n    var e = error.error;\n    // Etherscan keeps changing their string\n    if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n      // Etherscan prefixes the data like \"Reverted 0x1234\"\n      var data = e.data;\n      if (data) {\n        data = \"0x\" + data.replace(/^.*0x/i, \"\");\n      }\n      if (isHexString(data)) {\n        return data;\n      }\n      logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n        error: error,\n        data: \"0x\"\n      });\n    }\n  }\n  // Get the message from any nested error structure\n  var message = error.message;\n  if (error.code === Logger.errors.SERVER_ERROR) {\n    if (error.error && typeof error.error.message === \"string\") {\n      message = error.error.message;\n    } else if (typeof error.body === \"string\") {\n      message = error.body;\n    } else if (typeof error.responseText === \"string\") {\n      message = error.responseText;\n    }\n  }\n  message = (message || \"\").toLowerCase();\n  // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n  if (message.match(/insufficient funds/)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n  // \"Transaction with the same hash was already imported.\"\n  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n  // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n  if (message.match(/another transaction with same nonce/)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n  if (message.match(/execution failed due to an exception/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n  throw error;\n}\nexport var EtherscanProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(EtherscanProvider, _BaseProvider);\n  var _super2 = _createSuper(EtherscanProvider);\n  function EtherscanProvider(network, apiKey) {\n    var _this;\n    _classCallCheck(this, EtherscanProvider);\n    logger.checkNew(this instanceof EtherscanProvider ? this.constructor : void 0, EtherscanProvider);\n    _this = _super2.call(this, network);\n    defineReadOnly(_assertThisInitialized(_this), \"baseUrl\", _this.getBaseUrl());\n    defineReadOnly(_assertThisInitialized(_this), \"apiKey\", apiKey || defaultApiKey);\n    return _this;\n  }\n  _createClass(EtherscanProvider, [{\n    key: \"getBaseUrl\",\n    value: function getBaseUrl() {\n      switch (this.network ? this.network.name : \"invalid\") {\n        case \"homestead\":\n          return \"https:/\\/api.etherscan.io\";\n        case \"ropsten\":\n          return \"https:/\\/api-ropsten.etherscan.io\";\n        case \"rinkeby\":\n          return \"https:/\\/api-rinkeby.etherscan.io\";\n        case \"kovan\":\n          return \"https:/\\/api-kovan.etherscan.io\";\n        case \"goerli\":\n          return \"https:/\\/api-goerli.etherscan.io\";\n        default:\n      }\n      return logger.throwArgumentError(\"unsupported network\", \"network\", name);\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(module, params) {\n      var query = Object.keys(params).reduce(function (accum, key) {\n        var value = params[key];\n        if (value != null) {\n          accum += \"&\".concat(key, \"=\").concat(value);\n        }\n        return accum;\n      }, \"\");\n      var apiKey = this.apiKey ? \"&apikey=\".concat(this.apiKey) : \"\";\n      return \"\".concat(this.baseUrl, \"/api?module=\").concat(module).concat(query).concat(apiKey);\n    }\n  }, {\n    key: \"getPostUrl\",\n    value: function getPostUrl() {\n      return \"\".concat(this.baseUrl, \"/api\");\n    }\n  }, {\n    key: \"getPostData\",\n    value: function getPostData(module, params) {\n      params.module = module;\n      params.apikey = this.apiKey;\n      return params;\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(module, params, post) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this2 = this;\n        var url, payload, procFunc, connection, payloadStr, result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              url = post ? this.getPostUrl() : this.getUrl(module, params);\n              payload = post ? this.getPostData(module, params) : null;\n              procFunc = module === \"proxy\" ? getJsonResult : getResult;\n              this.emit(\"debug\", {\n                action: \"request\",\n                request: url,\n                provider: this\n              });\n              connection = {\n                url: url,\n                throttleSlotInterval: 1000,\n                throttleCallback: function throttleCallback(attempt, url) {\n                  if (_this2.isCommunityResource()) {\n                    showThrottleMessage();\n                  }\n                  return Promise.resolve(true);\n                }\n              };\n              payloadStr = null;\n              if (payload) {\n                connection.headers = {\n                  \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n                };\n                payloadStr = Object.keys(payload).map(function (key) {\n                  return \"\".concat(key, \"=\").concat(payload[key]);\n                }).join(\"&\");\n              }\n              _context.next = 9;\n              return fetchJson(connection, payloadStr, procFunc || getJsonResult);\n            case 9:\n              result = _context.sent;\n              this.emit(\"debug\", {\n                action: \"response\",\n                request: url,\n                response: deepCopy(result),\n                provider: this\n              });\n              return _context.abrupt(\"return\", result);\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this.network);\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      var _this3 = this;\n      var _super = Object.create(null, {\n        perform: {\n          get: function get() {\n            return _get(_getPrototypeOf(EtherscanProvider.prototype), \"perform\", _this3);\n          }\n        }\n      });\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var postData, _postData, args, topic0, logs, blocks, i, log, block;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.t0 = method;\n              _context3.next = _context3.t0 === \"getBlockNumber\" ? 3 : _context3.t0 === \"getGasPrice\" ? 4 : _context3.t0 === \"getBalance\" ? 5 : _context3.t0 === \"getTransactionCount\" ? 6 : _context3.t0 === \"getCode\" ? 7 : _context3.t0 === \"getStorageAt\" ? 8 : _context3.t0 === \"sendTransaction\" ? 9 : _context3.t0 === \"getBlock\" ? 10 : _context3.t0 === \"getTransaction\" ? 13 : _context3.t0 === \"getTransactionReceipt\" ? 14 : _context3.t0 === \"call\" ? 15 : _context3.t0 === \"estimateGas\" ? 29 : _context3.t0 === \"getLogs\" ? 41 : _context3.t0 === \"getEtherPrice\" ? 65 : 72;\n              break;\n            case 3:\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_blockNumber\"\n              }));\n            case 4:\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_gasPrice\"\n              }));\n            case 5:\n              return _context3.abrupt(\"return\", this.fetch(\"account\", {\n                action: \"balance\",\n                address: params.address,\n                tag: params.blockTag\n              }));\n            case 6:\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getTransactionCount\",\n                address: params.address,\n                tag: params.blockTag\n              }));\n            case 7:\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getCode\",\n                address: params.address,\n                tag: params.blockTag\n              }));\n            case 8:\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getStorageAt\",\n                address: params.address,\n                position: params.position,\n                tag: params.blockTag\n              }));\n            case 9:\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_sendRawTransaction\",\n                hex: params.signedTransaction\n              }, true).catch(function (error) {\n                return checkError(\"sendTransaction\", error, params.signedTransaction);\n              }));\n            case 10:\n              if (!params.blockTag) {\n                _context3.next = 12;\n                break;\n              }\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getBlockByNumber\",\n                tag: params.blockTag,\n                boolean: params.includeTransactions ? \"true\" : \"false\"\n              }));\n            case 12:\n              throw new Error(\"getBlock by blockHash not implemented\");\n            case 13:\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getTransactionByHash\",\n                txhash: params.transactionHash\n              }));\n            case 14:\n              return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                action: \"eth_getTransactionReceipt\",\n                txhash: params.transactionHash\n              }));\n            case 15:\n              if (!(params.blockTag !== \"latest\")) {\n                _context3.next = 17;\n                break;\n              }\n              throw new Error(\"EtherscanProvider does not support blockTag for call\");\n            case 17:\n              postData = getTransactionPostData(params.transaction);\n              postData.module = \"proxy\";\n              postData.action = \"eth_call\";\n              _context3.prev = 20;\n              _context3.next = 23;\n              return this.fetch(\"proxy\", postData, true);\n            case 23:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 26:\n              _context3.prev = 26;\n              _context3.t1 = _context3[\"catch\"](20);\n              return _context3.abrupt(\"return\", checkError(\"call\", _context3.t1, params.transaction));\n            case 29:\n              _postData = getTransactionPostData(params.transaction);\n              _postData.module = \"proxy\";\n              _postData.action = \"eth_estimateGas\";\n              _context3.prev = 32;\n              _context3.next = 35;\n              return this.fetch(\"proxy\", _postData, true);\n            case 35:\n              return _context3.abrupt(\"return\", _context3.sent);\n            case 38:\n              _context3.prev = 38;\n              _context3.t2 = _context3[\"catch\"](32);\n              return _context3.abrupt(\"return\", checkError(\"estimateGas\", _context3.t2, params.transaction));\n            case 41:\n              args = {\n                action: \"getLogs\"\n              };\n              if (params.filter.fromBlock) {\n                args.fromBlock = checkLogTag(params.filter.fromBlock);\n              }\n              if (params.filter.toBlock) {\n                args.toBlock = checkLogTag(params.filter.toBlock);\n              }\n              if (params.filter.address) {\n                args.address = params.filter.address;\n              }\n              // @TODO: We can handle slightly more complicated logs using the logs API\n              if (params.filter.topics && params.filter.topics.length > 0) {\n                if (params.filter.topics.length > 1) {\n                  logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, {\n                    topics: params.filter.topics\n                  });\n                }\n                if (params.filter.topics.length === 1) {\n                  topic0 = params.filter.topics[0];\n                  if (typeof topic0 !== \"string\" || topic0.length !== 66) {\n                    logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, {\n                      topic0: topic0\n                    });\n                  }\n                  args.topic0 = topic0;\n                }\n              }\n              _context3.next = 48;\n              return this.fetch(\"logs\", args);\n            case 48:\n              logs = _context3.sent;\n              // Cache txHash => blockHash\n              blocks = {}; // Add any missing blockHash to the logs\n              i = 0;\n            case 51:\n              if (!(i < logs.length)) {\n                _context3.next = 64;\n                break;\n              }\n              log = logs[i];\n              if (!(log.blockHash != null)) {\n                _context3.next = 55;\n                break;\n              }\n              return _context3.abrupt(\"continue\", 61);\n            case 55:\n              if (!(blocks[log.blockNumber] == null)) {\n                _context3.next = 60;\n                break;\n              }\n              _context3.next = 58;\n              return this.getBlock(log.blockNumber);\n            case 58:\n              block = _context3.sent;\n              if (block) {\n                blocks[log.blockNumber] = block.hash;\n              }\n            case 60:\n              log.blockHash = blocks[log.blockNumber];\n            case 61:\n              i++;\n              _context3.next = 51;\n              break;\n            case 64:\n              return _context3.abrupt(\"return\", logs);\n            case 65:\n              if (!(this.network.name !== \"homestead\")) {\n                _context3.next = 67;\n                break;\n              }\n              return _context3.abrupt(\"return\", 0.0);\n            case 67:\n              _context3.t3 = parseFloat;\n              _context3.next = 70;\n              return this.fetch(\"stats\", {\n                action: \"ethprice\"\n              });\n            case 70:\n              _context3.t4 = _context3.sent.ethusd;\n              return _context3.abrupt(\"return\", (0, _context3.t3)(_context3.t4));\n            case 72:\n              return _context3.abrupt(\"break\", 73);\n            case 73:\n              return _context3.abrupt(\"return\", _super.perform.call(this, method, params));\n            case 74:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[20, 26], [32, 38]]);\n      }));\n    }\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window abailable without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n  }, {\n    key: \"getHistory\",\n    value: function getHistory(addressOrName, startBlock, endBlock) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _this4 = this;\n        var params, result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return this.resolveName(addressOrName);\n            case 2:\n              _context4.t0 = _context4.sent;\n              _context4.t1 = startBlock == null ? 0 : startBlock;\n              _context4.t2 = endBlock == null ? 99999999 : endBlock;\n              params = {\n                action: \"txlist\",\n                address: _context4.t0,\n                startblock: _context4.t1,\n                endblock: _context4.t2,\n                sort: \"asc\"\n              };\n              _context4.next = 8;\n              return this.fetch(\"account\", params);\n            case 8:\n              result = _context4.sent;\n              return _context4.abrupt(\"return\", result.map(function (tx) {\n                [\"contractAddress\", \"to\"].forEach(function (key) {\n                  if (tx[key] == \"\") {\n                    delete tx[key];\n                  }\n                });\n                if (tx.creates == null && tx.contractAddress != null) {\n                  tx.creates = tx.contractAddress;\n                }\n                var item = _this4.formatter.transactionResponse(tx);\n                if (tx.timeStamp) {\n                  item.timestamp = parseInt(tx.timeStamp);\n                }\n                return item;\n              }));\n            case 10:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey === defaultApiKey;\n    }\n  }]);\n  return EtherscanProvider;\n}(BaseProvider);","map":{"version":3,"names":["_regeneratorRuntime","_classCallCheck","_createClass","_assertThisInitialized","_get","_getPrototypeOf","_inherits","_createSuper","hexlify","hexValue","isHexString","deepCopy","defineReadOnly","accessListify","fetchJson","showThrottleMessage","Logger","version","logger","BaseProvider","getTransactionPostData","transaction","result","key","value","type","gasLimit","gasPrice","maxFeePerGs","maxPriorityFeePerGas","nonce","map","set","concat","address","storageKeys","join","getResult","status","message","error","Error","JSON","stringify","toLowerCase","indexOf","throttleRetry","getJsonResult","jsonrpc","code","data","checkLogTag","blockTag","parseInt","substring","defaultApiKey","checkError","method","errors","SERVER_ERROR","e","match","replace","throwError","CALL_EXCEPTION","body","responseText","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNPREDICTABLE_GAS_LIMIT","EtherscanProvider","_BaseProvider","_super2","network","apiKey","_this","checkNew","constructor","call","getBaseUrl","name","throwArgumentError","getUrl","module","params","query","Object","keys","reduce","accum","baseUrl","getPostUrl","getPostData","apikey","fetch","post","url","payload","procFunc","emit","action","request","provider","connection","throttleSlotInterval","throttleCallback","attempt","_this2","isCommunityResource","Promise","resolve","payloadStr","headers","_context","next","sent","response","abrupt","stop","_callee","detectNetwork","_context2","_callee2","perform","_this3","_context3","t0","tag","position","hex","signedTransaction","catch","boolean","includeTransactions","txhash","transactionHash","postData","prev","t1","t2","args","filter","fromBlock","toBlock","topics","length","UNSUPPORTED_OPERATION","topic0","logs","blocks","i","log","blockHash","blockNumber","getBlock","block","hash","t3","parseFloat","t4","ethusd","_super","_callee3","getHistory","addressOrName","startBlock","endBlock","resolveName","_context4","startblock","endblock","sort","tx","forEach","creates","contractAddress","item","_this4","formatter","transactionResponse","timeStamp","timestamp","_callee4"],"sources":["D:\\temki\\grimace\\GrimaceSwap\\node_modules\\@ethersproject\\providers\\src.ts\\etherscan-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { BlockTag, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson } from \"@ethersproject/web\";\n\nimport { showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider } from \"./base-provider\";\n\n\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n    const result: Record<string, string> = { };\n    for (let key in transaction) {\n        if ((<any>transaction)[key] == null) { continue; }\n        let value = (<any>transaction)[key];\n        if (key === \"type\" && value === 0) { continue; }\n\n        // Quantity-types require no leading zero, unless 0\n        if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n            value = hexValue(hexlify(value));\n        } else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n            }).join(\",\") + \"]\";\n        } else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\n\nfunction getResult(result: { status?: number, message?: string, result?: any }): any {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n\n    if (result.status != 1 || result.message != \"OK\") {\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n\n    return result.result;\n}\n\nfunction getJsonResult(result: { jsonrpc: string, result?: any, error?: { code?: number, data?: any, message?: string} } ): any {\n    // This response indicates we are being throttled\n    if (result && (<any>result).status == 0 && (<any>result).message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error: any = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n\n    if (result.error) {\n        // @TODO: not any\n        const error: any = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) { error.code = result.error.code; }\n        if (result.error.data) { error.data = result.error.data; }\n        throw error;\n    }\n\n    return result.result;\n}\n\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag: string): number | \"latest\" {\n    if (blockTag === \"pending\") { throw new Error(\"pending not supported\"); }\n    if (blockTag === \"latest\") { return blockTag; }\n\n    return parseInt(blockTag.substring(2), 16);\n}\n\n\nconst defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\n\nfunction checkError(method: string, error: any, transaction: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) { data = \"0x\" + data.replace(/^.*0x/i, \"\"); }\n\n            if (isHexString(data)) { return data; }\n\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof(error.error.message) === \"string\") {\n            message = error.error.message;\n        } else if (typeof(error.body) === \"string\") {\n            message = error.body;\n        } else if (typeof(error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n         logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n         });\n    }\n\n    if (message.match(/execution failed due to an exception/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nexport class EtherscanProvider extends BaseProvider{\n    readonly baseUrl: string;\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: string) {\n        logger.checkNew(new.target, EtherscanProvider);\n\n        super(network);\n\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || defaultApiKey);\n    }\n\n    getBaseUrl(): string {\n        switch(this.network ? this.network.name: \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"ropsten\":\n                return \"https:/\\/api-ropsten.etherscan.io\";\n            case \"rinkeby\":\n                return \"https:/\\/api-rinkeby.etherscan.io\";\n            case \"kovan\":\n                return \"https:/\\/api-kovan.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            default:\n        }\n\n        return logger.throwArgumentError(\"unsupported network\", \"network\", name);\n    }\n\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.baseUrl }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    getPostUrl(): string {\n        return `${ this.baseUrl }/api`;\n    }\n\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n        const procFunc = (module === \"proxy\") ? getJsonResult: getResult;\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: url,\n            provider: this\n        });\n\n        const connection: ConnectionInfo = {\n            url: url,\n            throttleSlotInterval: 1000,\n            throttleCallback: (attempt: number, url: string) => {\n                if (this.isCommunityResource()) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        let payloadStr: string = null;\n        if (payload) {\n            connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n            payloadStr = Object.keys(payload).map((key) => {\n                return `${ key }=${ payload[key] }`\n            }).join(\"&\");\n        }\n\n        const result = await fetchJson(connection, payloadStr, procFunc || getJsonResult);\n\n        this.emit(\"debug\", {\n            action: \"response\",\n            request: url,\n            response: deepCopy(result),\n            provider: this\n        });\n\n        return result;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n\n        switch (method) {\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getStorageAt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: params.address,\n                    position: params.position,\n                    tag: params.blockTag\n                });\n\n            case \"sendTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: params.signedTransaction\n                }, true).catch((error) => {\n                    return checkError(\"sendTransaction\", error, params.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: params.blockTag,\n                        boolean: (params.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: params.transactionHash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: params.transactionHash\n                });\n\n            case \"call\": {\n                if (params.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"call\", error, params.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"estimateGas\", error, params.transaction);\n                }\n            }\n\n            case \"getLogs\": {\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n\n            case \"getEtherPrice\":\n                if (this.network.name !== \"homestead\") { return 0.0; }\n                return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n\n            default:\n                break;\n         }\n\n        return super.perform(method, params);\n    }\n\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window abailable without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    async getHistory(addressOrName: string | Promise<string>, startBlock?: BlockTag, endBlock?: BlockTag): Promise<Array<TransactionResponse>> {\n        const params = {\n            action: \"txlist\",\n            address: (await this.resolveName(addressOrName)),\n            startblock: ((startBlock == null) ? 0: startBlock),\n            endblock: ((endBlock == null) ? 99999999: endBlock),\n            sort: \"asc\"\n        };\n\n        const result = await this.fetch(\"account\", params);\n\n        return result.map((tx: any) => {\n            [\"contractAddress\", \"to\"].forEach(function(key) {\n                if (tx[key] == \"\") { delete tx[key]; }\n            });\n            if (tx.creates == null && tx.contractAddress != null) {\n                tx.creates = tx.contractAddress;\n            }\n            const item = this.formatter.transactionResponse(tx);\n            if (tx.timeStamp) { item.timestamp = parseInt(tx.timeStamp); }\n            return item;\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}